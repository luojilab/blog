{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/icarus/.git","hash":"0c6275f90869ffa89aeaf88c140d155d48b02079","modified":1575547023598},{"_id":"themes/icarus/_config.yml","hash":"3ef38a7e7e7b22b32d88f8efecf61a6e1f01aa7c","modified":1575547023608},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1575547023608},{"_id":"themes/icarus/.gitignore","hash":"35572c0f161a751b9f30ae3a9935ac045dba5220","modified":1575547023607},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1575547023608},{"_id":"themes/icarus/package.json","hash":"e9bcb9fcf69462d5b03c7870eb13ab28aa7933c7","modified":1575547023628},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1575547023607},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1575547023614},{"_id":"themes/icarus/languages/en.yml","hash":"66d873bbe04894610c2d28b0d03e10143997b51b","modified":1575547023614},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1575547023614},{"_id":"themes/icarus/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1575547023614},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1575547023614},{"_id":"themes/icarus/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1575547023614},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1575547023615},{"_id":"themes/icarus/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1575547023614},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1575547023615},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1575547023615},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1575547023615},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1575547023615},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"6ff978a0c4c11e996925e1a912a1d805f4680a6c","modified":1575547023615},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1575547023615},{"_id":"themes/icarus/layout/archive.ejs","hash":"2527527eaf3e757ab476325f691d2e2e0ff9c2d5","modified":1575547023615},{"_id":"themes/icarus/layout/category.ejs","hash":"58aa84f75193b978b2072f29dbb84ed8279574b9","modified":1575547023616},{"_id":"themes/icarus/layout/layout.ejs","hash":"c9ab786c4c4a95e403fc8ea7e536084f21a9ecc4","modified":1575547023621},{"_id":"themes/icarus/layout/index.ejs","hash":"8ab440868f721bb7256ab9f2be96996850b0cf44","modified":1575547023621},{"_id":"themes/icarus/layout/page.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1575547023621},{"_id":"themes/icarus/layout/post.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1575547023624},{"_id":"themes/icarus/layout/tag.ejs","hash":"45eb077f2ac86f5c8090cb1a2361eed56a368e95","modified":1575547023626},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1575547023626},{"_id":"themes/icarus/scripts/index.js","hash":"f97eb95812480cc3b07cc0ad44dc39f9a0032f24","modified":1575547023628},{"_id":"source/_posts/BigData/elasticsearch.md","hash":"4d6f4abd4ccc2dd235ab16ca17b1653275753c0c","modified":1575546746300},{"_id":"source/_posts/FE/node-flamegraph-optimize.md","hash":"a8ed1321bd972c17090421274f76049fad195e9a","modified":1575546746306},{"_id":"source/_posts/FE/chrome.md","hash":"5e5d700a1521926c29063933a40149c1083e6049","modified":1575546746304},{"_id":"source/_posts/FE/build-a-vue-component.md","hash":"3bccc166555a35ff690412450ab2f97e19be6a74","modified":1575546746302},{"_id":"source/_posts/Technical/ddgw.md","hash":"66f9bd407e7028774db1978f37c8526cda2cf9e1","modified":1575546746307},{"_id":"source/_posts/Technical/ddmvvm-android.md","hash":"46f54dc0d9748928583e52b9b73b33c8886d8381","modified":1575546746308},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"48cff5402e93b11d5266370e9c4b78ee21369cb9","modified":1575547023608},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1575547023608},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1575547023609},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1575547023609},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1575547023609},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1575547023609},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1575547023609},{"_id":"source/_posts/Technical/k8s.md","hash":"af94bedc0364ff5c5203110a5dfe48f13f55782d","modified":1575546746309},{"_id":"source/_posts/Technical/process.md","hash":"3cfd46646687955b889423fee88555269316bbef","modified":1575546746311},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1575547023609},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1575547023610},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1575547023610},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1575547023610},{"_id":"themes/icarus/includes/helpers/override.js","hash":"98f2c72c79de74bd01e3be10ef2f174c885d395a","modified":1575547023610},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1575547023610},{"_id":"themes/icarus/includes/helpers/site.js","hash":"2f55818448fe83c73418dcf9751745c7918c10e3","modified":1575547023611},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"ce24279cd0cd39855216dab0cd5223c755757cdf","modified":1575547023611},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"b0ef033e363b918134fb5a003143e9bd8fafa300","modified":1575547023611},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1575547023611},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1575547023611},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1575547023611},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1575547023612},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"ed1b818b929d71930608291514a72ef5a639efee","modified":1575547023612},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1575547023612},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2fb7a28fdde9a46f576e69b9967f24d66adffb57","modified":1575547023612},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1575547023612},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1575547023612},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1575547023613},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1575547023613},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"c5cedfe1074c0566baf8aca248f0392a501d9a74","modified":1575547023613},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1575547023613},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1575547023613},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1575547023613},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"7a8c656c8651d48e21ed24c469ea75898b2b12df","modified":1575547023616},{"_id":"themes/icarus/layout/comment/changyan.locals.js","hash":"49bce2ee742c7224bda97092d6e0a1a09184ef34","modified":1575547023616},{"_id":"themes/icarus/layout/comment/disqus.locals.js","hash":"a8d2cecaa82ec9e2e2e61cb73417d63d115335d6","modified":1575547023616},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"73038ac4fdfdfa71d92edaa98cc194b3446586a3","modified":1575547023616},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"1c3751f36f737527e352c65bb1ca7172ff792979","modified":1575547023617},{"_id":"themes/icarus/layout/comment/facebook.locals.js","hash":"77e3ef1d933660d980b26d15968aa1a5c8a93a56","modified":1575547023617},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"d5e1a396e23df4e75e139d12846290bdb08ba01e","modified":1575547023617},{"_id":"themes/icarus/layout/comment/gitment.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1575547023617},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"eb1314badf793924b5786e92f8b3ebb0f21f3b58","modified":1575547023617},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1575547023617},{"_id":"themes/icarus/layout/comment/gitalk.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1575547023617},{"_id":"themes/icarus/layout/comment/isso.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023617},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1575547023618},{"_id":"themes/icarus/layout/comment/livere.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023618},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1575547023618},{"_id":"themes/icarus/layout/comment/valine.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023618},{"_id":"themes/icarus/layout/common/footer.locals.js","hash":"504ed92dc76723f19777463d690acfbe1d89e2ba","modified":1575547023619},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"4adfc361b780193bfc8ad73afb7079e550f37eb7","modified":1575547023618},{"_id":"themes/icarus/layout/common/article.ejs","hash":"49923a6c9742c42899c3a569b84c1ea17cfe341a","modified":1575547023618},{"_id":"themes/icarus/layout/common/head.ejs","hash":"0998072c9ece90e26339f2503633c4ca08da62e9","modified":1575547023619},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"765d8ab516781d7157bb41d690a71b549e95e721","modified":1575547023619},{"_id":"themes/icarus/layout/common/article.locals.js","hash":"1f108fa96e61a681d7b1ee390b4f0ff60d042720","modified":1575547023618},{"_id":"themes/icarus/layout/common/navbar.locals.js","hash":"7e523ba80667038f2e58cf4f9cb073e9afbc70e6","modified":1575547023619},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1575547023619},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"52f54b4ba88253ad0ec13d3b40fa4232e691af57","modified":1575547023619},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1575547023620},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1575547023620},{"_id":"themes/icarus/layout/donate/alipay.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023620},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"02ffa7531d14b88e76bff5ff6d2b4482e7c5bbfd","modified":1575547023620},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1575547023620},{"_id":"themes/icarus/layout/donate/paypal.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023620},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1575547023620},{"_id":"themes/icarus/layout/donate/patreon.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023620},{"_id":"themes/icarus/layout/donate/wechat.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023621},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"c17ea2cfe5cb239342166e2ba72cbfc663c8160f","modified":1575547023621},{"_id":"themes/icarus/layout/plugin/animejs.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1575547023621},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"d23e5da91e3cce286798f0ef1f993db01cc2a26d","modified":1575547023621},{"_id":"themes/icarus/layout/plugin/back-to-top.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1575547023622},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"7dbbea5722277e00a624c1796ec83d5f9c12d059","modified":1575547023622},{"_id":"themes/icarus/layout/plugin/baidu-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1575547023622},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"4285b0ae608c7c54e4ecbebb6d22d4cd1be28f70","modified":1575547023622},{"_id":"themes/icarus/layout/plugin/busuanzi.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1575547023622},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"7d19b7a5713d08a614578f079f1327a651c472ae","modified":1575547023622},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"13b298b0026bfc7bcb6a47b6c795fe15cc4584fc","modified":1575547023622},{"_id":"themes/icarus/layout/plugin/google-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1575547023622},{"_id":"themes/icarus/layout/plugin/gallery.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1575547023622},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"6df0d8f77ed39e4d32c78177844115e31bf3a776","modified":1575547023623},{"_id":"themes/icarus/layout/plugin/hotjar.locals.js","hash":"9258fc2af057d2545a43fae54790743b63450378","modified":1575547023623},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"dddb6f37487286fe2080118bcbb4a8d82dc84d5e","modified":1575547023623},{"_id":"themes/icarus/layout/plugin/mathjax.locals.js","hash":"7faa26fa6da6a93dc3f7fdcf5a784d1f8825b031","modified":1575547023623},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"1437d1ac085a8110e61317254f6c0a034121bc39","modified":1575547023623},{"_id":"themes/icarus/layout/plugin/outdated-browser.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1575547023623},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"34423f74787cc9d67b2598dd69b07c84d5bf2280","modified":1575547023623},{"_id":"themes/icarus/layout/plugin/progressbar.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1575547023623},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1575547023624},{"_id":"themes/icarus/layout/search/baidu.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023624},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1575547023624},{"_id":"themes/icarus/layout/search/google-cse.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023624},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1575547023624},{"_id":"themes/icarus/layout/search/insight.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023624},{"_id":"themes/icarus/layout/share/addthis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023625},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1575547023625},{"_id":"themes/icarus/layout/share/addtoany.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023625},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1575547023625},{"_id":"themes/icarus/layout/share/bdshare.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023625},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"95d3bc1a841bd934b1ae9209ad1af74e743ecb10","modified":1575547023625},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1575547023625},{"_id":"themes/icarus/layout/share/sharejs.locals.js","hash":"11976fd4cfed1044be29b476b34c33175c9b4308","modified":1575547023625},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1575547023626},{"_id":"themes/icarus/layout/share/sharethis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023626},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1575547023626},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"17e58e537645c4434a1140377ae3e7f43cca4927","modified":1575547023626},{"_id":"themes/icarus/layout/widget/category.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023626},{"_id":"themes/icarus/layout/widget/archive.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023626},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"c18dab874af84147349a596d9e713f8e0ee5e17e","modified":1575547023627},{"_id":"themes/icarus/layout/widget/links.locals.js","hash":"872cf1a18e152361f5739c6d5fecc0bf46d59513","modified":1575547023627},{"_id":"themes/icarus/layout/widget/profile.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1575547023627},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"14f024e8da3cbaaa55f9ae9706de664c3f9b7dd8","modified":1575547023627},{"_id":"themes/icarus/layout/widget/subscribe_email.ejs","hash":"391622e9c1d17bf79180faa617ed8c1ee1871a87","modified":1575547023627},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"14a2f4587831e017b93818c06dbe18a7e8a27c1e","modified":1575547023627},{"_id":"themes/icarus/layout/widget/subscribe_email.locals.js","hash":"aae87fbdb7a1245a0fc0637225a935fc39836916","modified":1575547023627},{"_id":"themes/icarus/layout/widget/recent_posts.locals.js","hash":"5065aca74ec2c98ec88994636fee8408f769c5f2","modified":1575547023627},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"e41aff420cc4ea1c454de49bd8af0e7a93f3db3f","modified":1575547023628},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"26fa17afaf0cb345a213816c44c39575a66759ba","modified":1575547023628},{"_id":"themes/icarus/layout/widget/tagcloud.locals.js","hash":"093f59d2f43e7ffa47bee79da15f98705300dfba","modified":1575547023628},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"e800b4b38eab716882389a09527e9f59a189dea6","modified":1575547023628},{"_id":"themes/icarus/layout/widget/toc.locals.js","hash":"e730a7fff2717f17741540e5ed77b89e289fdeab","modified":1575547023628},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1575547023629},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1575547023629},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1575547023629},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1575547023629},{"_id":"themes/icarus/source/css/style.styl","hash":"1c4fa31437c7e499f4bcf0b4fa7da9c2d16eeea7","modified":1575547023629},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1575547023630},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1575547023630},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1575547023630},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1575547023631},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1575547023631},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1575547023631},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1575547023631},{"_id":"themes/icarus/source/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1575547023631},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1575547023632},{"_id":"themes/icarus/source/js/main.js","hash":"faee41896e7bb3373ba5032b82d0b21a0321cea5","modified":1575547023632}],"Category":[{"name":"大数据","_id":"ck3so5k8x00024efyh7ss08b4"},{"name":"前端","_id":"ck3so5k9500074efy316c6i1l"},{"name":"八里庄技术沙龙","_id":"ck3so5k9b000f4efyad0j2ecz"},{"name":"NodeJs","parent":"ck3so5k9500074efy316c6i1l","_id":"ck3so5k9i000p4efy3uzi5dk4"}],"Data":[],"Page":[],"Post":[{"title":"Elasticsearch 插件详解及实践","date":"2019-08-10T16:00:00.000Z","author":"张聪聪","toc":true,"thumbnail":"https://piccdn.luojilab.com/fe-oss/default/MTU2ODYzMjQ0MTcy.jpeg","_content":"## 背景介绍\n现在 ElasticSearch 大量应用在搜索领域，开发者可以通过其提供的多样的查询api达到希望的搜索效果，而且Elasticsearch版本也一直在不断迭代，以满足开发者的需要。但是，实际开发过程中，可能需要将搜索和自己的业务场景进行结合，来达到自定义的排序、搜索规则。Elasticsearch针对这种情况，提供了插件的功能，可以这么说，如果能够学会使用插件，那我们就有了自由扩充ELasticsearch功能的手段,对搜索的掌控力就能提升一个档次。\n\n<!-- more -->\n\n## Es插件分类\n**插件**作为ES的架构中的重要一环，ES为其开放了足够多的接口使开发者可以实现自定义的功能需求,其共支持下面十种插件，AnalysisPlugin，ScriptPlugin，SearchPlugin这三个常用插件我们在后面会更详细的讲解\n\n**1、AnalysisPlugin**\n分析插件,用于开发者开发额外的分析功能来增强Elasticsearch自身分析功能的不足,medcl大佬的ik分词插件相信大家都用过.\n\n**2、ScriptPlugin**\n脚本插件.会调用用户的脚本，其中主要是用在function_score查询中，使用自定义方法进行打分,我们熟知的painless脚本就是ScriptPlugin脚本\n\n**3、SearchPlugin**\n查询插件,扩展Elasticsearch的查询功能,es 的search功能功能十分强大，有了SearchPlugin我们可以在search中增加更多查询方法，我们后续可能会在此基础上增加很多令人兴奋的查询。例如根据用户购买的书籍查询与用户相似的其他用户，例如结合模型对搜索词进行expanding。\n\n\n**4、ActionPlugi**\nRestful API命令请求插件,如果Elasticsearch内置的命令如_all,cat,/cat/health等rest命令无法满足需求,开发者可以自己开发需要的rest命令，例如希望看到某个分词器的词表的命令。\n\n**5、ClusterPlugin**\n集群管理插件,用于加强自定义对集群的管理功能，该插件可以用来扩展allocation机制，例如在进行分片选择的时候如果我们可能倾向于一些机器，\n\n**6、DiscoveryPlugin**\n自定义发现插件，目前是使用zen协议来进行。\n\n**7、IngestPlugin**\n预处理插件，在数据索引之前进行预处理，例如根据用户ip来增加地理信息的geoip Processor Plugin\n\n**8、MapperPlugin**\n映射插件,加强ES的数据类型.比如增加一个attachment类型,里面可以放PDF或者WORD数据\n\n**9、NetworkPlugin**\n网络传输插件插件,\n\n**10、RepositoryPlugin**\n存储插件,提供快照和恢复\n\n\n## ES插件加载过程\n* 插件的加载时机是在节点启动创建的时候中会扫描Elasticsearch的安装目录下的plugins和module的插件列表，并通过PluginService进行解析插件。\n* PluginFilter是用来识别plugin类别的一个方法，通过每个插件实现的接口将所有插件分类并分发给Elasticsearch不同的服务组件进行注册。\n* 在node不同的服务启动过程中会读取每个和自己相关的组件进行扩展，最终插件都会形成服务提供给集群使用（比如ScriptPlugin最终在ScriptService提供服务,SearchPlugin最终会在searchTransportService中提供服务）\n\n![插件加载过程](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg3MjY4.png)\n \n**plugin-descriptor.properties**\n \nPluginService 加载插件的元信息会从该文件中进行读取，所有插件都需要这个文件，下面两个配置比较重要，如果es版本不一致会加载失败。\n \n``` java\nname=${project.name}\ndescription=${project.description}\nversion=${project.version}\nclassname=${elasticsearch.plugin.classname}  插件入口\njava.version=1.8\nelasticsearch.version=${elasticsearch.version}   插件对应es版本\n\n```\n \n## Example:AnalysisPlugin\n\n这里我们就使用十分流行的ik分词来解释，[ik](https://github.com/medcl/elasticsearch-analysis-ik)是一款十分流行的中文分词器,其能支持粗细力度的中文分词，其就是一款基于AnalysisPlugin实现的插件\n\n### IK分词类图\n\n![Ik分词类图](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg5NDQy.png)\n \n我们可以看到ik分词主要实现了接口中的getTokenizers()和getAnalyzers()，其调用流程如下：\n  \n1. 其在Node初始化时就会将pluginService的中的AnalysisPlugin插件加载到AnalysisModule中。\n2. 在AnalysisModule中进行分词器和分词器的注册。\n3. 在注册的过程其实就是将AnalysisIkPlugin的getTokenizers和getAnalyzers返回的分析器和分词器放入key是名称，value是工厂类的map中。\n  \n我们这里只看分词器，实际上被注册到分词组中的是一个工厂类，其返回一个继承自Tokenizer的IK Tokenizer，这里最核心的就是**incrementToken()**,其会进行循环词语切分，最终将词语切分完毕，如果自定义分词器，此处就是决定分词的方法。\n  \n![时序图](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg4OTIw.png)\n\n### 自定义分词器步骤\n \n   \n如果我们要实现我们自己的分词器的话其实只要进行如下几步\n  \n1. 继承AnalysisPlugin接口和Plugin接口，实现其中获得工厂类的getTokenizers。\n  \n2. 实现自定义分词的工厂类方法，其要继承自AbstractTokenizerFactory,实现create来返回自定义测分词类。\n  \n3. 实现自定义分词类其继承自Lucene的Tokenizer抽象类，将实现incrementToken方法。\n  \n4. 最终将程序中加入plugin-descriptor.properties组价描述文件，打包放入plugin文件中即可。\n  \n## 我们的实践\n\n\n### ScriptPlugin\n**现状** \n容错在搜索中十分常见,但我们经过对搜索无结果日志分析发现对于有很大一部分错误都发生在拼音相同但字写错的了情况。\n\n**无结果日志**\n\n``` bash\n事件\t          总数\t  平均\t  20190624\t20190625\t20190626 \nA->总次数,马徐俊\t8\t    1.1429\t    0\t      0\t           0\t     \n```\n\n**搜索词日志**\n\n``` bash\n搜索关键词    搜索次数     搜索人数\n逻辑思维       168          137\n```\n\n#### 问题及解决\n所以我们希望能够实现拼音级别的容错,然后又不希望字错的字太多，就使用如下DSL\n\n``` json\n{\"query\":{\n  \"bool\":{\n    \"filter\":[\n        {\n          \"multi_match\":{\n              \"query\":\"{{.Query}}\",\n              \"analyzer\":\"standard\",\n              \"fields\":[\n                  \"title.standard\",\n                  \"author.standard\"\n              ],\n              \"minimum_should_match\":\"50%\"\n          }\n        },\n        {\n          \"bool\":{\n            \"should\":[\n                {\n                  \"match_phrase\":{\n                      \"author.pinyin\":{\n                          \"query\":\"{{.Query}}\",\n                          \"analyzer\":\"pinyin\"\n                      }\n                  }\n                },\n                {\n                  \"match_phrase\":{\n                      \"title.pinyin\":{\n                          \"query\":\"{{.Query}}\",\n                          \"analyzer\":\"pinyin\"\n                      }\n                  }\n                }\n            ]\n          }\n        }\n    ]}\n  }  \n}\n```\n\n但如此便存在一个问题,其匹配到了_dujia_的拼音，又匹配到了其中一半的字_家_，所以其能被命中返回，如下所示\n\n![badcase](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg4NDI2.png) \n   \n所以我们新增了一个组件用以限制查询词的长度,太短的词不应进行容错，而且在词变长就不会出现上述问题。其继承自ScriptPlugin，并且实现了自定义的打分逻辑，如果限制的查询语句超过少于限制的长度则直接返回-1分,否则根据配置返回固定的分或者ES打出的分。\n   \n主要代码逻辑\n   \n``` java\npublic SearchScript newInstance(LeafReaderContext context) throws IOException {\n  return new SearchScript(p, lookup, context) {\n    public double runAsDouble() {\n      if(query.length()<length){\n              return -1d;\n      }\n      return Integer.MIN_VALUE==constant_score?getScore():constant_score;\n            }\n      };\n}                      \n```\n\n\n``` json\n// 新增语句\n{\n  \"script_score\": {\n    \"script\": {\n      \"source\": \"limit_query\",\n      \"lang\": \"limit_query_length\",\n      \"params\": {\n        \"query\": \"{{.Query}}\",\n        \"length\": \"3\",\n        \"constant_score\": \"1\"\n        }\n    }\n}\n}\n```\n\n#### 思考\n其实这里我们可以做的更多\n \n* 在lookup中我们可以拿到每个doc的_source字段\n* 在context中我们可以拿到全局的mapping,setting等信息\n* 在score中可以拿到本来的分数\n\n\n### SearchPlugin\n#### 现状\n  我们在实现长句搜索的时候可以使用 [more-like-this](https://www.elastic.co/guide/en/elasticsearch/reference/6.3/query-dsl-mlt-query.html),其原理大体就是将like的语句进行分词后然后依照BM25 选出在该字段中得分最高的n个词语，然后将原本查询的长语句变成了多个重要词的查询。\n#### 问题及解决\n从morelike中提取出来的词相距距离太长依旧可以召回，相信熟悉Es的同学都知道ES有match\\_phrase的语法，其中的slop可以限制词的距离，所以我们希望能够实现一个增加词距离的morelike语句，我们称其为more\\_like\\_this\\_phrase，要使es能够识别我们的组件实现SearchPlugin接口，并返回build的类和解析查询的方法就可以了。\n\n```\npublic class MoreLikeThisPharseSearchPlugin  extends Plugin implements SearchPlugin {\n\n    @Override\n    public List<QuerySpec<?>> getQueries() {\n        return singletonList(new QuerySpec<>(MoreLikeThisPharseQueryBuilder.NAME, MoreLikeThisPharseQueryBuilder::new, MoreLikeThisPharseQueryBuilder::fromXContent));\n    }\n\n}\n```\n由于我们是基于more\\_like\\_this进行的修改，所以主要修改的解析体和创建lucene query的逻辑\n\n1. 解析方法 MoreLikeThisPharseQueryBuilder::fromXContent\n  \n  加入解析slop的方法，将slop存到MoreLikeThisPharseQuery对象中\n2. 创建lucene查询 createQuery\n  \n  more\\_like\\_this\\_phrase 在原基础上进行了修改,从多个term query抽取出最少需要匹配到的个数（如果minishouldmatch有配置则使用minishouldmatch的个数,只需匹配任意一个即可),将所抽出的m个  数的词中任意挑选 n个词进行match_phrase+slop的查询 \n  原lucene 查询结构\n\n\n![lucene查询树](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg3OTQ3.png) \n \n## 总结\n  \n插件是解决复杂自定义打分排序逻辑的利器，后面我们会依赖插件实现更多的打分召回策略，为用户提供更好的搜索服务。\n\n[1]: [ElasticSearch Plugins and Integrations](https://www.elastic.co/guide/en/elasticsearch/plugins/current/index.html)\n[2]: [Elasticsearch源码分析 Plugin组件加载](https://www.jianshu.com/p/3373695a2b76)","source":"_posts/BigData/elasticsearch.md","raw":"title: Elasticsearch 插件详解及实践\ndate: 2019-08-11\nauthor: 张聪聪\ntoc: true\nthumbnail: https://piccdn.luojilab.com/fe-oss/default/MTU2ODYzMjQ0MTcy.jpeg\ntag: \n  - Elasticsearch\n  - 大数据\ncategories: \n  - 大数据\n\n---\n## 背景介绍\n现在 ElasticSearch 大量应用在搜索领域，开发者可以通过其提供的多样的查询api达到希望的搜索效果，而且Elasticsearch版本也一直在不断迭代，以满足开发者的需要。但是，实际开发过程中，可能需要将搜索和自己的业务场景进行结合，来达到自定义的排序、搜索规则。Elasticsearch针对这种情况，提供了插件的功能，可以这么说，如果能够学会使用插件，那我们就有了自由扩充ELasticsearch功能的手段,对搜索的掌控力就能提升一个档次。\n\n<!-- more -->\n\n## Es插件分类\n**插件**作为ES的架构中的重要一环，ES为其开放了足够多的接口使开发者可以实现自定义的功能需求,其共支持下面十种插件，AnalysisPlugin，ScriptPlugin，SearchPlugin这三个常用插件我们在后面会更详细的讲解\n\n**1、AnalysisPlugin**\n分析插件,用于开发者开发额外的分析功能来增强Elasticsearch自身分析功能的不足,medcl大佬的ik分词插件相信大家都用过.\n\n**2、ScriptPlugin**\n脚本插件.会调用用户的脚本，其中主要是用在function_score查询中，使用自定义方法进行打分,我们熟知的painless脚本就是ScriptPlugin脚本\n\n**3、SearchPlugin**\n查询插件,扩展Elasticsearch的查询功能,es 的search功能功能十分强大，有了SearchPlugin我们可以在search中增加更多查询方法，我们后续可能会在此基础上增加很多令人兴奋的查询。例如根据用户购买的书籍查询与用户相似的其他用户，例如结合模型对搜索词进行expanding。\n\n\n**4、ActionPlugi**\nRestful API命令请求插件,如果Elasticsearch内置的命令如_all,cat,/cat/health等rest命令无法满足需求,开发者可以自己开发需要的rest命令，例如希望看到某个分词器的词表的命令。\n\n**5、ClusterPlugin**\n集群管理插件,用于加强自定义对集群的管理功能，该插件可以用来扩展allocation机制，例如在进行分片选择的时候如果我们可能倾向于一些机器，\n\n**6、DiscoveryPlugin**\n自定义发现插件，目前是使用zen协议来进行。\n\n**7、IngestPlugin**\n预处理插件，在数据索引之前进行预处理，例如根据用户ip来增加地理信息的geoip Processor Plugin\n\n**8、MapperPlugin**\n映射插件,加强ES的数据类型.比如增加一个attachment类型,里面可以放PDF或者WORD数据\n\n**9、NetworkPlugin**\n网络传输插件插件,\n\n**10、RepositoryPlugin**\n存储插件,提供快照和恢复\n\n\n## ES插件加载过程\n* 插件的加载时机是在节点启动创建的时候中会扫描Elasticsearch的安装目录下的plugins和module的插件列表，并通过PluginService进行解析插件。\n* PluginFilter是用来识别plugin类别的一个方法，通过每个插件实现的接口将所有插件分类并分发给Elasticsearch不同的服务组件进行注册。\n* 在node不同的服务启动过程中会读取每个和自己相关的组件进行扩展，最终插件都会形成服务提供给集群使用（比如ScriptPlugin最终在ScriptService提供服务,SearchPlugin最终会在searchTransportService中提供服务）\n\n![插件加载过程](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg3MjY4.png)\n \n**plugin-descriptor.properties**\n \nPluginService 加载插件的元信息会从该文件中进行读取，所有插件都需要这个文件，下面两个配置比较重要，如果es版本不一致会加载失败。\n \n``` java\nname=${project.name}\ndescription=${project.description}\nversion=${project.version}\nclassname=${elasticsearch.plugin.classname}  插件入口\njava.version=1.8\nelasticsearch.version=${elasticsearch.version}   插件对应es版本\n\n```\n \n## Example:AnalysisPlugin\n\n这里我们就使用十分流行的ik分词来解释，[ik](https://github.com/medcl/elasticsearch-analysis-ik)是一款十分流行的中文分词器,其能支持粗细力度的中文分词，其就是一款基于AnalysisPlugin实现的插件\n\n### IK分词类图\n\n![Ik分词类图](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg5NDQy.png)\n \n我们可以看到ik分词主要实现了接口中的getTokenizers()和getAnalyzers()，其调用流程如下：\n  \n1. 其在Node初始化时就会将pluginService的中的AnalysisPlugin插件加载到AnalysisModule中。\n2. 在AnalysisModule中进行分词器和分词器的注册。\n3. 在注册的过程其实就是将AnalysisIkPlugin的getTokenizers和getAnalyzers返回的分析器和分词器放入key是名称，value是工厂类的map中。\n  \n我们这里只看分词器，实际上被注册到分词组中的是一个工厂类，其返回一个继承自Tokenizer的IK Tokenizer，这里最核心的就是**incrementToken()**,其会进行循环词语切分，最终将词语切分完毕，如果自定义分词器，此处就是决定分词的方法。\n  \n![时序图](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg4OTIw.png)\n\n### 自定义分词器步骤\n \n   \n如果我们要实现我们自己的分词器的话其实只要进行如下几步\n  \n1. 继承AnalysisPlugin接口和Plugin接口，实现其中获得工厂类的getTokenizers。\n  \n2. 实现自定义分词的工厂类方法，其要继承自AbstractTokenizerFactory,实现create来返回自定义测分词类。\n  \n3. 实现自定义分词类其继承自Lucene的Tokenizer抽象类，将实现incrementToken方法。\n  \n4. 最终将程序中加入plugin-descriptor.properties组价描述文件，打包放入plugin文件中即可。\n  \n## 我们的实践\n\n\n### ScriptPlugin\n**现状** \n容错在搜索中十分常见,但我们经过对搜索无结果日志分析发现对于有很大一部分错误都发生在拼音相同但字写错的了情况。\n\n**无结果日志**\n\n``` bash\n事件\t          总数\t  平均\t  20190624\t20190625\t20190626 \nA->总次数,马徐俊\t8\t    1.1429\t    0\t      0\t           0\t     \n```\n\n**搜索词日志**\n\n``` bash\n搜索关键词    搜索次数     搜索人数\n逻辑思维       168          137\n```\n\n#### 问题及解决\n所以我们希望能够实现拼音级别的容错,然后又不希望字错的字太多，就使用如下DSL\n\n``` json\n{\"query\":{\n  \"bool\":{\n    \"filter\":[\n        {\n          \"multi_match\":{\n              \"query\":\"{{.Query}}\",\n              \"analyzer\":\"standard\",\n              \"fields\":[\n                  \"title.standard\",\n                  \"author.standard\"\n              ],\n              \"minimum_should_match\":\"50%\"\n          }\n        },\n        {\n          \"bool\":{\n            \"should\":[\n                {\n                  \"match_phrase\":{\n                      \"author.pinyin\":{\n                          \"query\":\"{{.Query}}\",\n                          \"analyzer\":\"pinyin\"\n                      }\n                  }\n                },\n                {\n                  \"match_phrase\":{\n                      \"title.pinyin\":{\n                          \"query\":\"{{.Query}}\",\n                          \"analyzer\":\"pinyin\"\n                      }\n                  }\n                }\n            ]\n          }\n        }\n    ]}\n  }  \n}\n```\n\n但如此便存在一个问题,其匹配到了_dujia_的拼音，又匹配到了其中一半的字_家_，所以其能被命中返回，如下所示\n\n![badcase](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg4NDI2.png) \n   \n所以我们新增了一个组件用以限制查询词的长度,太短的词不应进行容错，而且在词变长就不会出现上述问题。其继承自ScriptPlugin，并且实现了自定义的打分逻辑，如果限制的查询语句超过少于限制的长度则直接返回-1分,否则根据配置返回固定的分或者ES打出的分。\n   \n主要代码逻辑\n   \n``` java\npublic SearchScript newInstance(LeafReaderContext context) throws IOException {\n  return new SearchScript(p, lookup, context) {\n    public double runAsDouble() {\n      if(query.length()<length){\n              return -1d;\n      }\n      return Integer.MIN_VALUE==constant_score?getScore():constant_score;\n            }\n      };\n}                      \n```\n\n\n``` json\n// 新增语句\n{\n  \"script_score\": {\n    \"script\": {\n      \"source\": \"limit_query\",\n      \"lang\": \"limit_query_length\",\n      \"params\": {\n        \"query\": \"{{.Query}}\",\n        \"length\": \"3\",\n        \"constant_score\": \"1\"\n        }\n    }\n}\n}\n```\n\n#### 思考\n其实这里我们可以做的更多\n \n* 在lookup中我们可以拿到每个doc的_source字段\n* 在context中我们可以拿到全局的mapping,setting等信息\n* 在score中可以拿到本来的分数\n\n\n### SearchPlugin\n#### 现状\n  我们在实现长句搜索的时候可以使用 [more-like-this](https://www.elastic.co/guide/en/elasticsearch/reference/6.3/query-dsl-mlt-query.html),其原理大体就是将like的语句进行分词后然后依照BM25 选出在该字段中得分最高的n个词语，然后将原本查询的长语句变成了多个重要词的查询。\n#### 问题及解决\n从morelike中提取出来的词相距距离太长依旧可以召回，相信熟悉Es的同学都知道ES有match\\_phrase的语法，其中的slop可以限制词的距离，所以我们希望能够实现一个增加词距离的morelike语句，我们称其为more\\_like\\_this\\_phrase，要使es能够识别我们的组件实现SearchPlugin接口，并返回build的类和解析查询的方法就可以了。\n\n```\npublic class MoreLikeThisPharseSearchPlugin  extends Plugin implements SearchPlugin {\n\n    @Override\n    public List<QuerySpec<?>> getQueries() {\n        return singletonList(new QuerySpec<>(MoreLikeThisPharseQueryBuilder.NAME, MoreLikeThisPharseQueryBuilder::new, MoreLikeThisPharseQueryBuilder::fromXContent));\n    }\n\n}\n```\n由于我们是基于more\\_like\\_this进行的修改，所以主要修改的解析体和创建lucene query的逻辑\n\n1. 解析方法 MoreLikeThisPharseQueryBuilder::fromXContent\n  \n  加入解析slop的方法，将slop存到MoreLikeThisPharseQuery对象中\n2. 创建lucene查询 createQuery\n  \n  more\\_like\\_this\\_phrase 在原基础上进行了修改,从多个term query抽取出最少需要匹配到的个数（如果minishouldmatch有配置则使用minishouldmatch的个数,只需匹配任意一个即可),将所抽出的m个  数的词中任意挑选 n个词进行match_phrase+slop的查询 \n  原lucene 查询结构\n\n\n![lucene查询树](https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg3OTQ3.png) \n \n## 总结\n  \n插件是解决复杂自定义打分排序逻辑的利器，后面我们会依赖插件实现更多的打分召回策略，为用户提供更好的搜索服务。\n\n[1]: [ElasticSearch Plugins and Integrations](https://www.elastic.co/guide/en/elasticsearch/plugins/current/index.html)\n[2]: [Elasticsearch源码分析 Plugin组件加载](https://www.jianshu.com/p/3373695a2b76)","slug":"BigData/elasticsearch","published":1,"updated":"2019-12-05T11:52:26.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3so5k8l00004efy97zr1opx","content":"<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>现在 ElasticSearch 大量应用在搜索领域，开发者可以通过其提供的多样的查询api达到希望的搜索效果，而且Elasticsearch版本也一直在不断迭代，以满足开发者的需要。但是，实际开发过程中，可能需要将搜索和自己的业务场景进行结合，来达到自定义的排序、搜索规则。Elasticsearch针对这种情况，提供了插件的功能，可以这么说，如果能够学会使用插件，那我们就有了自由扩充ELasticsearch功能的手段,对搜索的掌控力就能提升一个档次。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Es插件分类\"><a href=\"#Es插件分类\" class=\"headerlink\" title=\"Es插件分类\"></a>Es插件分类</h2><p><strong>插件</strong>作为ES的架构中的重要一环，ES为其开放了足够多的接口使开发者可以实现自定义的功能需求,其共支持下面十种插件，AnalysisPlugin，ScriptPlugin，SearchPlugin这三个常用插件我们在后面会更详细的讲解</p>\n<p><strong>1、AnalysisPlugin</strong><br>分析插件,用于开发者开发额外的分析功能来增强Elasticsearch自身分析功能的不足,medcl大佬的ik分词插件相信大家都用过.</p>\n<p><strong>2、ScriptPlugin</strong><br>脚本插件.会调用用户的脚本，其中主要是用在function_score查询中，使用自定义方法进行打分,我们熟知的painless脚本就是ScriptPlugin脚本</p>\n<p><strong>3、SearchPlugin</strong><br>查询插件,扩展Elasticsearch的查询功能,es 的search功能功能十分强大，有了SearchPlugin我们可以在search中增加更多查询方法，我们后续可能会在此基础上增加很多令人兴奋的查询。例如根据用户购买的书籍查询与用户相似的其他用户，例如结合模型对搜索词进行expanding。</p>\n<p><strong>4、ActionPlugi</strong><br>Restful API命令请求插件,如果Elasticsearch内置的命令如_all,cat,/cat/health等rest命令无法满足需求,开发者可以自己开发需要的rest命令，例如希望看到某个分词器的词表的命令。</p>\n<p><strong>5、ClusterPlugin</strong><br>集群管理插件,用于加强自定义对集群的管理功能，该插件可以用来扩展allocation机制，例如在进行分片选择的时候如果我们可能倾向于一些机器，</p>\n<p><strong>6、DiscoveryPlugin</strong><br>自定义发现插件，目前是使用zen协议来进行。</p>\n<p><strong>7、IngestPlugin</strong><br>预处理插件，在数据索引之前进行预处理，例如根据用户ip来增加地理信息的geoip Processor Plugin</p>\n<p><strong>8、MapperPlugin</strong><br>映射插件,加强ES的数据类型.比如增加一个attachment类型,里面可以放PDF或者WORD数据</p>\n<p><strong>9、NetworkPlugin</strong><br>网络传输插件插件,</p>\n<p><strong>10、RepositoryPlugin</strong><br>存储插件,提供快照和恢复</p>\n<h2 id=\"ES插件加载过程\"><a href=\"#ES插件加载过程\" class=\"headerlink\" title=\"ES插件加载过程\"></a>ES插件加载过程</h2><ul>\n<li>插件的加载时机是在节点启动创建的时候中会扫描Elasticsearch的安装目录下的plugins和module的插件列表，并通过PluginService进行解析插件。</li>\n<li>PluginFilter是用来识别plugin类别的一个方法，通过每个插件实现的接口将所有插件分类并分发给Elasticsearch不同的服务组件进行注册。</li>\n<li>在node不同的服务启动过程中会读取每个和自己相关的组件进行扩展，最终插件都会形成服务提供给集群使用（比如ScriptPlugin最终在ScriptService提供服务,SearchPlugin最终会在searchTransportService中提供服务）</li>\n</ul>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg3MjY4.png\" alt=\"插件加载过程\"></p>\n<p><strong>plugin-descriptor.properties</strong></p>\n<p>PluginService 加载插件的元信息会从该文件中进行读取，所有插件都需要这个文件，下面两个配置比较重要，如果es版本不一致会加载失败。</p>\n<figure class=\"highlight java hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">name=$&#123;project.name&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">description=$&#123;project.description&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">version=$&#123;project.version&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">classname=$&#123;elasticsearch.plugin.classname&#125;  插件入口</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">java.version=<span class=\"hljs-number\">1.8</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.version=$&#123;elasticsearch.version&#125;   插件对应es版本</span></pre></td></tr></table></figure>\n\n<h2 id=\"Example-AnalysisPlugin\"><a href=\"#Example-AnalysisPlugin\" class=\"headerlink\" title=\"Example:AnalysisPlugin\"></a>Example:AnalysisPlugin</h2><p>这里我们就使用十分流行的ik分词来解释，<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\" target=\"_blank\" rel=\"noopener\">ik</a>是一款十分流行的中文分词器,其能支持粗细力度的中文分词，其就是一款基于AnalysisPlugin实现的插件</p>\n<h3 id=\"IK分词类图\"><a href=\"#IK分词类图\" class=\"headerlink\" title=\"IK分词类图\"></a>IK分词类图</h3><p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg5NDQy.png\" alt=\"Ik分词类图\"></p>\n<p>我们可以看到ik分词主要实现了接口中的getTokenizers()和getAnalyzers()，其调用流程如下：</p>\n<ol>\n<li>其在Node初始化时就会将pluginService的中的AnalysisPlugin插件加载到AnalysisModule中。</li>\n<li>在AnalysisModule中进行分词器和分词器的注册。</li>\n<li>在注册的过程其实就是将AnalysisIkPlugin的getTokenizers和getAnalyzers返回的分析器和分词器放入key是名称，value是工厂类的map中。</li>\n</ol>\n<p>我们这里只看分词器，实际上被注册到分词组中的是一个工厂类，其返回一个继承自Tokenizer的IK Tokenizer，这里最核心的就是<strong>incrementToken()</strong>,其会进行循环词语切分，最终将词语切分完毕，如果自定义分词器，此处就是决定分词的方法。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg4OTIw.png\" alt=\"时序图\"></p>\n<h3 id=\"自定义分词器步骤\"><a href=\"#自定义分词器步骤\" class=\"headerlink\" title=\"自定义分词器步骤\"></a>自定义分词器步骤</h3><p>如果我们要实现我们自己的分词器的话其实只要进行如下几步</p>\n<ol>\n<li><p>继承AnalysisPlugin接口和Plugin接口，实现其中获得工厂类的getTokenizers。</p>\n</li>\n<li><p>实现自定义分词的工厂类方法，其要继承自AbstractTokenizerFactory,实现create来返回自定义测分词类。</p>\n</li>\n<li><p>实现自定义分词类其继承自Lucene的Tokenizer抽象类，将实现incrementToken方法。</p>\n</li>\n<li><p>最终将程序中加入plugin-descriptor.properties组价描述文件，打包放入plugin文件中即可。</p>\n</li>\n</ol>\n<h2 id=\"我们的实践\"><a href=\"#我们的实践\" class=\"headerlink\" title=\"我们的实践\"></a>我们的实践</h2><h3 id=\"ScriptPlugin\"><a href=\"#ScriptPlugin\" class=\"headerlink\" title=\"ScriptPlugin\"></a>ScriptPlugin</h3><p><strong>现状</strong><br>容错在搜索中十分常见,但我们经过对搜索无结果日志分析发现对于有很大一部分错误都发生在拼音相同但字写错的了情况。</p>\n<p><strong>无结果日志</strong></p>\n<figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">事件\t          总数\t  平均\t  20190624\t20190625\t20190626 </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">A-&gt;总次数,马徐俊\t8\t    1.1429\t    0\t      0\t           0</span></pre></td></tr></table></figure>\n\n<p><strong>搜索词日志</strong></p>\n<figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">搜索关键词    搜索次数     搜索人数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">逻辑思维       168          137</span></pre></td></tr></table></figure>\n\n<h4 id=\"问题及解决\"><a href=\"#问题及解决\" class=\"headerlink\" title=\"问题及解决\"></a>问题及解决</h4><p>所以我们希望能够实现拼音级别的容错,然后又不希望字错的字太多，就使用如下DSL</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"hljs-attr\">\"query\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"bool\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"filter\"</span>:[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"multi_match\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"query\"</span>:<span class=\"hljs-string\">\"&#123;&#123;.Query&#125;&#125;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"analyzer\"</span>:<span class=\"hljs-string\">\"standard\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"fields\"</span>:[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-string\">\"title.standard\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-string\">\"author.standard\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">              ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"minimum_should_match\"</span>:<span class=\"hljs-string\">\"50%\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"bool\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"should\"</span>:[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"match_phrase\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"author.pinyin\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">                          <span class=\"hljs-attr\">\"query\"</span>:<span class=\"hljs-string\">\"&#123;&#123;.Query&#125;&#125;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">                          <span class=\"hljs-attr\">\"analyzer\"</span>:<span class=\"hljs-string\">\"pinyin\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"match_phrase\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"title.pinyin\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">                          <span class=\"hljs-attr\">\"query\"</span>:<span class=\"hljs-string\">\"&#123;&#123;.Query&#125;&#125;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">                          <span class=\"hljs-attr\">\"analyzer\"</span>:<span class=\"hljs-string\">\"pinyin\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">            ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>但如此便存在一个问题,其匹配到了_dujia_的拼音，又匹配到了其中一半的字<em>家</em>，所以其能被命中返回，如下所示</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg4NDI2.png\" alt=\"badcase\"> </p>\n<p>所以我们新增了一个组件用以限制查询词的长度,太短的词不应进行容错，而且在词变长就不会出现上述问题。其继承自ScriptPlugin，并且实现了自定义的打分逻辑，如果限制的查询语句超过少于限制的长度则直接返回-1分,否则根据配置返回固定的分或者ES打出的分。</p>\n<p>主要代码逻辑</p>\n<figure class=\"highlight java hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SearchScript <span class=\"hljs-title\">newInstance</span><span class=\"hljs-params\">(LeafReaderContext context)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SearchScript(p, lookup, context) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">runAsDouble</span><span class=\"hljs-params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span>(query.length()&lt;length)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>d;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> Integer.MIN_VALUE==constant_score?getScore():constant_score;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 新增语句</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"script_score\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"script\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"source\"</span>: <span class=\"hljs-string\">\"limit_query\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"lang\"</span>: <span class=\"hljs-string\">\"limit_query_length\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"params\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"query\"</span>: <span class=\"hljs-string\">\"&#123;&#123;.Query&#125;&#125;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"length\"</span>: <span class=\"hljs-string\">\"3\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"constant_score\"</span>: <span class=\"hljs-string\">\"1\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>其实这里我们可以做的更多</p>\n<ul>\n<li>在lookup中我们可以拿到每个doc的_source字段</li>\n<li>在context中我们可以拿到全局的mapping,setting等信息</li>\n<li>在score中可以拿到本来的分数</li>\n</ul>\n<h3 id=\"SearchPlugin\"><a href=\"#SearchPlugin\" class=\"headerlink\" title=\"SearchPlugin\"></a>SearchPlugin</h3><h4 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h4><p>  我们在实现长句搜索的时候可以使用 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/6.3/query-dsl-mlt-query.html\" target=\"_blank\" rel=\"noopener\">more-like-this</a>,其原理大体就是将like的语句进行分词后然后依照BM25 选出在该字段中得分最高的n个词语，然后将原本查询的长语句变成了多个重要词的查询。</p>\n<h4 id=\"问题及解决-1\"><a href=\"#问题及解决-1\" class=\"headerlink\" title=\"问题及解决\"></a>问题及解决</h4><p>从morelike中提取出来的词相距距离太长依旧可以召回，相信熟悉Es的同学都知道ES有match_phrase的语法，其中的slop可以限制词的距离，所以我们希望能够实现一个增加词距离的morelike语句，我们称其为more_like_this_phrase，要使es能够识别我们的组件实现SearchPlugin接口，并返回build的类和解析查询的方法就可以了。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class MoreLikeThisPharseSearchPlugin  extends Plugin implements SearchPlugin &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @Override</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    public List&lt;QuerySpec&lt;?&gt;&gt; getQueries() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        return singletonList(new QuerySpec&lt;&gt;(MoreLikeThisPharseQueryBuilder.NAME, MoreLikeThisPharseQueryBuilder::new, MoreLikeThisPharseQueryBuilder::fromXContent));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>由于我们是基于more_like_this进行的修改，所以主要修改的解析体和创建lucene query的逻辑</p>\n<ol>\n<li><p>解析方法 MoreLikeThisPharseQueryBuilder::fromXContent</p>\n<p>加入解析slop的方法，将slop存到MoreLikeThisPharseQuery对象中</p>\n</li>\n<li><p>创建lucene查询 createQuery</p>\n<p>more_like_this_phrase 在原基础上进行了修改,从多个term query抽取出最少需要匹配到的个数（如果minishouldmatch有配置则使用minishouldmatch的个数,只需匹配任意一个即可),将所抽出的m个  数的词中任意挑选 n个词进行match_phrase+slop的查询<br>原lucene 查询结构</p>\n</li>\n</ol>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg3OTQ3.png\" alt=\"lucene查询树\"> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>插件是解决复杂自定义打分排序逻辑的利器，后面我们会依赖插件实现更多的打分召回策略，为用户提供更好的搜索服务。</p>\n<p>[1]: <a href=\"https://www.elastic.co/guide/en/elasticsearch/plugins/current/index.html\" target=\"_blank\" rel=\"noopener\">ElasticSearch Plugins and Integrations</a><br>[2]: <a href=\"https://www.jianshu.com/p/3373695a2b76\" target=\"_blank\" rel=\"noopener\">Elasticsearch源码分析 Plugin组件加载</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>现在 ElasticSearch 大量应用在搜索领域，开发者可以通过其提供的多样的查询api达到希望的搜索效果，而且Elasticsearch版本也一直在不断迭代，以满足开发者的需要。但是，实际开发过程中，可能需要将搜索和自己的业务场景进行结合，来达到自定义的排序、搜索规则。Elasticsearch针对这种情况，提供了插件的功能，可以这么说，如果能够学会使用插件，那我们就有了自由扩充ELasticsearch功能的手段,对搜索的掌控力就能提升一个档次。</p>","more":"<h2 id=\"Es插件分类\"><a href=\"#Es插件分类\" class=\"headerlink\" title=\"Es插件分类\"></a>Es插件分类</h2><p><strong>插件</strong>作为ES的架构中的重要一环，ES为其开放了足够多的接口使开发者可以实现自定义的功能需求,其共支持下面十种插件，AnalysisPlugin，ScriptPlugin，SearchPlugin这三个常用插件我们在后面会更详细的讲解</p>\n<p><strong>1、AnalysisPlugin</strong><br>分析插件,用于开发者开发额外的分析功能来增强Elasticsearch自身分析功能的不足,medcl大佬的ik分词插件相信大家都用过.</p>\n<p><strong>2、ScriptPlugin</strong><br>脚本插件.会调用用户的脚本，其中主要是用在function_score查询中，使用自定义方法进行打分,我们熟知的painless脚本就是ScriptPlugin脚本</p>\n<p><strong>3、SearchPlugin</strong><br>查询插件,扩展Elasticsearch的查询功能,es 的search功能功能十分强大，有了SearchPlugin我们可以在search中增加更多查询方法，我们后续可能会在此基础上增加很多令人兴奋的查询。例如根据用户购买的书籍查询与用户相似的其他用户，例如结合模型对搜索词进行expanding。</p>\n<p><strong>4、ActionPlugi</strong><br>Restful API命令请求插件,如果Elasticsearch内置的命令如_all,cat,/cat/health等rest命令无法满足需求,开发者可以自己开发需要的rest命令，例如希望看到某个分词器的词表的命令。</p>\n<p><strong>5、ClusterPlugin</strong><br>集群管理插件,用于加强自定义对集群的管理功能，该插件可以用来扩展allocation机制，例如在进行分片选择的时候如果我们可能倾向于一些机器，</p>\n<p><strong>6、DiscoveryPlugin</strong><br>自定义发现插件，目前是使用zen协议来进行。</p>\n<p><strong>7、IngestPlugin</strong><br>预处理插件，在数据索引之前进行预处理，例如根据用户ip来增加地理信息的geoip Processor Plugin</p>\n<p><strong>8、MapperPlugin</strong><br>映射插件,加强ES的数据类型.比如增加一个attachment类型,里面可以放PDF或者WORD数据</p>\n<p><strong>9、NetworkPlugin</strong><br>网络传输插件插件,</p>\n<p><strong>10、RepositoryPlugin</strong><br>存储插件,提供快照和恢复</p>\n<h2 id=\"ES插件加载过程\"><a href=\"#ES插件加载过程\" class=\"headerlink\" title=\"ES插件加载过程\"></a>ES插件加载过程</h2><ul>\n<li>插件的加载时机是在节点启动创建的时候中会扫描Elasticsearch的安装目录下的plugins和module的插件列表，并通过PluginService进行解析插件。</li>\n<li>PluginFilter是用来识别plugin类别的一个方法，通过每个插件实现的接口将所有插件分类并分发给Elasticsearch不同的服务组件进行注册。</li>\n<li>在node不同的服务启动过程中会读取每个和自己相关的组件进行扩展，最终插件都会形成服务提供给集群使用（比如ScriptPlugin最终在ScriptService提供服务,SearchPlugin最终会在searchTransportService中提供服务）</li>\n</ul>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg3MjY4.png\" alt=\"插件加载过程\"></p>\n<p><strong>plugin-descriptor.properties</strong></p>\n<p>PluginService 加载插件的元信息会从该文件中进行读取，所有插件都需要这个文件，下面两个配置比较重要，如果es版本不一致会加载失败。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">name=$&#123;project.name&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">description=$&#123;project.description&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">version=$&#123;project.version&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">classname=$&#123;elasticsearch.plugin.classname&#125;  插件入口</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">java.version=<span class=\"number\">1.8</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.version=$&#123;elasticsearch.version&#125;   插件对应es版本</span></pre></td></tr></table></figure>\n\n<h2 id=\"Example-AnalysisPlugin\"><a href=\"#Example-AnalysisPlugin\" class=\"headerlink\" title=\"Example:AnalysisPlugin\"></a>Example:AnalysisPlugin</h2><p>这里我们就使用十分流行的ik分词来解释，<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\" target=\"_blank\" rel=\"noopener\">ik</a>是一款十分流行的中文分词器,其能支持粗细力度的中文分词，其就是一款基于AnalysisPlugin实现的插件</p>\n<h3 id=\"IK分词类图\"><a href=\"#IK分词类图\" class=\"headerlink\" title=\"IK分词类图\"></a>IK分词类图</h3><p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg5NDQy.png\" alt=\"Ik分词类图\"></p>\n<p>我们可以看到ik分词主要实现了接口中的getTokenizers()和getAnalyzers()，其调用流程如下：</p>\n<ol>\n<li>其在Node初始化时就会将pluginService的中的AnalysisPlugin插件加载到AnalysisModule中。</li>\n<li>在AnalysisModule中进行分词器和分词器的注册。</li>\n<li>在注册的过程其实就是将AnalysisIkPlugin的getTokenizers和getAnalyzers返回的分析器和分词器放入key是名称，value是工厂类的map中。</li>\n</ol>\n<p>我们这里只看分词器，实际上被注册到分词组中的是一个工厂类，其返回一个继承自Tokenizer的IK Tokenizer，这里最核心的就是<strong>incrementToken()</strong>,其会进行循环词语切分，最终将词语切分完毕，如果自定义分词器，此处就是决定分词的方法。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg4OTIw.png\" alt=\"时序图\"></p>\n<h3 id=\"自定义分词器步骤\"><a href=\"#自定义分词器步骤\" class=\"headerlink\" title=\"自定义分词器步骤\"></a>自定义分词器步骤</h3><p>如果我们要实现我们自己的分词器的话其实只要进行如下几步</p>\n<ol>\n<li><p>继承AnalysisPlugin接口和Plugin接口，实现其中获得工厂类的getTokenizers。</p>\n</li>\n<li><p>实现自定义分词的工厂类方法，其要继承自AbstractTokenizerFactory,实现create来返回自定义测分词类。</p>\n</li>\n<li><p>实现自定义分词类其继承自Lucene的Tokenizer抽象类，将实现incrementToken方法。</p>\n</li>\n<li><p>最终将程序中加入plugin-descriptor.properties组价描述文件，打包放入plugin文件中即可。</p>\n</li>\n</ol>\n<h2 id=\"我们的实践\"><a href=\"#我们的实践\" class=\"headerlink\" title=\"我们的实践\"></a>我们的实践</h2><h3 id=\"ScriptPlugin\"><a href=\"#ScriptPlugin\" class=\"headerlink\" title=\"ScriptPlugin\"></a>ScriptPlugin</h3><p><strong>现状</strong><br>容错在搜索中十分常见,但我们经过对搜索无结果日志分析发现对于有很大一部分错误都发生在拼音相同但字写错的了情况。</p>\n<p><strong>无结果日志</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">事件\t          总数\t  平均\t  20190624\t20190625\t20190626 </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">A-&gt;总次数,马徐俊\t8\t    1.1429\t    0\t      0\t           0</span></pre></td></tr></table></figure>\n\n<p><strong>搜索词日志</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">搜索关键词    搜索次数     搜索人数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">逻辑思维       168          137</span></pre></td></tr></table></figure>\n\n<h4 id=\"问题及解决\"><a href=\"#问题及解决\" class=\"headerlink\" title=\"问题及解决\"></a>问题及解决</h4><p>所以我们希望能够实现拼音级别的容错,然后又不希望字错的字太多，就使用如下DSL</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"query\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"bool\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"filter\"</span>:[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"multi_match\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"query\"</span>:<span class=\"string\">\"&#123;&#123;.Query&#125;&#125;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"analyzer\"</span>:<span class=\"string\">\"standard\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"fields\"</span>:[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"string\">\"title.standard\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"string\">\"author.standard\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">              ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"minimum_should_match\"</span>:<span class=\"string\">\"50%\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"bool\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"should\"</span>:[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"match_phrase\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"author.pinyin\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">                          <span class=\"attr\">\"query\"</span>:<span class=\"string\">\"&#123;&#123;.Query&#125;&#125;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">                          <span class=\"attr\">\"analyzer\"</span>:<span class=\"string\">\"pinyin\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"match_phrase\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"title.pinyin\"</span>:&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">                          <span class=\"attr\">\"query\"</span>:<span class=\"string\">\"&#123;&#123;.Query&#125;&#125;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">                          <span class=\"attr\">\"analyzer\"</span>:<span class=\"string\">\"pinyin\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">            ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>但如此便存在一个问题,其匹配到了_dujia_的拼音，又匹配到了其中一半的字<em>家</em>，所以其能被命中返回，如下所示</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg4NDI2.png\" alt=\"badcase\"> </p>\n<p>所以我们新增了一个组件用以限制查询词的长度,太短的词不应进行容错，而且在词变长就不会出现上述问题。其继承自ScriptPlugin，并且实现了自定义的打分逻辑，如果限制的查询语句超过少于限制的长度则直接返回-1分,否则根据配置返回固定的分或者ES打出的分。</p>\n<p>主要代码逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SearchScript <span class=\"title\">newInstance</span><span class=\"params\">(LeafReaderContext context)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SearchScript(p, lookup, context) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">runAsDouble</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span>(query.length()&lt;length)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"keyword\">return</span> -<span class=\"number\">1</span>d;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> Integer.MIN_VALUE==constant_score?getScore():constant_score;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新增语句</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"script_score\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"script\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"source\"</span>: <span class=\"string\">\"limit_query\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"lang\"</span>: <span class=\"string\">\"limit_query_length\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"params\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"query\"</span>: <span class=\"string\">\"&#123;&#123;.Query&#125;&#125;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"length\"</span>: <span class=\"string\">\"3\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"constant_score\"</span>: <span class=\"string\">\"1\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>其实这里我们可以做的更多</p>\n<ul>\n<li>在lookup中我们可以拿到每个doc的_source字段</li>\n<li>在context中我们可以拿到全局的mapping,setting等信息</li>\n<li>在score中可以拿到本来的分数</li>\n</ul>\n<h3 id=\"SearchPlugin\"><a href=\"#SearchPlugin\" class=\"headerlink\" title=\"SearchPlugin\"></a>SearchPlugin</h3><h4 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h4><p>  我们在实现长句搜索的时候可以使用 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/6.3/query-dsl-mlt-query.html\" target=\"_blank\" rel=\"noopener\">more-like-this</a>,其原理大体就是将like的语句进行分词后然后依照BM25 选出在该字段中得分最高的n个词语，然后将原本查询的长语句变成了多个重要词的查询。</p>\n<h4 id=\"问题及解决-1\"><a href=\"#问题及解决-1\" class=\"headerlink\" title=\"问题及解决\"></a>问题及解决</h4><p>从morelike中提取出来的词相距距离太长依旧可以召回，相信熟悉Es的同学都知道ES有match_phrase的语法，其中的slop可以限制词的距离，所以我们希望能够实现一个增加词距离的morelike语句，我们称其为more_like_this_phrase，要使es能够识别我们的组件实现SearchPlugin接口，并返回build的类和解析查询的方法就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class MoreLikeThisPharseSearchPlugin  extends Plugin implements SearchPlugin &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @Override</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    public List&lt;QuerySpec&lt;?&gt;&gt; getQueries() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        return singletonList(new QuerySpec&lt;&gt;(MoreLikeThisPharseQueryBuilder.NAME, MoreLikeThisPharseQueryBuilder::new, MoreLikeThisPharseQueryBuilder::fromXContent));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>由于我们是基于more_like_this进行的修改，所以主要修改的解析体和创建lucene query的逻辑</p>\n<ol>\n<li><p>解析方法 MoreLikeThisPharseQueryBuilder::fromXContent</p>\n<p>加入解析slop的方法，将slop存到MoreLikeThisPharseQuery对象中</p>\n</li>\n<li><p>创建lucene查询 createQuery</p>\n<p>more_like_this_phrase 在原基础上进行了修改,从多个term query抽取出最少需要匹配到的个数（如果minishouldmatch有配置则使用minishouldmatch的个数,只需匹配任意一个即可),将所抽出的m个  数的词中任意挑选 n个词进行match_phrase+slop的查询<br>原lucene 查询结构</p>\n</li>\n</ol>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2NTU5Njg3OTQ3.png\" alt=\"lucene查询树\"> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>插件是解决复杂自定义打分排序逻辑的利器，后面我们会依赖插件实现更多的打分召回策略，为用户提供更好的搜索服务。</p>\n<p>[1]: <a href=\"https://www.elastic.co/guide/en/elasticsearch/plugins/current/index.html\" target=\"_blank\" rel=\"noopener\">ElasticSearch Plugins and Integrations</a><br>[2]: <a href=\"https://www.jianshu.com/p/3373695a2b76\" target=\"_blank\" rel=\"noopener\">Elasticsearch源码分析 Plugin组件加载</a></p>"},{"title":"Chrome扩展开发科普","date":"2019-08-19T16:00:00.000Z","author":"sunguoqiang","toc":true,"thumbnail":"https://piccdn.luojilab.com/fe-oss/default/MTU2ODYzMjYxNjU1.png","_content":"\n## chrome 扩展是什么\nchrome 扩展是用传统的 HTML、CSS、JS、图片等静态资源开发并最终打包成后缀为 `.crx` 的一个压缩包。所以，它和我们平常开发的页面没有多大的区别，所以如果你想引入前端开发所用的各种框架，组件库，构建工具也都是可以的。主要区别只有 2 个:\n\n1. 扩展的页面、js 和普通的页面运行位置不同\n2. 扩展可以调用 chrome 提供的更多的 API 来增强我们扩展的能力\n\n<!-- more -->\n\n## chrome 扩展的安装方式\n扩展的安装方式有 3 种：\n1. 通过 chrome 扩展商店，下载安装\n2. 在其他网站下载打包好的 `.crx` 压缩包，把压缩包直接拖拽到 chrome 的扩展管理页面\n3. 如果是自己开发的扩展，可以在扩展管理页面，打开开发者模式，手动加载已解压的扩展程序，进行本地调试\n\n![install.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTg3.png)\n\n## chrome 扩展的展现形式\n这里只简单地介绍几种经常见到的，还有更多的展现形式，大家感兴趣可以去官方文档详细了解\n1. 点击地址栏右侧 icon 会有页面弹出，这个大多数扩展都会有，主要是扩展的设置或者功能的入口\n2. 页面修饰内容：通过添加 DOM 对页面赋予新功能，比如 `Octotree` (对 gitub 项目页面做导航)\n3. 页面右键菜单：定制在页面内右键弹出的菜单，很多划线翻译的扩展都利用了这个功能\n4. 覆盖 chrome 默认页面： chrome 有的页面支持开发者自定义，比如 Momentum 就覆盖了默认的 New Tab 页面\n5. devtool 工具：这个是开发者经常用到的 比如 `vue-devtool` 等框架提供的调试工具\n\n## 开发介绍\n具体扩展各个组成部分的学习，我们以一个很简单的例子为基础进行介绍，这个扩展是一个为页面添加回到顶部功能的扩展。\n\n### 配置文件\n每一个扩展都必须要有的一个名字为 manifest.json 的配置文件，这个文件声明了此扩展用到了哪些功能，及各个功能需要用到的静态资源\n\n![manifest1.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTY5.png)\n\n![manifest2.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTQy.png)\n\n这个 backToTop 扩展的配置已经在途中说明，已经有了基本的说明，下面对一些配置项做下额外的说明,全部配置可以在[官网](https://developer.chrome.com/extensions/manifest)查看:\n1. browser_action 指定了 popup 页面相关的 icon、html、tooltip 文字等配置，相似的还有一个 page_action，它的配置参数和 browser_aciton 是相同的 但是它可以通过 `chrome.pageAction` API 来动态的设置扩展在某些页面的行为\n2. icons 配置不用每个尺寸都给出，chrome 会自己选出效果最合适的 icon\n3. permissions 声明扩展需要用到的 chrome 特性\n\n## 常用 API\n1. chrome.runtime\n2. chrome.tabs 对标签页进行操作、与对应标签页内容通讯\n3. chrome.storage 扩展的存储，类似 localstorage\n4. chrome.contextMenus\n5. chrome.extension\n\n## 核心 JS\n这部分我们说下扩展开发核心的几种 JS\n\n### popup\npopup 页面生命周期是点击弹出时，初始化，关闭时，页面也跟着销毁, 并且这个页面没有任何跨域的限制。它在我们扩展里的作用是配置页面里 backToTop icon 的样式，并存入storage。\n\n![popup.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTI5.png)\n\n``` javascript\nchrome.storage.local.get(['right', 'bottom', 'icon'], function(result) {\n  if(result) {\n    // 初始化\n    right.value = result.right || '';\n    bottom.value = result.bottom || '';\n    if(result.icon) {\n      img.src = result.icon;\n      img.dataset.uploaded = true;\n    }\n  }\n})\n```\n\n页面初始化时，从 storage 取出存储的值，初始化页面。\n保存参数时，再将相关参数存入 storage\n\n``` javascript\nchrome.storage.local.set({right: rightVal, bottom: bottomVal});\n  if(img.dataset.uploaded) {\n    chrome.storage.local.set({icon: img.src});\n  }\n```\n注: storage API 有 2 种 `storage.sync` 和 `storage.local` 他们的区别\n\n1. sync 会将存储的数据定时发到 chrome 的服务器，进行数据的同步，local 就只是将数据存储在本地\n2. 尺寸的不同：local 和 `localstorage` 是一样的 5M. 而 sync 存储的大小只有 100K 而且对于单个 key 的值大小，以及写入的频率也有限制，毕竟要同步服务端，所以如果开发的扩展只是用于个人使用的效率提升，不打算发布，可以直接用 local 就好了\n\n### content-script\n`content-script` 是我们用来定制化页面，实现页面内扩展逻辑的地方。它的特点是：\n1. 因为在页面内，当然可以访问 DOM 但是和页面的 js 是完全独立的，不能互相访问\n2. 无法对页面内的 DOM 事件绑定 扩展里的回调，这种情况可以通过 `content-script` 创建一个 script 标签插入到 DOM 里 这个新的 script 里的函数是可以绑定的\n3. 因为在页面里运行，所以是会收到跨域限制滴\n4. 运行时机是随着页面的加载而运行，页面关闭也就卸载了，所以说 `content-script` 会在每一个 tab 页面里都有一份代码在运行\n5. 因为在页面初始化才会运行，所以在初始加载插件时，需要刷新页面，`content-script ` 才会开始运行。\n6. 注入页面的 css 优先级非常高，一定要注意好类名 ID 名的设置\n\n那我们的 backToTop 里 `content-script` 都干了什么呢\n首先，初始化我们页面里的 icon 并根据页面 `scrollTop` 判断当前是否需要展示 icon\n\n``` javascript\nconst el = document.createElement('div');\nel.show = true; // 控制icon是否显示\nel.classList.add('ce-btt-container');\n\n\nel.style.opacity = target.scrollTop > visibleHeight ? 1 : 0;\n\nconst img = document.createElement('img');\nimg.classList.add('ce-btt-icon');\n\nel.appendChild(img);\n\n\nchrome.storage.local.get(['right', 'bottom', 'icon'], function(result) {\n  el.style.right = result && result.right ? result.right + 'px' : right;\n  el.style.bottom = result && result.bottom ?  result.bottom + 'px' : bottom;\n  img.src = result && result.icon ? result.icon : chrome.runtime.getURL('icons/backToTop.png');\n  document.body.appendChild(el);\n});\n```\n\n第二步， 要想实现返回顶部，当然要给我们的 icon 绑定点击事件，以及监听 `scroll` 事件判断什么时候该隐藏展示\n\n``` javascript\nel.addEventListener('click', function(e) {\n  let step = 20;\n  let timer = setInterval(() => {\n    if(target.scrollTop <= 0) {\n      clearInterval(timer);\n    } else {\n      step += 20;\n      target.scrollTop -= step;\n    }\n  }, 20);\n});\n\nconst handleScroll = function() {\n  if(!el.show) return false;  // icon不显示时，不处理\n  if(target.scrollTop > visibleHeight) {\n    el.style.opacity = 1;\n  } else {\n    el.style.opacity = 0;\n  }\n};\n\ncontainer.addEventListener('scroll', throttle(handleScroll, 300));\n```\n\n第三步， 如果 popup 页面有配置的变更， `content-script` 都需要立刻进行更新\n\n```javascript\nchrome.storage.onChanged.addListener(function(changes, namespace) {\n  if(changes.bottom) {\n    el.style.bottom = `${changes.bottom.newValue}px`;\n  }\n  if (changes.right) {\n    el.style.right = `${changes.right.newValue}px`;\n  }\n  if (changes.icon) {\n    img.src = changes.icon.newValue;\n  }\n});\n```\n注: 这里需要注意的是，因为我们要把扩展里的 icon 插入到页面，所以需要在 `manifest.json` 里配置 `web_accessible_resources` 赋予页面可以访问我们指定的扩展静态资源的权限。这是因为页面里 icon 的 src 属性是这样的\n\n![resource.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NDg4.png)\n\n### background\n`background` 可以理解为是扩展在后台一直运行的一个 JS(实际并不是)， 它在整个浏览器里只会有一个 js 在运行。在 background 的配置里，有一个 `persistent` 的配置, 当它为 true 时，background 才会一直运行，false 时，浏览器会检测长时间不活动时，自动卸载调，只有监听的事件发生时，才会重新执行，官方的说明是\n> The only occasion to keep a background script persistently active is if the extension uses chrome.webRequest API to block or modify network requests. The webRequest API is incompatible with non-persistent background pages.\n\n所以绝大多数时候，我们把它设为 false 就可以了。另外 `background` 也是可以跨域的，\n所以我们可以总结出，除了页面内的 js chrome 对其他的 js 都没有跨域的限制。\n\n好，我们看看我们扩展里 `background` 干了啥\n\n首先，初始时，肯定要监听浏览器的初始化事件，才可以绑定扩展关注的事件。\n\n``` javascript\nchrome.runtime.onInstalled.addEventListener(function() {\n  // init extention\n})\n```\n\n第二步，因为有的页面已经提供了返回顶部的功能，所以这个时候我们需要提供可以把我们的 icon 永久隐藏的功能，我们在 `background` 初始化的逻辑中，创建一个鼠标右键的菜单项，这个菜单项可以实现 切换我们的 icon 显示状态的功能\n\n``` javascript\nchrome.contextMenus.create({\n    title: 'toggle',\n    id: 'toggle'\n  });\n\nchrome.contextMenus.onClicked.addListener(function() {\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    sendMsg(tabs.length ? tabs[0].id : null);\n  });\n});\n\nfunction sendMsg(tabId) {\n  chrome.tabs.sendMessage(tabId, 'toggle', function(res) {\n    console.log(res);\n  });\n}\n```\n发送消息这里我们用了 `chrome.tabs` API 因为我们每个 tab 都会有一个 `content-script` 所以需要筛选出当前所在的标签页，然后发送消息。\n\n最后，我们的 `content-script` 需要监听发送消息的事件，并切换 icon 的状态\n```javascript\nchrome.runtime.onMessage.addListener(function(req, sender, respond) {\n  if(req === 'toggle') {\n    if (target.scrollTop > visibleHeight) {\n      el.style.opacity = el.style.opacity === '1' ? 0 : 1;\n    }\n    el.show = !el.show;\n    respond('toggle success');\n  }\n});\n```\n至此，整个扩展的功能就基本介绍完了，过程中用到的 API 这里并不作详细的介绍，详细使用还是需要大家去 [官网](https://developer.chrome.com/apps/api_index) 查看\n### 调试\n最后说一下如何调试，调试个人认为还是比较麻烦的， 代码变更并没有热更新，所以需要我们手动去扩展管理页重新加载。而且几种不同的 JS 调试的位置也不同，设计通讯时经常需要在几个不同的地方来回切换\n\n`popup` 调试：在弹出的窗口里，右键审查元素就可以弹出调试窗口，调试方式和普通的页面调试没有区别。\n\n`background` 调试: 在管理页点击背景页，就可以弹出调试窗口了\n\n![bg-dev.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU0OTQx.png)\n\n`content-script` 调试: 因为是在页面运行，所以调试的地方和页面 js 是在一个窗口里\n\n代码位置：在 sources tab 下选中 Content scripts 就可以看到页面加载的全部的扩展 `contnt-script` 了。\n\n![cs-code.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NjE5.png)\n\nconsole 输出: 在 Console tab 下拉框里选中要调试的扩展，就可以看到对应扩展的 console 输出。\n\n![cs-console.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NjAy.png)\n\n## 打包发布\n在扩展管理页，可以打包扩展程序,打包后就可以生成 `.crx` 文件\n\n![bundle.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU0OTE4.png)\n\n打包之后，就可以发布了，不过发布需要先花 5$ 注册开发者，我就没有继续下去了。\n\n## 总结\n在开发过程中，可以发现写一个扩展其实并不难，用到的技术都是前端每天都在用的东西。只要我们多加留心，就会发现使用 chrome 过程中有许多可以提效，优化体验的地方，这时候我们就可以试着用扩展的方式解决。总体来说，chrome 扩展是一种技术成本很低，就可以干些有趣的事情的技术\n\n参考资料：\n\n[官方文档](https://developer.chrome.com/extensions)\n\n[Chrom插件开发全攻略](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)","source":"_posts/FE/chrome.md","raw":"title: Chrome扩展开发科普\ndate: 2019-08-20\nauthor: sunguoqiang\ntoc: true\nthumbnail: https://piccdn.luojilab.com/fe-oss/default/MTU2ODYzMjYxNjU1.png\ntag: \n  - 前端\ncategories: \n  - 前端\n\n---\n\n## chrome 扩展是什么\nchrome 扩展是用传统的 HTML、CSS、JS、图片等静态资源开发并最终打包成后缀为 `.crx` 的一个压缩包。所以，它和我们平常开发的页面没有多大的区别，所以如果你想引入前端开发所用的各种框架，组件库，构建工具也都是可以的。主要区别只有 2 个:\n\n1. 扩展的页面、js 和普通的页面运行位置不同\n2. 扩展可以调用 chrome 提供的更多的 API 来增强我们扩展的能力\n\n<!-- more -->\n\n## chrome 扩展的安装方式\n扩展的安装方式有 3 种：\n1. 通过 chrome 扩展商店，下载安装\n2. 在其他网站下载打包好的 `.crx` 压缩包，把压缩包直接拖拽到 chrome 的扩展管理页面\n3. 如果是自己开发的扩展，可以在扩展管理页面，打开开发者模式，手动加载已解压的扩展程序，进行本地调试\n\n![install.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTg3.png)\n\n## chrome 扩展的展现形式\n这里只简单地介绍几种经常见到的，还有更多的展现形式，大家感兴趣可以去官方文档详细了解\n1. 点击地址栏右侧 icon 会有页面弹出，这个大多数扩展都会有，主要是扩展的设置或者功能的入口\n2. 页面修饰内容：通过添加 DOM 对页面赋予新功能，比如 `Octotree` (对 gitub 项目页面做导航)\n3. 页面右键菜单：定制在页面内右键弹出的菜单，很多划线翻译的扩展都利用了这个功能\n4. 覆盖 chrome 默认页面： chrome 有的页面支持开发者自定义，比如 Momentum 就覆盖了默认的 New Tab 页面\n5. devtool 工具：这个是开发者经常用到的 比如 `vue-devtool` 等框架提供的调试工具\n\n## 开发介绍\n具体扩展各个组成部分的学习，我们以一个很简单的例子为基础进行介绍，这个扩展是一个为页面添加回到顶部功能的扩展。\n\n### 配置文件\n每一个扩展都必须要有的一个名字为 manifest.json 的配置文件，这个文件声明了此扩展用到了哪些功能，及各个功能需要用到的静态资源\n\n![manifest1.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTY5.png)\n\n![manifest2.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTQy.png)\n\n这个 backToTop 扩展的配置已经在途中说明，已经有了基本的说明，下面对一些配置项做下额外的说明,全部配置可以在[官网](https://developer.chrome.com/extensions/manifest)查看:\n1. browser_action 指定了 popup 页面相关的 icon、html、tooltip 文字等配置，相似的还有一个 page_action，它的配置参数和 browser_aciton 是相同的 但是它可以通过 `chrome.pageAction` API 来动态的设置扩展在某些页面的行为\n2. icons 配置不用每个尺寸都给出，chrome 会自己选出效果最合适的 icon\n3. permissions 声明扩展需要用到的 chrome 特性\n\n## 常用 API\n1. chrome.runtime\n2. chrome.tabs 对标签页进行操作、与对应标签页内容通讯\n3. chrome.storage 扩展的存储，类似 localstorage\n4. chrome.contextMenus\n5. chrome.extension\n\n## 核心 JS\n这部分我们说下扩展开发核心的几种 JS\n\n### popup\npopup 页面生命周期是点击弹出时，初始化，关闭时，页面也跟着销毁, 并且这个页面没有任何跨域的限制。它在我们扩展里的作用是配置页面里 backToTop icon 的样式，并存入storage。\n\n![popup.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTI5.png)\n\n``` javascript\nchrome.storage.local.get(['right', 'bottom', 'icon'], function(result) {\n  if(result) {\n    // 初始化\n    right.value = result.right || '';\n    bottom.value = result.bottom || '';\n    if(result.icon) {\n      img.src = result.icon;\n      img.dataset.uploaded = true;\n    }\n  }\n})\n```\n\n页面初始化时，从 storage 取出存储的值，初始化页面。\n保存参数时，再将相关参数存入 storage\n\n``` javascript\nchrome.storage.local.set({right: rightVal, bottom: bottomVal});\n  if(img.dataset.uploaded) {\n    chrome.storage.local.set({icon: img.src});\n  }\n```\n注: storage API 有 2 种 `storage.sync` 和 `storage.local` 他们的区别\n\n1. sync 会将存储的数据定时发到 chrome 的服务器，进行数据的同步，local 就只是将数据存储在本地\n2. 尺寸的不同：local 和 `localstorage` 是一样的 5M. 而 sync 存储的大小只有 100K 而且对于单个 key 的值大小，以及写入的频率也有限制，毕竟要同步服务端，所以如果开发的扩展只是用于个人使用的效率提升，不打算发布，可以直接用 local 就好了\n\n### content-script\n`content-script` 是我们用来定制化页面，实现页面内扩展逻辑的地方。它的特点是：\n1. 因为在页面内，当然可以访问 DOM 但是和页面的 js 是完全独立的，不能互相访问\n2. 无法对页面内的 DOM 事件绑定 扩展里的回调，这种情况可以通过 `content-script` 创建一个 script 标签插入到 DOM 里 这个新的 script 里的函数是可以绑定的\n3. 因为在页面里运行，所以是会收到跨域限制滴\n4. 运行时机是随着页面的加载而运行，页面关闭也就卸载了，所以说 `content-script` 会在每一个 tab 页面里都有一份代码在运行\n5. 因为在页面初始化才会运行，所以在初始加载插件时，需要刷新页面，`content-script ` 才会开始运行。\n6. 注入页面的 css 优先级非常高，一定要注意好类名 ID 名的设置\n\n那我们的 backToTop 里 `content-script` 都干了什么呢\n首先，初始化我们页面里的 icon 并根据页面 `scrollTop` 判断当前是否需要展示 icon\n\n``` javascript\nconst el = document.createElement('div');\nel.show = true; // 控制icon是否显示\nel.classList.add('ce-btt-container');\n\n\nel.style.opacity = target.scrollTop > visibleHeight ? 1 : 0;\n\nconst img = document.createElement('img');\nimg.classList.add('ce-btt-icon');\n\nel.appendChild(img);\n\n\nchrome.storage.local.get(['right', 'bottom', 'icon'], function(result) {\n  el.style.right = result && result.right ? result.right + 'px' : right;\n  el.style.bottom = result && result.bottom ?  result.bottom + 'px' : bottom;\n  img.src = result && result.icon ? result.icon : chrome.runtime.getURL('icons/backToTop.png');\n  document.body.appendChild(el);\n});\n```\n\n第二步， 要想实现返回顶部，当然要给我们的 icon 绑定点击事件，以及监听 `scroll` 事件判断什么时候该隐藏展示\n\n``` javascript\nel.addEventListener('click', function(e) {\n  let step = 20;\n  let timer = setInterval(() => {\n    if(target.scrollTop <= 0) {\n      clearInterval(timer);\n    } else {\n      step += 20;\n      target.scrollTop -= step;\n    }\n  }, 20);\n});\n\nconst handleScroll = function() {\n  if(!el.show) return false;  // icon不显示时，不处理\n  if(target.scrollTop > visibleHeight) {\n    el.style.opacity = 1;\n  } else {\n    el.style.opacity = 0;\n  }\n};\n\ncontainer.addEventListener('scroll', throttle(handleScroll, 300));\n```\n\n第三步， 如果 popup 页面有配置的变更， `content-script` 都需要立刻进行更新\n\n```javascript\nchrome.storage.onChanged.addListener(function(changes, namespace) {\n  if(changes.bottom) {\n    el.style.bottom = `${changes.bottom.newValue}px`;\n  }\n  if (changes.right) {\n    el.style.right = `${changes.right.newValue}px`;\n  }\n  if (changes.icon) {\n    img.src = changes.icon.newValue;\n  }\n});\n```\n注: 这里需要注意的是，因为我们要把扩展里的 icon 插入到页面，所以需要在 `manifest.json` 里配置 `web_accessible_resources` 赋予页面可以访问我们指定的扩展静态资源的权限。这是因为页面里 icon 的 src 属性是这样的\n\n![resource.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NDg4.png)\n\n### background\n`background` 可以理解为是扩展在后台一直运行的一个 JS(实际并不是)， 它在整个浏览器里只会有一个 js 在运行。在 background 的配置里，有一个 `persistent` 的配置, 当它为 true 时，background 才会一直运行，false 时，浏览器会检测长时间不活动时，自动卸载调，只有监听的事件发生时，才会重新执行，官方的说明是\n> The only occasion to keep a background script persistently active is if the extension uses chrome.webRequest API to block or modify network requests. The webRequest API is incompatible with non-persistent background pages.\n\n所以绝大多数时候，我们把它设为 false 就可以了。另外 `background` 也是可以跨域的，\n所以我们可以总结出，除了页面内的 js chrome 对其他的 js 都没有跨域的限制。\n\n好，我们看看我们扩展里 `background` 干了啥\n\n首先，初始时，肯定要监听浏览器的初始化事件，才可以绑定扩展关注的事件。\n\n``` javascript\nchrome.runtime.onInstalled.addEventListener(function() {\n  // init extention\n})\n```\n\n第二步，因为有的页面已经提供了返回顶部的功能，所以这个时候我们需要提供可以把我们的 icon 永久隐藏的功能，我们在 `background` 初始化的逻辑中，创建一个鼠标右键的菜单项，这个菜单项可以实现 切换我们的 icon 显示状态的功能\n\n``` javascript\nchrome.contextMenus.create({\n    title: 'toggle',\n    id: 'toggle'\n  });\n\nchrome.contextMenus.onClicked.addListener(function() {\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    sendMsg(tabs.length ? tabs[0].id : null);\n  });\n});\n\nfunction sendMsg(tabId) {\n  chrome.tabs.sendMessage(tabId, 'toggle', function(res) {\n    console.log(res);\n  });\n}\n```\n发送消息这里我们用了 `chrome.tabs` API 因为我们每个 tab 都会有一个 `content-script` 所以需要筛选出当前所在的标签页，然后发送消息。\n\n最后，我们的 `content-script` 需要监听发送消息的事件，并切换 icon 的状态\n```javascript\nchrome.runtime.onMessage.addListener(function(req, sender, respond) {\n  if(req === 'toggle') {\n    if (target.scrollTop > visibleHeight) {\n      el.style.opacity = el.style.opacity === '1' ? 0 : 1;\n    }\n    el.show = !el.show;\n    respond('toggle success');\n  }\n});\n```\n至此，整个扩展的功能就基本介绍完了，过程中用到的 API 这里并不作详细的介绍，详细使用还是需要大家去 [官网](https://developer.chrome.com/apps/api_index) 查看\n### 调试\n最后说一下如何调试，调试个人认为还是比较麻烦的， 代码变更并没有热更新，所以需要我们手动去扩展管理页重新加载。而且几种不同的 JS 调试的位置也不同，设计通讯时经常需要在几个不同的地方来回切换\n\n`popup` 调试：在弹出的窗口里，右键审查元素就可以弹出调试窗口，调试方式和普通的页面调试没有区别。\n\n`background` 调试: 在管理页点击背景页，就可以弹出调试窗口了\n\n![bg-dev.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU0OTQx.png)\n\n`content-script` 调试: 因为是在页面运行，所以调试的地方和页面 js 是在一个窗口里\n\n代码位置：在 sources tab 下选中 Content scripts 就可以看到页面加载的全部的扩展 `contnt-script` 了。\n\n![cs-code.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NjE5.png)\n\nconsole 输出: 在 Console tab 下拉框里选中要调试的扩展，就可以看到对应扩展的 console 输出。\n\n![cs-console.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NjAy.png)\n\n## 打包发布\n在扩展管理页，可以打包扩展程序,打包后就可以生成 `.crx` 文件\n\n![bundle.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU0OTE4.png)\n\n打包之后，就可以发布了，不过发布需要先花 5$ 注册开发者，我就没有继续下去了。\n\n## 总结\n在开发过程中，可以发现写一个扩展其实并不难，用到的技术都是前端每天都在用的东西。只要我们多加留心，就会发现使用 chrome 过程中有许多可以提效，优化体验的地方，这时候我们就可以试着用扩展的方式解决。总体来说，chrome 扩展是一种技术成本很低，就可以干些有趣的事情的技术\n\n参考资料：\n\n[官方文档](https://developer.chrome.com/extensions)\n\n[Chrom插件开发全攻略](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)","slug":"FE/chrome","published":1,"updated":"2019-12-05T11:52:26.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3so5k8w00014efy1s4o2h0u","content":"<h2 id=\"chrome-扩展是什么\"><a href=\"#chrome-扩展是什么\" class=\"headerlink\" title=\"chrome 扩展是什么\"></a>chrome 扩展是什么</h2><p>chrome 扩展是用传统的 HTML、CSS、JS、图片等静态资源开发并最终打包成后缀为 <code>.crx</code> 的一个压缩包。所以，它和我们平常开发的页面没有多大的区别，所以如果你想引入前端开发所用的各种框架，组件库，构建工具也都是可以的。主要区别只有 2 个:</p>\n<ol>\n<li>扩展的页面、js 和普通的页面运行位置不同</li>\n<li>扩展可以调用 chrome 提供的更多的 API 来增强我们扩展的能力</li>\n</ol>\n<a id=\"more\"></a>\n\n<h2 id=\"chrome-扩展的安装方式\"><a href=\"#chrome-扩展的安装方式\" class=\"headerlink\" title=\"chrome 扩展的安装方式\"></a>chrome 扩展的安装方式</h2><p>扩展的安装方式有 3 种：</p>\n<ol>\n<li>通过 chrome 扩展商店，下载安装</li>\n<li>在其他网站下载打包好的 <code>.crx</code> 压缩包，把压缩包直接拖拽到 chrome 的扩展管理页面</li>\n<li>如果是自己开发的扩展，可以在扩展管理页面，打开开发者模式，手动加载已解压的扩展程序，进行本地调试</li>\n</ol>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTg3.png\" alt=\"install.png\"></p>\n<h2 id=\"chrome-扩展的展现形式\"><a href=\"#chrome-扩展的展现形式\" class=\"headerlink\" title=\"chrome 扩展的展现形式\"></a>chrome 扩展的展现形式</h2><p>这里只简单地介绍几种经常见到的，还有更多的展现形式，大家感兴趣可以去官方文档详细了解</p>\n<ol>\n<li>点击地址栏右侧 icon 会有页面弹出，这个大多数扩展都会有，主要是扩展的设置或者功能的入口</li>\n<li>页面修饰内容：通过添加 DOM 对页面赋予新功能，比如 <code>Octotree</code> (对 gitub 项目页面做导航)</li>\n<li>页面右键菜单：定制在页面内右键弹出的菜单，很多划线翻译的扩展都利用了这个功能</li>\n<li>覆盖 chrome 默认页面： chrome 有的页面支持开发者自定义，比如 Momentum 就覆盖了默认的 New Tab 页面</li>\n<li>devtool 工具：这个是开发者经常用到的 比如 <code>vue-devtool</code> 等框架提供的调试工具</li>\n</ol>\n<h2 id=\"开发介绍\"><a href=\"#开发介绍\" class=\"headerlink\" title=\"开发介绍\"></a>开发介绍</h2><p>具体扩展各个组成部分的学习，我们以一个很简单的例子为基础进行介绍，这个扩展是一个为页面添加回到顶部功能的扩展。</p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>每一个扩展都必须要有的一个名字为 manifest.json 的配置文件，这个文件声明了此扩展用到了哪些功能，及各个功能需要用到的静态资源</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTY5.png\" alt=\"manifest1.png\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTQy.png\" alt=\"manifest2.png\"></p>\n<p>这个 backToTop 扩展的配置已经在途中说明，已经有了基本的说明，下面对一些配置项做下额外的说明,全部配置可以在<a href=\"https://developer.chrome.com/extensions/manifest\" target=\"_blank\" rel=\"noopener\">官网</a>查看:</p>\n<ol>\n<li>browser_action 指定了 popup 页面相关的 icon、html、tooltip 文字等配置，相似的还有一个 page_action，它的配置参数和 browser_aciton 是相同的 但是它可以通过 <code>chrome.pageAction</code> API 来动态的设置扩展在某些页面的行为</li>\n<li>icons 配置不用每个尺寸都给出，chrome 会自己选出效果最合适的 icon</li>\n<li>permissions 声明扩展需要用到的 chrome 特性</li>\n</ol>\n<h2 id=\"常用-API\"><a href=\"#常用-API\" class=\"headerlink\" title=\"常用 API\"></a>常用 API</h2><ol>\n<li>chrome.runtime</li>\n<li>chrome.tabs 对标签页进行操作、与对应标签页内容通讯</li>\n<li>chrome.storage 扩展的存储，类似 localstorage</li>\n<li>chrome.contextMenus</li>\n<li>chrome.extension</li>\n</ol>\n<h2 id=\"核心-JS\"><a href=\"#核心-JS\" class=\"headerlink\" title=\"核心 JS\"></a>核心 JS</h2><p>这部分我们说下扩展开发核心的几种 JS</p>\n<h3 id=\"popup\"><a href=\"#popup\" class=\"headerlink\" title=\"popup\"></a>popup</h3><p>popup 页面生命周期是点击弹出时，初始化，关闭时，页面也跟着销毁, 并且这个页面没有任何跨域的限制。它在我们扩展里的作用是配置页面里 backToTop icon 的样式，并存入storage。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTI5.png\" alt=\"popup.png\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.local.get([<span class=\"hljs-string\">'right'</span>, <span class=\"hljs-string\">'bottom'</span>, <span class=\"hljs-string\">'icon'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(result) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 初始化</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    right.value = result.right || <span class=\"hljs-string\">''</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    bottom.value = result.bottom || <span class=\"hljs-string\">''</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(result.icon) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      img.src = result.icon;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      img.dataset.uploaded = <span class=\"hljs-literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>页面初始化时，从 storage 取出存储的值，初始化页面。<br>保存参数时，再将相关参数存入 storage</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.local.set(&#123;<span class=\"hljs-attr\">right</span>: rightVal, <span class=\"hljs-attr\">bottom</span>: bottomVal&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(img.dataset.uploaded) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    chrome.storage.local.set(&#123;<span class=\"hljs-attr\">icon</span>: img.src&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr></table></figure>\n<p>注: storage API 有 2 种 <code>storage.sync</code> 和 <code>storage.local</code> 他们的区别</p>\n<ol>\n<li>sync 会将存储的数据定时发到 chrome 的服务器，进行数据的同步，local 就只是将数据存储在本地</li>\n<li>尺寸的不同：local 和 <code>localstorage</code> 是一样的 5M. 而 sync 存储的大小只有 100K 而且对于单个 key 的值大小，以及写入的频率也有限制，毕竟要同步服务端，所以如果开发的扩展只是用于个人使用的效率提升，不打算发布，可以直接用 local 就好了</li>\n</ol>\n<h3 id=\"content-script\"><a href=\"#content-script\" class=\"headerlink\" title=\"content-script\"></a>content-script</h3><p><code>content-script</code> 是我们用来定制化页面，实现页面内扩展逻辑的地方。它的特点是：</p>\n<ol>\n<li>因为在页面内，当然可以访问 DOM 但是和页面的 js 是完全独立的，不能互相访问</li>\n<li>无法对页面内的 DOM 事件绑定 扩展里的回调，这种情况可以通过 <code>content-script</code> 创建一个 script 标签插入到 DOM 里 这个新的 script 里的函数是可以绑定的</li>\n<li>因为在页面里运行，所以是会收到跨域限制滴</li>\n<li>运行时机是随着页面的加载而运行，页面关闭也就卸载了，所以说 <code>content-script</code> 会在每一个 tab 页面里都有一份代码在运行</li>\n<li>因为在页面初始化才会运行，所以在初始加载插件时，需要刷新页面，<code>content-script</code> 才会开始运行。</li>\n<li>注入页面的 css 优先级非常高，一定要注意好类名 ID 名的设置</li>\n</ol>\n<p>那我们的 backToTop 里 <code>content-script</code> 都干了什么呢<br>首先，初始化我们页面里的 icon 并根据页面 <code>scrollTop</code> 判断当前是否需要展示 icon</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.show = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 控制icon是否显示</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.classList.add(<span class=\"hljs-string\">'ce-btt-container'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.style.opacity = target.scrollTop &gt; visibleHeight ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> img = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'img'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">img.classList.add(<span class=\"hljs-string\">'ce-btt-icon'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.appendChild(img);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.local.get([<span class=\"hljs-string\">'right'</span>, <span class=\"hljs-string\">'bottom'</span>, <span class=\"hljs-string\">'icon'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  el.style.right = result &amp;&amp; result.right ? result.right + <span class=\"hljs-string\">'px'</span> : right;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  el.style.bottom = result &amp;&amp; result.bottom ?  result.bottom + <span class=\"hljs-string\">'px'</span> : bottom;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  img.src = result &amp;&amp; result.icon ? result.icon : chrome.runtime.getURL(<span class=\"hljs-string\">'icons/backToTop.png'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">document</span>.body.appendChild(el);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>第二步， 要想实现返回顶部，当然要给我们的 icon 绑定点击事件，以及监听 <code>scroll</code> 事件判断什么时候该隐藏展示</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> step = <span class=\"hljs-number\">20</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> timer = setInterval(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(target.scrollTop &lt;= <span class=\"hljs-number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      clearInterval(timer);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      step += <span class=\"hljs-number\">20</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      target.scrollTop -= step;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, <span class=\"hljs-number\">20</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> handleScroll = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(!el.show) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  <span class=\"hljs-comment\">// icon不显示时，不处理</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(target.scrollTop &gt; visibleHeight) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.style.opacity = <span class=\"hljs-number\">1</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.style.opacity = <span class=\"hljs-number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">container.addEventListener(<span class=\"hljs-string\">'scroll'</span>, throttle(handleScroll, <span class=\"hljs-number\">300</span>));</span></pre></td></tr></table></figure>\n\n<p>第三步， 如果 popup 页面有配置的变更， <code>content-script</code> 都需要立刻进行更新</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.onChanged.addListener(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">changes, namespace</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(changes.bottom) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.style.bottom = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;changes.bottom.newValue&#125;</span>px`</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (changes.right) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.style.right = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;changes.right.newValue&#125;</span>px`</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (changes.icon) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    img.src = changes.icon.newValue;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n<p>注: 这里需要注意的是，因为我们要把扩展里的 icon 插入到页面，所以需要在 <code>manifest.json</code> 里配置 <code>web_accessible_resources</code> 赋予页面可以访问我们指定的扩展静态资源的权限。这是因为页面里 icon 的 src 属性是这样的</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NDg4.png\" alt=\"resource.png\"></p>\n<h3 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h3><p><code>background</code> 可以理解为是扩展在后台一直运行的一个 JS(实际并不是)， 它在整个浏览器里只会有一个 js 在运行。在 background 的配置里，有一个 <code>persistent</code> 的配置, 当它为 true 时，background 才会一直运行，false 时，浏览器会检测长时间不活动时，自动卸载调，只有监听的事件发生时，才会重新执行，官方的说明是</p>\n<blockquote>\n<p>The only occasion to keep a background script persistently active is if the extension uses chrome.webRequest API to block or modify network requests. The webRequest API is incompatible with non-persistent background pages.</p>\n</blockquote>\n<p>所以绝大多数时候，我们把它设为 false 就可以了。另外 <code>background</code> 也是可以跨域的，<br>所以我们可以总结出，除了页面内的 js chrome 对其他的 js 都没有跨域的限制。</p>\n<p>好，我们看看我们扩展里 <code>background</code> 干了啥</p>\n<p>首先，初始时，肯定要监听浏览器的初始化事件，才可以绑定扩展关注的事件。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onInstalled.addEventListener(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// init extention</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>第二步，因为有的页面已经提供了返回顶部的功能，所以这个时候我们需要提供可以把我们的 icon 永久隐藏的功能，我们在 <code>background</code> 初始化的逻辑中，创建一个鼠标右键的菜单项，这个菜单项可以实现 切换我们的 icon 显示状态的功能</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.contextMenus.create(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    title: <span class=\"hljs-string\">'toggle'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    id: <span class=\"hljs-string\">'toggle'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.contextMenus.onClicked.addListener(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  chrome.tabs.query(&#123;<span class=\"hljs-attr\">active</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">currentWindow</span>: <span class=\"hljs-literal\">true</span>&#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tabs</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    sendMsg(tabs.length ? tabs[<span class=\"hljs-number\">0</span>].id : <span class=\"hljs-literal\">null</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sendMsg</span>(<span class=\"hljs-params\">tabId</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  chrome.tabs.sendMessage(tabId, <span class=\"hljs-string\">'toggle'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(res);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>发送消息这里我们用了 <code>chrome.tabs</code> API 因为我们每个 tab 都会有一个 <code>content-script</code> 所以需要筛选出当前所在的标签页，然后发送消息。</p>\n<p>最后，我们的 <code>content-script</code> 需要监听发送消息的事件，并切换 icon 的状态</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, sender, respond</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(req === <span class=\"hljs-string\">'toggle'</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (target.scrollTop &gt; visibleHeight) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      el.style.opacity = el.style.opacity === <span class=\"hljs-string\">'1'</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.show = !el.show;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    respond(<span class=\"hljs-string\">'toggle success'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n<p>至此，整个扩展的功能就基本介绍完了，过程中用到的 API 这里并不作详细的介绍，详细使用还是需要大家去 <a href=\"https://developer.chrome.com/apps/api_index\" target=\"_blank\" rel=\"noopener\">官网</a> 查看</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>最后说一下如何调试，调试个人认为还是比较麻烦的， 代码变更并没有热更新，所以需要我们手动去扩展管理页重新加载。而且几种不同的 JS 调试的位置也不同，设计通讯时经常需要在几个不同的地方来回切换</p>\n<p><code>popup</code> 调试：在弹出的窗口里，右键审查元素就可以弹出调试窗口，调试方式和普通的页面调试没有区别。</p>\n<p><code>background</code> 调试: 在管理页点击背景页，就可以弹出调试窗口了</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU0OTQx.png\" alt=\"bg-dev.png\"></p>\n<p><code>content-script</code> 调试: 因为是在页面运行，所以调试的地方和页面 js 是在一个窗口里</p>\n<p>代码位置：在 sources tab 下选中 Content scripts 就可以看到页面加载的全部的扩展 <code>contnt-script</code> 了。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NjE5.png\" alt=\"cs-code.png\"></p>\n<p>console 输出: 在 Console tab 下拉框里选中要调试的扩展，就可以看到对应扩展的 console 输出。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NjAy.png\" alt=\"cs-console.png\"></p>\n<h2 id=\"打包发布\"><a href=\"#打包发布\" class=\"headerlink\" title=\"打包发布\"></a>打包发布</h2><p>在扩展管理页，可以打包扩展程序,打包后就可以生成 <code>.crx</code> 文件</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU0OTE4.png\" alt=\"bundle.png\"></p>\n<p>打包之后，就可以发布了，不过发布需要先花 5$ 注册开发者，我就没有继续下去了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在开发过程中，可以发现写一个扩展其实并不难，用到的技术都是前端每天都在用的东西。只要我们多加留心，就会发现使用 chrome 过程中有许多可以提效，优化体验的地方，这时候我们就可以试着用扩展的方式解决。总体来说，chrome 扩展是一种技术成本很低，就可以干些有趣的事情的技术</p>\n<p>参考资料：</p>\n<p><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"noopener\">Chrom插件开发全攻略</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"chrome-扩展是什么\"><a href=\"#chrome-扩展是什么\" class=\"headerlink\" title=\"chrome 扩展是什么\"></a>chrome 扩展是什么</h2><p>chrome 扩展是用传统的 HTML、CSS、JS、图片等静态资源开发并最终打包成后缀为 <code>.crx</code> 的一个压缩包。所以，它和我们平常开发的页面没有多大的区别，所以如果你想引入前端开发所用的各种框架，组件库，构建工具也都是可以的。主要区别只有 2 个:</p>\n<ol>\n<li>扩展的页面、js 和普通的页面运行位置不同</li>\n<li>扩展可以调用 chrome 提供的更多的 API 来增强我们扩展的能力</li>\n</ol>","more":"<h2 id=\"chrome-扩展的安装方式\"><a href=\"#chrome-扩展的安装方式\" class=\"headerlink\" title=\"chrome 扩展的安装方式\"></a>chrome 扩展的安装方式</h2><p>扩展的安装方式有 3 种：</p>\n<ol>\n<li>通过 chrome 扩展商店，下载安装</li>\n<li>在其他网站下载打包好的 <code>.crx</code> 压缩包，把压缩包直接拖拽到 chrome 的扩展管理页面</li>\n<li>如果是自己开发的扩展，可以在扩展管理页面，打开开发者模式，手动加载已解压的扩展程序，进行本地调试</li>\n</ol>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTg3.png\" alt=\"install.png\"></p>\n<h2 id=\"chrome-扩展的展现形式\"><a href=\"#chrome-扩展的展现形式\" class=\"headerlink\" title=\"chrome 扩展的展现形式\"></a>chrome 扩展的展现形式</h2><p>这里只简单地介绍几种经常见到的，还有更多的展现形式，大家感兴趣可以去官方文档详细了解</p>\n<ol>\n<li>点击地址栏右侧 icon 会有页面弹出，这个大多数扩展都会有，主要是扩展的设置或者功能的入口</li>\n<li>页面修饰内容：通过添加 DOM 对页面赋予新功能，比如 <code>Octotree</code> (对 gitub 项目页面做导航)</li>\n<li>页面右键菜单：定制在页面内右键弹出的菜单，很多划线翻译的扩展都利用了这个功能</li>\n<li>覆盖 chrome 默认页面： chrome 有的页面支持开发者自定义，比如 Momentum 就覆盖了默认的 New Tab 页面</li>\n<li>devtool 工具：这个是开发者经常用到的 比如 <code>vue-devtool</code> 等框架提供的调试工具</li>\n</ol>\n<h2 id=\"开发介绍\"><a href=\"#开发介绍\" class=\"headerlink\" title=\"开发介绍\"></a>开发介绍</h2><p>具体扩展各个组成部分的学习，我们以一个很简单的例子为基础进行介绍，这个扩展是一个为页面添加回到顶部功能的扩展。</p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>每一个扩展都必须要有的一个名字为 manifest.json 的配置文件，这个文件声明了此扩展用到了哪些功能，及各个功能需要用到的静态资源</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTY5.png\" alt=\"manifest1.png\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTQy.png\" alt=\"manifest2.png\"></p>\n<p>这个 backToTop 扩展的配置已经在途中说明，已经有了基本的说明，下面对一些配置项做下额外的说明,全部配置可以在<a href=\"https://developer.chrome.com/extensions/manifest\" target=\"_blank\" rel=\"noopener\">官网</a>查看:</p>\n<ol>\n<li>browser_action 指定了 popup 页面相关的 icon、html、tooltip 文字等配置，相似的还有一个 page_action，它的配置参数和 browser_aciton 是相同的 但是它可以通过 <code>chrome.pageAction</code> API 来动态的设置扩展在某些页面的行为</li>\n<li>icons 配置不用每个尺寸都给出，chrome 会自己选出效果最合适的 icon</li>\n<li>permissions 声明扩展需要用到的 chrome 特性</li>\n</ol>\n<h2 id=\"常用-API\"><a href=\"#常用-API\" class=\"headerlink\" title=\"常用 API\"></a>常用 API</h2><ol>\n<li>chrome.runtime</li>\n<li>chrome.tabs 对标签页进行操作、与对应标签页内容通讯</li>\n<li>chrome.storage 扩展的存储，类似 localstorage</li>\n<li>chrome.contextMenus</li>\n<li>chrome.extension</li>\n</ol>\n<h2 id=\"核心-JS\"><a href=\"#核心-JS\" class=\"headerlink\" title=\"核心 JS\"></a>核心 JS</h2><p>这部分我们说下扩展开发核心的几种 JS</p>\n<h3 id=\"popup\"><a href=\"#popup\" class=\"headerlink\" title=\"popup\"></a>popup</h3><p>popup 页面生命周期是点击弹出时，初始化，关闭时，页面也跟着销毁, 并且这个页面没有任何跨域的限制。它在我们扩展里的作用是配置页面里 backToTop icon 的样式，并存入storage。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NTI5.png\" alt=\"popup.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.local.get([<span class=\"string\">'right'</span>, <span class=\"string\">'bottom'</span>, <span class=\"string\">'icon'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span>(result) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 初始化</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    right.value = result.right || <span class=\"string\">''</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    bottom.value = result.bottom || <span class=\"string\">''</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span>(result.icon) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      img.src = result.icon;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      img.dataset.uploaded = <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>页面初始化时，从 storage 取出存储的值，初始化页面。<br>保存参数时，再将相关参数存入 storage</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.local.set(&#123;<span class=\"attr\">right</span>: rightVal, <span class=\"attr\">bottom</span>: bottomVal&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span>(img.dataset.uploaded) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    chrome.storage.local.set(&#123;<span class=\"attr\">icon</span>: img.src&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr></table></figure>\n<p>注: storage API 有 2 种 <code>storage.sync</code> 和 <code>storage.local</code> 他们的区别</p>\n<ol>\n<li>sync 会将存储的数据定时发到 chrome 的服务器，进行数据的同步，local 就只是将数据存储在本地</li>\n<li>尺寸的不同：local 和 <code>localstorage</code> 是一样的 5M. 而 sync 存储的大小只有 100K 而且对于单个 key 的值大小，以及写入的频率也有限制，毕竟要同步服务端，所以如果开发的扩展只是用于个人使用的效率提升，不打算发布，可以直接用 local 就好了</li>\n</ol>\n<h3 id=\"content-script\"><a href=\"#content-script\" class=\"headerlink\" title=\"content-script\"></a>content-script</h3><p><code>content-script</code> 是我们用来定制化页面，实现页面内扩展逻辑的地方。它的特点是：</p>\n<ol>\n<li>因为在页面内，当然可以访问 DOM 但是和页面的 js 是完全独立的，不能互相访问</li>\n<li>无法对页面内的 DOM 事件绑定 扩展里的回调，这种情况可以通过 <code>content-script</code> 创建一个 script 标签插入到 DOM 里 这个新的 script 里的函数是可以绑定的</li>\n<li>因为在页面里运行，所以是会收到跨域限制滴</li>\n<li>运行时机是随着页面的加载而运行，页面关闭也就卸载了，所以说 <code>content-script</code> 会在每一个 tab 页面里都有一份代码在运行</li>\n<li>因为在页面初始化才会运行，所以在初始加载插件时，需要刷新页面，<code>content-script</code> 才会开始运行。</li>\n<li>注入页面的 css 优先级非常高，一定要注意好类名 ID 名的设置</li>\n</ol>\n<p>那我们的 backToTop 里 <code>content-script</code> 都干了什么呢<br>首先，初始化我们页面里的 icon 并根据页面 <code>scrollTop</code> 判断当前是否需要展示 icon</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.show = <span class=\"literal\">true</span>; <span class=\"comment\">// 控制icon是否显示</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.classList.add(<span class=\"string\">'ce-btt-container'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.style.opacity = target.scrollTop &gt; visibleHeight ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">img.classList.add(<span class=\"string\">'ce-btt-icon'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.appendChild(img);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.local.get([<span class=\"string\">'right'</span>, <span class=\"string\">'bottom'</span>, <span class=\"string\">'icon'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  el.style.right = result &amp;&amp; result.right ? result.right + <span class=\"string\">'px'</span> : right;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  el.style.bottom = result &amp;&amp; result.bottom ?  result.bottom + <span class=\"string\">'px'</span> : bottom;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  img.src = result &amp;&amp; result.icon ? result.icon : chrome.runtime.getURL(<span class=\"string\">'icons/backToTop.png'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(el);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>第二步， 要想实现返回顶部，当然要给我们的 icon 绑定点击事件，以及监听 <code>scroll</code> 事件判断什么时候该隐藏展示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">el.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> step = <span class=\"number\">20</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span>(target.scrollTop &lt;= <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      clearInterval(timer);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      step += <span class=\"number\">20</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      target.scrollTop -= step;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, <span class=\"number\">20</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleScroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span>(!el.show) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">// icon不显示时，不处理</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span>(target.scrollTop &gt; visibleHeight) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.style.opacity = <span class=\"number\">1</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.style.opacity = <span class=\"number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">container.addEventListener(<span class=\"string\">'scroll'</span>, throttle(handleScroll, <span class=\"number\">300</span>));</span></pre></td></tr></table></figure>\n\n<p>第三步， 如果 popup 页面有配置的变更， <code>content-script</code> 都需要立刻进行更新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.onChanged.addListener(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">changes, namespace</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span>(changes.bottom) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.style.bottom = <span class=\"string\">`<span class=\"subst\">$&#123;changes.bottom.newValue&#125;</span>px`</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (changes.right) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.style.right = <span class=\"string\">`<span class=\"subst\">$&#123;changes.right.newValue&#125;</span>px`</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (changes.icon) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    img.src = changes.icon.newValue;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n<p>注: 这里需要注意的是，因为我们要把扩展里的 icon 插入到页面，所以需要在 <code>manifest.json</code> 里配置 <code>web_accessible_resources</code> 赋予页面可以访问我们指定的扩展静态资源的权限。这是因为页面里 icon 的 src 属性是这样的</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NDg4.png\" alt=\"resource.png\"></p>\n<h3 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h3><p><code>background</code> 可以理解为是扩展在后台一直运行的一个 JS(实际并不是)， 它在整个浏览器里只会有一个 js 在运行。在 background 的配置里，有一个 <code>persistent</code> 的配置, 当它为 true 时，background 才会一直运行，false 时，浏览器会检测长时间不活动时，自动卸载调，只有监听的事件发生时，才会重新执行，官方的说明是</p>\n<blockquote>\n<p>The only occasion to keep a background script persistently active is if the extension uses chrome.webRequest API to block or modify network requests. The webRequest API is incompatible with non-persistent background pages.</p>\n</blockquote>\n<p>所以绝大多数时候，我们把它设为 false 就可以了。另外 <code>background</code> 也是可以跨域的，<br>所以我们可以总结出，除了页面内的 js chrome 对其他的 js 都没有跨域的限制。</p>\n<p>好，我们看看我们扩展里 <code>background</code> 干了啥</p>\n<p>首先，初始时，肯定要监听浏览器的初始化事件，才可以绑定扩展关注的事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onInstalled.addEventListener(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// init extention</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>第二步，因为有的页面已经提供了返回顶部的功能，所以这个时候我们需要提供可以把我们的 icon 永久隐藏的功能，我们在 <code>background</code> 初始化的逻辑中，创建一个鼠标右键的菜单项，这个菜单项可以实现 切换我们的 icon 显示状态的功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.contextMenus.create(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    title: <span class=\"string\">'toggle'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    id: <span class=\"string\">'toggle'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.contextMenus.onClicked.addListener(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  chrome.tabs.query(&#123;<span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    sendMsg(tabs.length ? tabs[<span class=\"number\">0</span>].id : <span class=\"literal\">null</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\">tabId</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  chrome.tabs.sendMessage(tabId, <span class=\"string\">'toggle'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>发送消息这里我们用了 <code>chrome.tabs</code> API 因为我们每个 tab 都会有一个 <code>content-script</code> 所以需要筛选出当前所在的标签页，然后发送消息。</p>\n<p>最后，我们的 <code>content-script</code> 需要监听发送消息的事件，并切换 icon 的状态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, sender, respond</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span>(req === <span class=\"string\">'toggle'</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (target.scrollTop &gt; visibleHeight) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      el.style.opacity = el.style.opacity === <span class=\"string\">'1'</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    el.show = !el.show;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    respond(<span class=\"string\">'toggle success'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n<p>至此，整个扩展的功能就基本介绍完了，过程中用到的 API 这里并不作详细的介绍，详细使用还是需要大家去 <a href=\"https://developer.chrome.com/apps/api_index\" target=\"_blank\" rel=\"noopener\">官网</a> 查看</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>最后说一下如何调试，调试个人认为还是比较麻烦的， 代码变更并没有热更新，所以需要我们手动去扩展管理页重新加载。而且几种不同的 JS 调试的位置也不同，设计通讯时经常需要在几个不同的地方来回切换</p>\n<p><code>popup</code> 调试：在弹出的窗口里，右键审查元素就可以弹出调试窗口，调试方式和普通的页面调试没有区别。</p>\n<p><code>background</code> 调试: 在管理页点击背景页，就可以弹出调试窗口了</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU0OTQx.png\" alt=\"bg-dev.png\"></p>\n<p><code>content-script</code> 调试: 因为是在页面运行，所以调试的地方和页面 js 是在一个窗口里</p>\n<p>代码位置：在 sources tab 下选中 Content scripts 就可以看到页面加载的全部的扩展 <code>contnt-script</code> 了。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NjE5.png\" alt=\"cs-code.png\"></p>\n<p>console 输出: 在 Console tab 下拉框里选中要调试的扩展，就可以看到对应扩展的 console 输出。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU1NjAy.png\" alt=\"cs-console.png\"></p>\n<h2 id=\"打包发布\"><a href=\"#打包发布\" class=\"headerlink\" title=\"打包发布\"></a>打包发布</h2><p>在扩展管理页，可以打包扩展程序,打包后就可以生成 <code>.crx</code> 文件</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MzU0OTE4.png\" alt=\"bundle.png\"></p>\n<p>打包之后，就可以发布了，不过发布需要先花 5$ 注册开发者，我就没有继续下去了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在开发过程中，可以发现写一个扩展其实并不难，用到的技术都是前端每天都在用的东西。只要我们多加留心，就会发现使用 chrome 过程中有许多可以提效，优化体验的地方，这时候我们就可以试着用扩展的方式解决。总体来说，chrome 扩展是一种技术成本很低，就可以干些有趣的事情的技术</p>\n<p>参考资料：</p>\n<p><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"noopener\">Chrom插件开发全攻略</a></p>"},{"title":"Node 使用火焰图优化 CPU 爆涨","date":"2019-07-25T16:00:00.000Z","author":"李浩男","toc":true,"thumbnail":"https://piccdn.luojilab.com/fe-oss/default/fire11.jpg","_content":"## 一、背景\n话不多说，先上图，这是得到 App 静态资源更新服务的 CPU 使用率监控，可以看到 7 月 2 号到 7 月 3 号后，cpu 使用率发生了爆涨，在八点的早高峰和下午六点的晚高峰，几乎可以把 cpu 打满。发现问题当机立断，升级配置将 2 核 4g 升级至 4 核 8g，先保证服务稳定，我们再继续查问题。\n\n下图是升级配置后的截图，所以看到的图已经温柔很多了，本人当时看到监控的时候，所有波峰都是打在红线以上的，虽然还没有引起报警，但是默默掏出小本本记下找时间查问题。\n\n<!-- more -->\n\n![IMG](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/1.png?raw=true)\n\n因为有很明显的发生变化的时间点，直接能找到这一次的改动，经过一点点的代码级 review，并没有发现变动的代码上有什么问题。作为一个小前端没遇到过这种问题呀，毫无头绪的我，把救世主锁定在了火焰图身上，想看一看到底什么地方耗时长到底 cpu 占用在了什么东西上。\n\n## 二、火焰图\n于是怎么生成火焰图成了我最大的难题，开始 Google 搜索，“如何生成火焰图” ，“node 火焰图”，“node cpu profiler”， “node flamegraph”。看来看去所有文章千篇一律，95%以上的文章都是如下解决方案。\n\n### 方案一：Linux perf\n参考文章：[nodejs 调试指南 perf + FlameGraph](https://github.com/nswbmw/node-in-debugging/blob/master/1.1%20perf%20%2B%20FlameGraph.md)\n\nLinux 自带的系统性能分析工具，一堆功能我就不多说了，有兴趣的自己去看[nodejs 调试指南](https://github.com/nswbmw/node-in-debugging/blob/master/1.1%20perf%20%2B%20FlameGraph.md)打开书的第一页。因为使用的局限性不是 Linux 的我，第一步 apt install linux-tools-common 都安不上，如果还要跑在虚拟机什么的上面是不是太麻烦了，方案一卒。\n\n### 方案二：Node.js 自带的分析工具\n参考文章：[易于分析的 Node.js 应用程序 | Node.js](https://nodejs.org/zh-cn/docs/guides/simple-profiling/)\n\nNode.js4.4.0 开始，node 本身就可以记录进程中 V8 引擎的性能信息(profiler)，只需要在启动的时候加上参数--prof。\nNode 自带的分析工具：\n\n1. 启动应用的时候，node 需要带上—-prof 参数\n2. 然后就会将性能相关信息收集到 node 运行目录下生成 isolate-xxxxxxxxxxxxx-v8.log 文件\n3. npm 有一个包可以方便的直接将 isolate 文件转换成，html 形式的火焰图[GitHub - mapbox/flamebearer: Blazing fast flame graph tool for V8 and Node ](https://github.com/mapbox/flamebearer)\n完成以上步骤火焰图果不其然的跑了出来\n\n![IMG](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/2.png?raw=true)\n\n可是仔细一看好像不是那么一回事，因为项目用的是 egg 框架，火焰图里的全部信息都是 egg 启动的东西啊，我长达五分钟的接口压测，一点都没有体现在火焰图上，一拍脑袋，想起来我用 node --prof 的形式收集到的性能数据都是 egg 主进程上的东西，而我们所有的接口全都打到了 egg worker 上去了，一点都没有收集到。顺便提一句 egg 提供了单进程模式[RFC 增加单进程启动模式 · Issue #3180 · eggjs/egg · GitHub](https://github.com/eggjs/egg/issues/3180)但还只是实验阶段。方案二又卒，好在我起码看到了一张图。\n\n### 方案三：使用 Dtrace 收集性能数据\n直接查到应用的 pid 直接对 pid 进行收集，然后也可以将收集到的数据制成火焰图，具体操作就不做赘述了，最后跑出来的图如下，\n\n![图三](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/3.png?raw=true)\n\n全部是一些 v8 底层的东西，好像也没有我想要看的内容呀，方案三卒。\n\n好了以上就是我 Google 出来的各种方案在我一一踩坑后全部以失败告终，其实也还有一些更简单的方案，例如直接接入 alinode 用阿里云的平台就好，一方面该项目没有接入阿里云，刚好用的 node 镜像又不是 ali 的，另一方面，如果可以在开发环境查出问题，不希望再通过上线去查问题。\n\n### 方案四：v8-profiler\nNode.js 是基于 V8 引擎的，V8 暴露了一些 profiler API，我们可以通过 [v8-profiler](https://github.com/node-inspector/v8-profiler) 收集一些运行时的 CPU 和内存数据。\n在安装 v8-profiler 的时候遇到了一些问题总是安装失败，并且得不到解决。不过好在有大神基于 v8-profiler 发布了 v8-profiler-node8，下面是 v8-profiler-node8 的一段描述。\n\n> Based on v8-profiler-node8@5.7.0, Solved the v8-profiler segment fault error in node-v8.x.\n> v8-profiler-node8 provides [node](http://github.com/nodejs/node) bindings for the v8 profiler and integration with [node-inspector](http://github.com/node-inspector)\n> 收集数据：\n> 简单的 npm install v8-profiler-node8 后，开始收集 CPU profile，收集时长五分钟。\n\n```js\nconst profiler = require(\"v8-profiler-node8\");\nconst fs = require(\"fs\");\nconst Bluebird = require(\"bluebird\");\n\nclass PackageController extends Controller {\n  async cpuProf() {\n    console.log(\"开始收集\");\n    // Start Profiling\n    profiler.startProfiling(\"CPU profile\");\n    await Bluebird.delay(60000 * 5);\n    const profile = profiler.stopProfiling();\n    profile\n      .export()\n      .pipe(fs.createWriteStream(`cpuprofile-${Date.now()}.cpuprofile`))\n      .on(\"finish\", () => profile.delete());\n    this.ctx.status = 204;\n  }\n}\n```\n\n然后立即用 ab 压测，给服务压力，\n\n``` bash\nab -t 300 -c 10 -p post.txt -T \"application/json\" http://localhost:7001/xxx/xxxxx/xxxxxx/xxxxx\n```\n\n收集完成后，得到一个 cpuProfile 文件，Chrome 自带了分析 CPU profile 日志的工具。打开 Chrome -> 调出开发者工具（DevTools） -> 单击右上角三个点的按钮 -> More tools -> JavaScript Profiler -> Load，加载刚才生成的 cpuprofile 文件。可以直接用 chrome 的性能分析直接读这个文件打开分析。\n这里我要推荐一下 [speedscope](https://www.speedscope.app/) 一个根据 cpuProfile 生成火焰图的工具，他生成的火焰图，更清晰，还有 leftHeavy 模式，直接将 CPU 占用率最高的排在最左边，一目了然，快速的可以定位到问题。\n\n![图四](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/4.png?raw=true)\n\n## 三、根据火焰图解决问题\n下面是该火焰图的 leftHeavy 模式\n\n![图五](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/5.png?raw=true)\n\n看火焰图的时候越图形越尖说明越正常，横条越长说明占用时间越长，从图中可以看到压测的五分钟里，CPU 占用时间长达两分钟，其中绝大多数被红框中占据，来张大图\n\n![图六](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/6.png?raw=true)\n\n这个火焰图中是由上至下的调用顺序，一眼看过去没有我业务代码中出现的内容，再仔细一看，fetchDocs、Cursor.next、completeMany、Document.init 这好像是 mongo 的东西呀，开心的像个傻子，赶快去搜源码。\n从 completeMany 这里破案了，这是 mongoose 中的一个方法，作用是将查询到的结果进行包装，使结果中的每一个文档成为 mongoose 文档，使之可以继续使用 mongoose 提供的方法。如下相关源码。\n\n```js\n/*!\n * hydrates many documents\n *\n * @param {Model} model\n * @param {Array} docs\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\nfunction completeMany(model, docs, fields, userProvidedFields, pop, callback) {\n  var arr = [];\n  var count = docs.length;\n  var len = count;\n  var opts = pop ? { populated: pop } : undefined;\n  var error = null;\n  function init(_error) {\n    if (error != null) {\n      return;\n    }\n    if (_error != null) {\n      error = _error;\n      return callback(error);\n    }\n    --count || callback(null, arr);\n  }\n  for (var i = 0; i < len; ++i) {\n    arr[i] = helpers.createModel(model, docs[i], fields, userProvidedFields);\n    arr[i].init(docs[i], opts, init);\n  }\n}\n```\n\ncompleteMany 方法会将传入的每一个 docs 通过 helpers.createModel 变成一个 mongoose Document，我们再来看一下是哪里调用的 completeMany 方法，发现在 find 方法中会判断 options.lean 是否等于 true 如果不等于 true 才会去调用 completeMany 方法去包装查询结果。\n\n```js\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = function(callback) {\n  this._castConditions();\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  var fields = this._fieldsForExec();\n  var options = this._mongooseOptions;\n  var _this = this;\n  var userProvidedFields = _this._userProvidedFields || {};\n  var cb = function(err, docs) {\n    if (err) {\n      return callback(err);\n    }\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n    if (!options.populate) {\n      // 看这里 重点重点！\n      return !!options.lean === true\n        ? callback(null, docs)\n        : completeMany(\n            _this.model,\n            docs,\n            fields,\n            userProvidedFields,\n            null,\n            callback\n          );\n    }\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(docs, pop, function(err, docs) {\n      if (err) return callback(err);\n      return !!options.lean === true\n        ? callback(null, docs)\n        : completeMany(\n            _this.model,\n            docs,\n            fields,\n            userProvidedFields,\n            pop,\n            callback\n          );\n    });\n  };\n  return Query.base.find.call(this, {}, cb);\n};\n```\n\n去文档上搜一下 lean [mongoose query lean](https://mongoosejs.com/docs/api/query.html#query_Query-lean) 文档上说了如果使用了 lean 那么查询返回的将是一个 javascript objects, not [Mongoose Documents](https://mongoosejs.com/docs/api/query.html#document-js) 。原话如下。\n\n> Documents returned from queries with theleanoption enabled are plain javascript objects, not [Mongoose Documents](https://mongoosejs.com/docs/api/query.html#document-js) . They have nosavemethod, getters/setters, virtuals, or other Mongoose features.\n在文档中还提到了，*lean 精简模式，对于高性能只读的情况是非常有用的*。\n\n## 四、后续优化\n回到问题上来，看到 mongoose Document 的问题，7 月 2 号到 7 月 3 号后，为什么会突然导致 CPU 暴涨恍然大悟，自己之前 review\n代码，看着代码没问题，但是忽略了这一个版本因为业务调整导致查询压力大大增加，可能是过去的好几倍这个问题。随即将查询改成精简模式。只需要如下很简单的几处修改即可。\n\n```js\nawait model.Package.find(query).lean();\n```\n\n那说到频繁的处理 mongoose Document 导致的性能问题，那其实还有一个优化点可以做，其实在查询的时候多多使用 find 的第二个参数 projection 去投影所需要返回的键，需要用什么就投影什么，不要一股脑把所有的键值一起返回了。处理完这一系列，重写在本地进行了一次同样的压测五分钟，出了一份火焰图，下面图 1 就是这五分钟期间的火焰图，图二就是经过 speedscope 解析过后的 leftHeavy 图，直接观察重灾区。\n\n![图七](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/7.png?raw=true)\n![图八](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/8.png?raw=true)\n\n从图一的火焰图中，并不能看出明显的区别，但是一看到图二就知道我们的优化是有效果的，从最直观的，原本左侧红框中 completeMany 的部分直接没有了，然后 cpu 占用的总时长也由原本的接近两分钟直接降到了 36s，优化效果还是十分明显的。上线观察几天看看效果\n\n![图九](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/9.png?raw=true)\n\n如图可以看到，cpu 使用率在优化后得到了大大提升，并且稳定在了百分之十五以内。问题解决了，一切皆大欢喜，服务器降配一切回到正常。但这次故障也让我对诸如 mongoos 这样的 ODM 在使用时需要更加小心谨慎，他给我们带来了无限的便利的同时，可能也会因为一些额外的操作，让我们的服务承受额外的负担，正常情况下这一点性能差距不易察觉，然而到了高峰期，或者大型活动的时侯，可能就会因为这一点小坑，对服务造成更大的影响。\n\n谨记。","source":"_posts/FE/node-flamegraph-optimize.md","raw":"title: Node 使用火焰图优化 CPU 爆涨\ndate: 2019-07-26\nauthor: 李浩男\ntoc: true\nthumbnail: https://piccdn.luojilab.com/fe-oss/default/fire11.jpg\ntag: \n  - 性能优化\n  - NodeJs\ncategories: \n  - 前端\n  - NodeJs\n\n---\n## 一、背景\n话不多说，先上图，这是得到 App 静态资源更新服务的 CPU 使用率监控，可以看到 7 月 2 号到 7 月 3 号后，cpu 使用率发生了爆涨，在八点的早高峰和下午六点的晚高峰，几乎可以把 cpu 打满。发现问题当机立断，升级配置将 2 核 4g 升级至 4 核 8g，先保证服务稳定，我们再继续查问题。\n\n下图是升级配置后的截图，所以看到的图已经温柔很多了，本人当时看到监控的时候，所有波峰都是打在红线以上的，虽然还没有引起报警，但是默默掏出小本本记下找时间查问题。\n\n<!-- more -->\n\n![IMG](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/1.png?raw=true)\n\n因为有很明显的发生变化的时间点，直接能找到这一次的改动，经过一点点的代码级 review，并没有发现变动的代码上有什么问题。作为一个小前端没遇到过这种问题呀，毫无头绪的我，把救世主锁定在了火焰图身上，想看一看到底什么地方耗时长到底 cpu 占用在了什么东西上。\n\n## 二、火焰图\n于是怎么生成火焰图成了我最大的难题，开始 Google 搜索，“如何生成火焰图” ，“node 火焰图”，“node cpu profiler”， “node flamegraph”。看来看去所有文章千篇一律，95%以上的文章都是如下解决方案。\n\n### 方案一：Linux perf\n参考文章：[nodejs 调试指南 perf + FlameGraph](https://github.com/nswbmw/node-in-debugging/blob/master/1.1%20perf%20%2B%20FlameGraph.md)\n\nLinux 自带的系统性能分析工具，一堆功能我就不多说了，有兴趣的自己去看[nodejs 调试指南](https://github.com/nswbmw/node-in-debugging/blob/master/1.1%20perf%20%2B%20FlameGraph.md)打开书的第一页。因为使用的局限性不是 Linux 的我，第一步 apt install linux-tools-common 都安不上，如果还要跑在虚拟机什么的上面是不是太麻烦了，方案一卒。\n\n### 方案二：Node.js 自带的分析工具\n参考文章：[易于分析的 Node.js 应用程序 | Node.js](https://nodejs.org/zh-cn/docs/guides/simple-profiling/)\n\nNode.js4.4.0 开始，node 本身就可以记录进程中 V8 引擎的性能信息(profiler)，只需要在启动的时候加上参数--prof。\nNode 自带的分析工具：\n\n1. 启动应用的时候，node 需要带上—-prof 参数\n2. 然后就会将性能相关信息收集到 node 运行目录下生成 isolate-xxxxxxxxxxxxx-v8.log 文件\n3. npm 有一个包可以方便的直接将 isolate 文件转换成，html 形式的火焰图[GitHub - mapbox/flamebearer: Blazing fast flame graph tool for V8 and Node ](https://github.com/mapbox/flamebearer)\n完成以上步骤火焰图果不其然的跑了出来\n\n![IMG](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/2.png?raw=true)\n\n可是仔细一看好像不是那么一回事，因为项目用的是 egg 框架，火焰图里的全部信息都是 egg 启动的东西啊，我长达五分钟的接口压测，一点都没有体现在火焰图上，一拍脑袋，想起来我用 node --prof 的形式收集到的性能数据都是 egg 主进程上的东西，而我们所有的接口全都打到了 egg worker 上去了，一点都没有收集到。顺便提一句 egg 提供了单进程模式[RFC 增加单进程启动模式 · Issue #3180 · eggjs/egg · GitHub](https://github.com/eggjs/egg/issues/3180)但还只是实验阶段。方案二又卒，好在我起码看到了一张图。\n\n### 方案三：使用 Dtrace 收集性能数据\n直接查到应用的 pid 直接对 pid 进行收集，然后也可以将收集到的数据制成火焰图，具体操作就不做赘述了，最后跑出来的图如下，\n\n![图三](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/3.png?raw=true)\n\n全部是一些 v8 底层的东西，好像也没有我想要看的内容呀，方案三卒。\n\n好了以上就是我 Google 出来的各种方案在我一一踩坑后全部以失败告终，其实也还有一些更简单的方案，例如直接接入 alinode 用阿里云的平台就好，一方面该项目没有接入阿里云，刚好用的 node 镜像又不是 ali 的，另一方面，如果可以在开发环境查出问题，不希望再通过上线去查问题。\n\n### 方案四：v8-profiler\nNode.js 是基于 V8 引擎的，V8 暴露了一些 profiler API，我们可以通过 [v8-profiler](https://github.com/node-inspector/v8-profiler) 收集一些运行时的 CPU 和内存数据。\n在安装 v8-profiler 的时候遇到了一些问题总是安装失败，并且得不到解决。不过好在有大神基于 v8-profiler 发布了 v8-profiler-node8，下面是 v8-profiler-node8 的一段描述。\n\n> Based on v8-profiler-node8@5.7.0, Solved the v8-profiler segment fault error in node-v8.x.\n> v8-profiler-node8 provides [node](http://github.com/nodejs/node) bindings for the v8 profiler and integration with [node-inspector](http://github.com/node-inspector)\n> 收集数据：\n> 简单的 npm install v8-profiler-node8 后，开始收集 CPU profile，收集时长五分钟。\n\n```js\nconst profiler = require(\"v8-profiler-node8\");\nconst fs = require(\"fs\");\nconst Bluebird = require(\"bluebird\");\n\nclass PackageController extends Controller {\n  async cpuProf() {\n    console.log(\"开始收集\");\n    // Start Profiling\n    profiler.startProfiling(\"CPU profile\");\n    await Bluebird.delay(60000 * 5);\n    const profile = profiler.stopProfiling();\n    profile\n      .export()\n      .pipe(fs.createWriteStream(`cpuprofile-${Date.now()}.cpuprofile`))\n      .on(\"finish\", () => profile.delete());\n    this.ctx.status = 204;\n  }\n}\n```\n\n然后立即用 ab 压测，给服务压力，\n\n``` bash\nab -t 300 -c 10 -p post.txt -T \"application/json\" http://localhost:7001/xxx/xxxxx/xxxxxx/xxxxx\n```\n\n收集完成后，得到一个 cpuProfile 文件，Chrome 自带了分析 CPU profile 日志的工具。打开 Chrome -> 调出开发者工具（DevTools） -> 单击右上角三个点的按钮 -> More tools -> JavaScript Profiler -> Load，加载刚才生成的 cpuprofile 文件。可以直接用 chrome 的性能分析直接读这个文件打开分析。\n这里我要推荐一下 [speedscope](https://www.speedscope.app/) 一个根据 cpuProfile 生成火焰图的工具，他生成的火焰图，更清晰，还有 leftHeavy 模式，直接将 CPU 占用率最高的排在最左边，一目了然，快速的可以定位到问题。\n\n![图四](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/4.png?raw=true)\n\n## 三、根据火焰图解决问题\n下面是该火焰图的 leftHeavy 模式\n\n![图五](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/5.png?raw=true)\n\n看火焰图的时候越图形越尖说明越正常，横条越长说明占用时间越长，从图中可以看到压测的五分钟里，CPU 占用时间长达两分钟，其中绝大多数被红框中占据，来张大图\n\n![图六](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/6.png?raw=true)\n\n这个火焰图中是由上至下的调用顺序，一眼看过去没有我业务代码中出现的内容，再仔细一看，fetchDocs、Cursor.next、completeMany、Document.init 这好像是 mongo 的东西呀，开心的像个傻子，赶快去搜源码。\n从 completeMany 这里破案了，这是 mongoose 中的一个方法，作用是将查询到的结果进行包装，使结果中的每一个文档成为 mongoose 文档，使之可以继续使用 mongoose 提供的方法。如下相关源码。\n\n```js\n/*!\n * hydrates many documents\n *\n * @param {Model} model\n * @param {Array} docs\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\nfunction completeMany(model, docs, fields, userProvidedFields, pop, callback) {\n  var arr = [];\n  var count = docs.length;\n  var len = count;\n  var opts = pop ? { populated: pop } : undefined;\n  var error = null;\n  function init(_error) {\n    if (error != null) {\n      return;\n    }\n    if (_error != null) {\n      error = _error;\n      return callback(error);\n    }\n    --count || callback(null, arr);\n  }\n  for (var i = 0; i < len; ++i) {\n    arr[i] = helpers.createModel(model, docs[i], fields, userProvidedFields);\n    arr[i].init(docs[i], opts, init);\n  }\n}\n```\n\ncompleteMany 方法会将传入的每一个 docs 通过 helpers.createModel 变成一个 mongoose Document，我们再来看一下是哪里调用的 completeMany 方法，发现在 find 方法中会判断 options.lean 是否等于 true 如果不等于 true 才会去调用 completeMany 方法去包装查询结果。\n\n```js\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = function(callback) {\n  this._castConditions();\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  var fields = this._fieldsForExec();\n  var options = this._mongooseOptions;\n  var _this = this;\n  var userProvidedFields = _this._userProvidedFields || {};\n  var cb = function(err, docs) {\n    if (err) {\n      return callback(err);\n    }\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n    if (!options.populate) {\n      // 看这里 重点重点！\n      return !!options.lean === true\n        ? callback(null, docs)\n        : completeMany(\n            _this.model,\n            docs,\n            fields,\n            userProvidedFields,\n            null,\n            callback\n          );\n    }\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(docs, pop, function(err, docs) {\n      if (err) return callback(err);\n      return !!options.lean === true\n        ? callback(null, docs)\n        : completeMany(\n            _this.model,\n            docs,\n            fields,\n            userProvidedFields,\n            pop,\n            callback\n          );\n    });\n  };\n  return Query.base.find.call(this, {}, cb);\n};\n```\n\n去文档上搜一下 lean [mongoose query lean](https://mongoosejs.com/docs/api/query.html#query_Query-lean) 文档上说了如果使用了 lean 那么查询返回的将是一个 javascript objects, not [Mongoose Documents](https://mongoosejs.com/docs/api/query.html#document-js) 。原话如下。\n\n> Documents returned from queries with theleanoption enabled are plain javascript objects, not [Mongoose Documents](https://mongoosejs.com/docs/api/query.html#document-js) . They have nosavemethod, getters/setters, virtuals, or other Mongoose features.\n在文档中还提到了，*lean 精简模式，对于高性能只读的情况是非常有用的*。\n\n## 四、后续优化\n回到问题上来，看到 mongoose Document 的问题，7 月 2 号到 7 月 3 号后，为什么会突然导致 CPU 暴涨恍然大悟，自己之前 review\n代码，看着代码没问题，但是忽略了这一个版本因为业务调整导致查询压力大大增加，可能是过去的好几倍这个问题。随即将查询改成精简模式。只需要如下很简单的几处修改即可。\n\n```js\nawait model.Package.find(query).lean();\n```\n\n那说到频繁的处理 mongoose Document 导致的性能问题，那其实还有一个优化点可以做，其实在查询的时候多多使用 find 的第二个参数 projection 去投影所需要返回的键，需要用什么就投影什么，不要一股脑把所有的键值一起返回了。处理完这一系列，重写在本地进行了一次同样的压测五分钟，出了一份火焰图，下面图 1 就是这五分钟期间的火焰图，图二就是经过 speedscope 解析过后的 leftHeavy 图，直接观察重灾区。\n\n![图七](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/7.png?raw=true)\n![图八](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/8.png?raw=true)\n\n从图一的火焰图中，并不能看出明显的区别，但是一看到图二就知道我们的优化是有效果的，从最直观的，原本左侧红框中 completeMany 的部分直接没有了，然后 cpu 占用的总时长也由原本的接近两分钟直接降到了 36s，优化效果还是十分明显的。上线观察几天看看效果\n\n![图九](https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/9.png?raw=true)\n\n如图可以看到，cpu 使用率在优化后得到了大大提升，并且稳定在了百分之十五以内。问题解决了，一切皆大欢喜，服务器降配一切回到正常。但这次故障也让我对诸如 mongoos 这样的 ODM 在使用时需要更加小心谨慎，他给我们带来了无限的便利的同时，可能也会因为一些额外的操作，让我们的服务承受额外的负担，正常情况下这一点性能差距不易察觉，然而到了高峰期，或者大型活动的时侯，可能就会因为这一点小坑，对服务造成更大的影响。\n\n谨记。","slug":"FE/node-flamegraph-optimize","published":1,"updated":"2019-12-05T11:52:26.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3so5k9100044efygmy34osp","content":"<h2 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h2><p>话不多说，先上图，这是得到 App 静态资源更新服务的 CPU 使用率监控，可以看到 7 月 2 号到 7 月 3 号后，cpu 使用率发生了爆涨，在八点的早高峰和下午六点的晚高峰，几乎可以把 cpu 打满。发现问题当机立断，升级配置将 2 核 4g 升级至 4 核 8g，先保证服务稳定，我们再继续查问题。</p>\n<p>下图是升级配置后的截图，所以看到的图已经温柔很多了，本人当时看到监控的时候，所有波峰都是打在红线以上的，虽然还没有引起报警，但是默默掏出小本本记下找时间查问题。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/1.png?raw=true\" alt=\"IMG\"></p>\n<p>因为有很明显的发生变化的时间点，直接能找到这一次的改动，经过一点点的代码级 review，并没有发现变动的代码上有什么问题。作为一个小前端没遇到过这种问题呀，毫无头绪的我，把救世主锁定在了火焰图身上，想看一看到底什么地方耗时长到底 cpu 占用在了什么东西上。</p>\n<h2 id=\"二、火焰图\"><a href=\"#二、火焰图\" class=\"headerlink\" title=\"二、火焰图\"></a>二、火焰图</h2><p>于是怎么生成火焰图成了我最大的难题，开始 Google 搜索，“如何生成火焰图” ，“node 火焰图”，“node cpu profiler”， “node flamegraph”。看来看去所有文章千篇一律，95%以上的文章都是如下解决方案。</p>\n<h3 id=\"方案一：Linux-perf\"><a href=\"#方案一：Linux-perf\" class=\"headerlink\" title=\"方案一：Linux perf\"></a>方案一：Linux perf</h3><p>参考文章：<a href=\"https://github.com/nswbmw/node-in-debugging/blob/master/1.1%20perf%20%2B%20FlameGraph.md\" target=\"_blank\" rel=\"noopener\">nodejs 调试指南 perf + FlameGraph</a></p>\n<p>Linux 自带的系统性能分析工具，一堆功能我就不多说了，有兴趣的自己去看<a href=\"https://github.com/nswbmw/node-in-debugging/blob/master/1.1%20perf%20%2B%20FlameGraph.md\" target=\"_blank\" rel=\"noopener\">nodejs 调试指南</a>打开书的第一页。因为使用的局限性不是 Linux 的我，第一步 apt install linux-tools-common 都安不上，如果还要跑在虚拟机什么的上面是不是太麻烦了，方案一卒。</p>\n<h3 id=\"方案二：Node-js-自带的分析工具\"><a href=\"#方案二：Node-js-自带的分析工具\" class=\"headerlink\" title=\"方案二：Node.js 自带的分析工具\"></a>方案二：Node.js 自带的分析工具</h3><p>参考文章：<a href=\"https://nodejs.org/zh-cn/docs/guides/simple-profiling/\" target=\"_blank\" rel=\"noopener\">易于分析的 Node.js 应用程序 | Node.js</a></p>\n<p>Node.js4.4.0 开始，node 本身就可以记录进程中 V8 引擎的性能信息(profiler)，只需要在启动的时候加上参数–prof。<br>Node 自带的分析工具：</p>\n<ol>\n<li>启动应用的时候，node 需要带上—-prof 参数</li>\n<li>然后就会将性能相关信息收集到 node 运行目录下生成 isolate-xxxxxxxxxxxxx-v8.log 文件</li>\n<li>npm 有一个包可以方便的直接将 isolate 文件转换成，html 形式的火焰图<a href=\"https://github.com/mapbox/flamebearer\" target=\"_blank\" rel=\"noopener\">GitHub - mapbox/flamebearer: Blazing fast flame graph tool for V8 and Node </a><br>完成以上步骤火焰图果不其然的跑了出来</li>\n</ol>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/2.png?raw=true\" alt=\"IMG\"></p>\n<p>可是仔细一看好像不是那么一回事，因为项目用的是 egg 框架，火焰图里的全部信息都是 egg 启动的东西啊，我长达五分钟的接口压测，一点都没有体现在火焰图上，一拍脑袋，想起来我用 node –prof 的形式收集到的性能数据都是 egg 主进程上的东西，而我们所有的接口全都打到了 egg worker 上去了，一点都没有收集到。顺便提一句 egg 提供了单进程模式<a href=\"https://github.com/eggjs/egg/issues/3180\" target=\"_blank\" rel=\"noopener\">RFC 增加单进程启动模式 · Issue #3180 · eggjs/egg · GitHub</a>但还只是实验阶段。方案二又卒，好在我起码看到了一张图。</p>\n<h3 id=\"方案三：使用-Dtrace-收集性能数据\"><a href=\"#方案三：使用-Dtrace-收集性能数据\" class=\"headerlink\" title=\"方案三：使用 Dtrace 收集性能数据\"></a>方案三：使用 Dtrace 收集性能数据</h3><p>直接查到应用的 pid 直接对 pid 进行收集，然后也可以将收集到的数据制成火焰图，具体操作就不做赘述了，最后跑出来的图如下，</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/3.png?raw=true\" alt=\"图三\"></p>\n<p>全部是一些 v8 底层的东西，好像也没有我想要看的内容呀，方案三卒。</p>\n<p>好了以上就是我 Google 出来的各种方案在我一一踩坑后全部以失败告终，其实也还有一些更简单的方案，例如直接接入 alinode 用阿里云的平台就好，一方面该项目没有接入阿里云，刚好用的 node 镜像又不是 ali 的，另一方面，如果可以在开发环境查出问题，不希望再通过上线去查问题。</p>\n<h3 id=\"方案四：v8-profiler\"><a href=\"#方案四：v8-profiler\" class=\"headerlink\" title=\"方案四：v8-profiler\"></a>方案四：v8-profiler</h3><p>Node.js 是基于 V8 引擎的，V8 暴露了一些 profiler API，我们可以通过 <a href=\"https://github.com/node-inspector/v8-profiler\" target=\"_blank\" rel=\"noopener\">v8-profiler</a> 收集一些运行时的 CPU 和内存数据。<br>在安装 v8-profiler 的时候遇到了一些问题总是安装失败，并且得不到解决。不过好在有大神基于 v8-profiler 发布了 v8-profiler-node8，下面是 v8-profiler-node8 的一段描述。</p>\n<blockquote>\n<p>Based on <a href=\"mailto:v8-profiler-node8@5.7.0\" target=\"_blank\" rel=\"noopener\">v8-profiler-node8@5.7.0</a>, Solved the v8-profiler segment fault error in node-v8.x.<br>v8-profiler-node8 provides <a href=\"http://github.com/nodejs/node\" target=\"_blank\" rel=\"noopener\">node</a> bindings for the v8 profiler and integration with <a href=\"http://github.com/node-inspector\" target=\"_blank\" rel=\"noopener\">node-inspector</a><br>收集数据：<br>简单的 npm install v8-profiler-node8 后，开始收集 CPU profile，收集时长五分钟。</p>\n</blockquote>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> profiler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"v8-profiler-node8\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> Bluebird = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"bluebird\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PackageController</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Controller</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">async</span> cpuProf() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"开始收集\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// Start Profiling</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    profiler.startProfiling(<span class=\"hljs-string\">\"CPU profile\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">await</span> Bluebird.delay(<span class=\"hljs-number\">60000</span> * <span class=\"hljs-number\">5</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> profile = profiler.stopProfiling();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    profile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .export()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(fs.createWriteStream(<span class=\"hljs-string\">`cpuprofile-<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Date</span>.now()&#125;</span>.cpuprofile`</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .on(<span class=\"hljs-string\">\"finish\"</span>, () =&gt; profile.delete());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.ctx.status = <span class=\"hljs-number\">204</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>然后立即用 ab 压测，给服务压力，</p>\n<figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ab -t 300 -c 10 -p post.txt -T <span class=\"hljs-string\">\"application/json\"</span> http://localhost:7001/xxx/xxxxx/xxxxxx/xxxxx</span></pre></td></tr></table></figure>\n\n<p>收集完成后，得到一个 cpuProfile 文件，Chrome 自带了分析 CPU profile 日志的工具。打开 Chrome -&gt; 调出开发者工具（DevTools） -&gt; 单击右上角三个点的按钮 -&gt; More tools -&gt; JavaScript Profiler -&gt; Load，加载刚才生成的 cpuprofile 文件。可以直接用 chrome 的性能分析直接读这个文件打开分析。<br>这里我要推荐一下 <a href=\"https://www.speedscope.app/\" target=\"_blank\" rel=\"noopener\">speedscope</a> 一个根据 cpuProfile 生成火焰图的工具，他生成的火焰图，更清晰，还有 leftHeavy 模式，直接将 CPU 占用率最高的排在最左边，一目了然，快速的可以定位到问题。</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/4.png?raw=true\" alt=\"图四\"></p>\n<h2 id=\"三、根据火焰图解决问题\"><a href=\"#三、根据火焰图解决问题\" class=\"headerlink\" title=\"三、根据火焰图解决问题\"></a>三、根据火焰图解决问题</h2><p>下面是该火焰图的 leftHeavy 模式</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/5.png?raw=true\" alt=\"图五\"></p>\n<p>看火焰图的时候越图形越尖说明越正常，横条越长说明占用时间越长，从图中可以看到压测的五分钟里，CPU 占用时间长达两分钟，其中绝大多数被红框中占据，来张大图</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/6.png?raw=true\" alt=\"图六\"></p>\n<p>这个火焰图中是由上至下的调用顺序，一眼看过去没有我业务代码中出现的内容，再仔细一看，fetchDocs、Cursor.next、completeMany、Document.init 这好像是 mongo 的东西呀，开心的像个傻子，赶快去搜源码。<br>从 completeMany 这里破案了，这是 mongoose 中的一个方法，作用是将查询到的结果进行包装，使结果中的每一个文档成为 mongoose 文档，使之可以继续使用 mongoose 提供的方法。如下相关源码。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/*!</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * hydrates many documents</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> *</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;Model&#125; model</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;Array&#125; docs</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;Object&#125; fields</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;Query&#125; self</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;Array&#125; [pop] array of paths used in population</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;Function&#125; callback</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">completeMany</span>(<span class=\"hljs-params\">model, docs, fields, userProvidedFields, pop, callback</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> arr = [];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> count = docs.length;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> len = count;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> opts = pop ? &#123; <span class=\"hljs-attr\">populated</span>: pop &#125; : <span class=\"hljs-literal\">undefined</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-literal\">null</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">init</span>(<span class=\"hljs-params\">_error</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (error != <span class=\"hljs-literal\">null</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (_error != <span class=\"hljs-literal\">null</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      error = _error;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> callback(error);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    --count || callback(<span class=\"hljs-literal\">null</span>, arr);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; ++i) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    arr[i] = helpers.createModel(model, docs[i], fields, userProvidedFields);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    arr[i].init(docs[i], opts, init);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>completeMany 方法会将传入的每一个 docs 通过 helpers.createModel 变成一个 mongoose Document，我们再来看一下是哪里调用的 completeMany 方法，发现在 find 方法中会判断 options.lean 是否等于 true 如果不等于 true 才会去调用 completeMany 方法去包装查询结果。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * Thunk around find()</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> *</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;Function&#125; [callback]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * @return &#123;Query&#125; this</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> * @api private</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">Query.prototype._find = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">callback</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">this</span>._castConditions();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.error() != <span class=\"hljs-literal\">null</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callback(<span class=\"hljs-keyword\">this</span>.error());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">this</span>._applyPaths();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">this</span>._fields = <span class=\"hljs-keyword\">this</span>._castFields(<span class=\"hljs-keyword\">this</span>._fields);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> fields = <span class=\"hljs-keyword\">this</span>._fieldsForExec();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> options = <span class=\"hljs-keyword\">this</span>._mongooseOptions;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> _this = <span class=\"hljs-keyword\">this</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> userProvidedFields = _this._userProvidedFields || &#123;&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">var</span> cb = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, docs</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (err) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> callback(err);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (docs.length === <span class=\"hljs-number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> callback(<span class=\"hljs-literal\">null</span>, docs);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (!options.populate) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 看这里 重点重点！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> !!options.lean === <span class=\"hljs-literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ? callback(<span class=\"hljs-literal\">null</span>, docs)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        : completeMany(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">            _this.model,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">            docs,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">            fields,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">            userProvidedFields,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-literal\">null</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">            callback</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">          );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">var</span> pop = helpers.preparePopulationOptionsMQ(_this, options);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    pop.__noPromise = <span class=\"hljs-literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    _this.model.populate(docs, pop, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, docs</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> callback(err);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> !!options.lean === <span class=\"hljs-literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ? callback(<span class=\"hljs-literal\">null</span>, docs)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">        : completeMany(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">            _this.model,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">            docs,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">            fields,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">            userProvidedFields,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">            pop,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">            callback</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">          );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> Query.base.find.call(<span class=\"hljs-keyword\">this</span>, &#123;&#125;, cb);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<p>去文档上搜一下 lean <a href=\"https://mongoosejs.com/docs/api/query.html#query_Query-lean\" target=\"_blank\" rel=\"noopener\">mongoose query lean</a> 文档上说了如果使用了 lean 那么查询返回的将是一个 javascript objects, not <a href=\"https://mongoosejs.com/docs/api/query.html#document-js\" target=\"_blank\" rel=\"noopener\">Mongoose Documents</a> 。原话如下。</p>\n<blockquote>\n<p>Documents returned from queries with theleanoption enabled are plain javascript objects, not <a href=\"https://mongoosejs.com/docs/api/query.html#document-js\" target=\"_blank\" rel=\"noopener\">Mongoose Documents</a> . They have nosavemethod, getters/setters, virtuals, or other Mongoose features.<br>在文档中还提到了，<em>lean 精简模式，对于高性能只读的情况是非常有用的</em>。</p>\n</blockquote>\n<h2 id=\"四、后续优化\"><a href=\"#四、后续优化\" class=\"headerlink\" title=\"四、后续优化\"></a>四、后续优化</h2><p>回到问题上来，看到 mongoose Document 的问题，7 月 2 号到 7 月 3 号后，为什么会突然导致 CPU 暴涨恍然大悟，自己之前 review<br>代码，看着代码没问题，但是忽略了这一个版本因为业务调整导致查询压力大大增加，可能是过去的好几倍这个问题。随即将查询改成精简模式。只需要如下很简单的几处修改即可。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">await</span> model.Package.find(query).lean();</span></pre></td></tr></table></figure>\n\n<p>那说到频繁的处理 mongoose Document 导致的性能问题，那其实还有一个优化点可以做，其实在查询的时候多多使用 find 的第二个参数 projection 去投影所需要返回的键，需要用什么就投影什么，不要一股脑把所有的键值一起返回了。处理完这一系列，重写在本地进行了一次同样的压测五分钟，出了一份火焰图，下面图 1 就是这五分钟期间的火焰图，图二就是经过 speedscope 解析过后的 leftHeavy 图，直接观察重灾区。</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/7.png?raw=true\" alt=\"图七\"><br><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/8.png?raw=true\" alt=\"图八\"></p>\n<p>从图一的火焰图中，并不能看出明显的区别，但是一看到图二就知道我们的优化是有效果的，从最直观的，原本左侧红框中 completeMany 的部分直接没有了，然后 cpu 占用的总时长也由原本的接近两分钟直接降到了 36s，优化效果还是十分明显的。上线观察几天看看效果</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/9.png?raw=true\" alt=\"图九\"></p>\n<p>如图可以看到，cpu 使用率在优化后得到了大大提升，并且稳定在了百分之十五以内。问题解决了，一切皆大欢喜，服务器降配一切回到正常。但这次故障也让我对诸如 mongoos 这样的 ODM 在使用时需要更加小心谨慎，他给我们带来了无限的便利的同时，可能也会因为一些额外的操作，让我们的服务承受额外的负担，正常情况下这一点性能差距不易察觉，然而到了高峰期，或者大型活动的时侯，可能就会因为这一点小坑，对服务造成更大的影响。</p>\n<p>谨记。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h2><p>话不多说，先上图，这是得到 App 静态资源更新服务的 CPU 使用率监控，可以看到 7 月 2 号到 7 月 3 号后，cpu 使用率发生了爆涨，在八点的早高峰和下午六点的晚高峰，几乎可以把 cpu 打满。发现问题当机立断，升级配置将 2 核 4g 升级至 4 核 8g，先保证服务稳定，我们再继续查问题。</p>\n<p>下图是升级配置后的截图，所以看到的图已经温柔很多了，本人当时看到监控的时候，所有波峰都是打在红线以上的，虽然还没有引起报警，但是默默掏出小本本记下找时间查问题。</p>","more":"<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/1.png?raw=true\" alt=\"IMG\"></p>\n<p>因为有很明显的发生变化的时间点，直接能找到这一次的改动，经过一点点的代码级 review，并没有发现变动的代码上有什么问题。作为一个小前端没遇到过这种问题呀，毫无头绪的我，把救世主锁定在了火焰图身上，想看一看到底什么地方耗时长到底 cpu 占用在了什么东西上。</p>\n<h2 id=\"二、火焰图\"><a href=\"#二、火焰图\" class=\"headerlink\" title=\"二、火焰图\"></a>二、火焰图</h2><p>于是怎么生成火焰图成了我最大的难题，开始 Google 搜索，“如何生成火焰图” ，“node 火焰图”，“node cpu profiler”， “node flamegraph”。看来看去所有文章千篇一律，95%以上的文章都是如下解决方案。</p>\n<h3 id=\"方案一：Linux-perf\"><a href=\"#方案一：Linux-perf\" class=\"headerlink\" title=\"方案一：Linux perf\"></a>方案一：Linux perf</h3><p>参考文章：<a href=\"https://github.com/nswbmw/node-in-debugging/blob/master/1.1%20perf%20%2B%20FlameGraph.md\" target=\"_blank\" rel=\"noopener\">nodejs 调试指南 perf + FlameGraph</a></p>\n<p>Linux 自带的系统性能分析工具，一堆功能我就不多说了，有兴趣的自己去看<a href=\"https://github.com/nswbmw/node-in-debugging/blob/master/1.1%20perf%20%2B%20FlameGraph.md\" target=\"_blank\" rel=\"noopener\">nodejs 调试指南</a>打开书的第一页。因为使用的局限性不是 Linux 的我，第一步 apt install linux-tools-common 都安不上，如果还要跑在虚拟机什么的上面是不是太麻烦了，方案一卒。</p>\n<h3 id=\"方案二：Node-js-自带的分析工具\"><a href=\"#方案二：Node-js-自带的分析工具\" class=\"headerlink\" title=\"方案二：Node.js 自带的分析工具\"></a>方案二：Node.js 自带的分析工具</h3><p>参考文章：<a href=\"https://nodejs.org/zh-cn/docs/guides/simple-profiling/\" target=\"_blank\" rel=\"noopener\">易于分析的 Node.js 应用程序 | Node.js</a></p>\n<p>Node.js4.4.0 开始，node 本身就可以记录进程中 V8 引擎的性能信息(profiler)，只需要在启动的时候加上参数–prof。<br>Node 自带的分析工具：</p>\n<ol>\n<li>启动应用的时候，node 需要带上—-prof 参数</li>\n<li>然后就会将性能相关信息收集到 node 运行目录下生成 isolate-xxxxxxxxxxxxx-v8.log 文件</li>\n<li>npm 有一个包可以方便的直接将 isolate 文件转换成，html 形式的火焰图<a href=\"https://github.com/mapbox/flamebearer\" target=\"_blank\" rel=\"noopener\">GitHub - mapbox/flamebearer: Blazing fast flame graph tool for V8 and Node </a><br>完成以上步骤火焰图果不其然的跑了出来</li>\n</ol>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/2.png?raw=true\" alt=\"IMG\"></p>\n<p>可是仔细一看好像不是那么一回事，因为项目用的是 egg 框架，火焰图里的全部信息都是 egg 启动的东西啊，我长达五分钟的接口压测，一点都没有体现在火焰图上，一拍脑袋，想起来我用 node –prof 的形式收集到的性能数据都是 egg 主进程上的东西，而我们所有的接口全都打到了 egg worker 上去了，一点都没有收集到。顺便提一句 egg 提供了单进程模式<a href=\"https://github.com/eggjs/egg/issues/3180\" target=\"_blank\" rel=\"noopener\">RFC 增加单进程启动模式 · Issue #3180 · eggjs/egg · GitHub</a>但还只是实验阶段。方案二又卒，好在我起码看到了一张图。</p>\n<h3 id=\"方案三：使用-Dtrace-收集性能数据\"><a href=\"#方案三：使用-Dtrace-收集性能数据\" class=\"headerlink\" title=\"方案三：使用 Dtrace 收集性能数据\"></a>方案三：使用 Dtrace 收集性能数据</h3><p>直接查到应用的 pid 直接对 pid 进行收集，然后也可以将收集到的数据制成火焰图，具体操作就不做赘述了，最后跑出来的图如下，</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/3.png?raw=true\" alt=\"图三\"></p>\n<p>全部是一些 v8 底层的东西，好像也没有我想要看的内容呀，方案三卒。</p>\n<p>好了以上就是我 Google 出来的各种方案在我一一踩坑后全部以失败告终，其实也还有一些更简单的方案，例如直接接入 alinode 用阿里云的平台就好，一方面该项目没有接入阿里云，刚好用的 node 镜像又不是 ali 的，另一方面，如果可以在开发环境查出问题，不希望再通过上线去查问题。</p>\n<h3 id=\"方案四：v8-profiler\"><a href=\"#方案四：v8-profiler\" class=\"headerlink\" title=\"方案四：v8-profiler\"></a>方案四：v8-profiler</h3><p>Node.js 是基于 V8 引擎的，V8 暴露了一些 profiler API，我们可以通过 <a href=\"https://github.com/node-inspector/v8-profiler\" target=\"_blank\" rel=\"noopener\">v8-profiler</a> 收集一些运行时的 CPU 和内存数据。<br>在安装 v8-profiler 的时候遇到了一些问题总是安装失败，并且得不到解决。不过好在有大神基于 v8-profiler 发布了 v8-profiler-node8，下面是 v8-profiler-node8 的一段描述。</p>\n<blockquote>\n<p>Based on <a href=\"mailto:v8-profiler-node8@5.7.0\" target=\"_blank\" rel=\"noopener\">v8-profiler-node8@5.7.0</a>, Solved the v8-profiler segment fault error in node-v8.x.<br>v8-profiler-node8 provides <a href=\"http://github.com/nodejs/node\" target=\"_blank\" rel=\"noopener\">node</a> bindings for the v8 profiler and integration with <a href=\"http://github.com/node-inspector\" target=\"_blank\" rel=\"noopener\">node-inspector</a><br>收集数据：<br>简单的 npm install v8-profiler-node8 后，开始收集 CPU profile，收集时长五分钟。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> profiler = <span class=\"built_in\">require</span>(<span class=\"string\">\"v8-profiler-node8\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Bluebird = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">async</span> cpuProf() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始收集\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// Start Profiling</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    profiler.startProfiling(<span class=\"string\">\"CPU profile\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">await</span> Bluebird.delay(<span class=\"number\">60000</span> * <span class=\"number\">5</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> profile = profiler.stopProfiling();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    profile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .export()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(fs.createWriteStream(<span class=\"string\">`cpuprofile-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>.cpuprofile`</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .on(<span class=\"string\">\"finish\"</span>, () =&gt; profile.delete());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.ctx.status = <span class=\"number\">204</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>然后立即用 ab 压测，给服务压力，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ab -t 300 -c 10 -p post.txt -T <span class=\"string\">\"application/json\"</span> http://localhost:7001/xxx/xxxxx/xxxxxx/xxxxx</span></pre></td></tr></table></figure>\n\n<p>收集完成后，得到一个 cpuProfile 文件，Chrome 自带了分析 CPU profile 日志的工具。打开 Chrome -&gt; 调出开发者工具（DevTools） -&gt; 单击右上角三个点的按钮 -&gt; More tools -&gt; JavaScript Profiler -&gt; Load，加载刚才生成的 cpuprofile 文件。可以直接用 chrome 的性能分析直接读这个文件打开分析。<br>这里我要推荐一下 <a href=\"https://www.speedscope.app/\" target=\"_blank\" rel=\"noopener\">speedscope</a> 一个根据 cpuProfile 生成火焰图的工具，他生成的火焰图，更清晰，还有 leftHeavy 模式，直接将 CPU 占用率最高的排在最左边，一目了然，快速的可以定位到问题。</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/4.png?raw=true\" alt=\"图四\"></p>\n<h2 id=\"三、根据火焰图解决问题\"><a href=\"#三、根据火焰图解决问题\" class=\"headerlink\" title=\"三、根据火焰图解决问题\"></a>三、根据火焰图解决问题</h2><p>下面是该火焰图的 leftHeavy 模式</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/5.png?raw=true\" alt=\"图五\"></p>\n<p>看火焰图的时候越图形越尖说明越正常，横条越长说明占用时间越长，从图中可以看到压测的五分钟里，CPU 占用时间长达两分钟，其中绝大多数被红框中占据，来张大图</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/6.png?raw=true\" alt=\"图六\"></p>\n<p>这个火焰图中是由上至下的调用顺序，一眼看过去没有我业务代码中出现的内容，再仔细一看，fetchDocs、Cursor.next、completeMany、Document.init 这好像是 mongo 的东西呀，开心的像个傻子，赶快去搜源码。<br>从 completeMany 这里破案了，这是 mongoose 中的一个方法，作用是将查询到的结果进行包装，使结果中的每一个文档成为 mongoose 文档，使之可以继续使用 mongoose 提供的方法。如下相关源码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*!</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * hydrates many documents</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param &#123;Model&#125; model</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param &#123;Array&#125; docs</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; fields</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param &#123;Query&#125; self</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param &#123;Array&#125; [pop] array of paths used in population</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; callback</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">completeMany</span>(<span class=\"params\">model, docs, fields, userProvidedFields, pop, callback</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> count = docs.length;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> len = count;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> opts = pop ? &#123; <span class=\"attr\">populated</span>: pop &#125; : <span class=\"literal\">undefined</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> error = <span class=\"literal\">null</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">_error</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"literal\">null</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (_error != <span class=\"literal\">null</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      error = _error;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> callback(error);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    --count || callback(<span class=\"literal\">null</span>, arr);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    arr[i] = helpers.createModel(model, docs[i], fields, userProvidedFields);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    arr[i].init(docs[i], opts, init);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>completeMany 方法会将传入的每一个 docs 通过 helpers.createModel 变成一个 mongoose Document，我们再来看一下是哪里调用的 completeMany 方法，发现在 find 方法中会判断 options.lean 是否等于 true 如果不等于 true 才会去调用 completeMany 方法去包装查询结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * Thunk around find()</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; [callback]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @return &#123;Query&#125; this</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @api private</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">Query.prototype._find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">this</span>._castConditions();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.error() != <span class=\"literal\">null</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callback(<span class=\"keyword\">this</span>.error());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">this</span>._applyPaths();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">this</span>._fields = <span class=\"keyword\">this</span>._castFields(<span class=\"keyword\">this</span>._fields);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> fields = <span class=\"keyword\">this</span>._fieldsForExec();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> options = <span class=\"keyword\">this</span>._mongooseOptions;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> userProvidedFields = _this._userProvidedFields || &#123;&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> cb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, docs</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> callback(err);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (docs.length === <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, docs);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!options.populate) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 看这里 重点重点！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> !!options.lean === <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ? callback(<span class=\"literal\">null</span>, docs)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        : completeMany(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">            _this.model,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">            docs,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">            fields,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">            userProvidedFields,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"literal\">null</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">            callback</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">          );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> pop = helpers.preparePopulationOptionsMQ(_this, options);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    pop.__noPromise = <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    _this.model.populate(docs, pop, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, docs</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> callback(err);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> !!options.lean === <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ? callback(<span class=\"literal\">null</span>, docs)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">        : completeMany(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">            _this.model,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">            docs,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">            fields,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">            userProvidedFields,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">            pop,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">            callback</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">          );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> Query.base.find.call(<span class=\"keyword\">this</span>, &#123;&#125;, cb);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<p>去文档上搜一下 lean <a href=\"https://mongoosejs.com/docs/api/query.html#query_Query-lean\" target=\"_blank\" rel=\"noopener\">mongoose query lean</a> 文档上说了如果使用了 lean 那么查询返回的将是一个 javascript objects, not <a href=\"https://mongoosejs.com/docs/api/query.html#document-js\" target=\"_blank\" rel=\"noopener\">Mongoose Documents</a> 。原话如下。</p>\n<blockquote>\n<p>Documents returned from queries with theleanoption enabled are plain javascript objects, not <a href=\"https://mongoosejs.com/docs/api/query.html#document-js\" target=\"_blank\" rel=\"noopener\">Mongoose Documents</a> . They have nosavemethod, getters/setters, virtuals, or other Mongoose features.<br>在文档中还提到了，<em>lean 精简模式，对于高性能只读的情况是非常有用的</em>。</p>\n</blockquote>\n<h2 id=\"四、后续优化\"><a href=\"#四、后续优化\" class=\"headerlink\" title=\"四、后续优化\"></a>四、后续优化</h2><p>回到问题上来，看到 mongoose Document 的问题，7 月 2 号到 7 月 3 号后，为什么会突然导致 CPU 暴涨恍然大悟，自己之前 review<br>代码，看着代码没问题，但是忽略了这一个版本因为业务调整导致查询压力大大增加，可能是过去的好几倍这个问题。随即将查询改成精简模式。只需要如下很简单的几处修改即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> model.Package.find(query).lean();</span></pre></td></tr></table></figure>\n\n<p>那说到频繁的处理 mongoose Document 导致的性能问题，那其实还有一个优化点可以做，其实在查询的时候多多使用 find 的第二个参数 projection 去投影所需要返回的键，需要用什么就投影什么，不要一股脑把所有的键值一起返回了。处理完这一系列，重写在本地进行了一次同样的压测五分钟，出了一份火焰图，下面图 1 就是这五分钟期间的火焰图，图二就是经过 speedscope 解析过后的 leftHeavy 图，直接观察重灾区。</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/7.png?raw=true\" alt=\"图七\"><br><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/8.png?raw=true\" alt=\"图八\"></p>\n<p>从图一的火焰图中，并不能看出明显的区别，但是一看到图二就知道我们的优化是有效果的，从最直观的，原本左侧红框中 completeMany 的部分直接没有了，然后 cpu 占用的总时长也由原本的接近两分钟直接降到了 36s，优化效果还是十分明显的。上线观察几天看看效果</p>\n<p><img src=\"https://github.com/lihaonanGY/GraphBed/blob/master/block/cpuProfiler/9.png?raw=true\" alt=\"图九\"></p>\n<p>如图可以看到，cpu 使用率在优化后得到了大大提升，并且稳定在了百分之十五以内。问题解决了，一切皆大欢喜，服务器降配一切回到正常。但这次故障也让我对诸如 mongoos 这样的 ODM 在使用时需要更加小心谨慎，他给我们带来了无限的便利的同时，可能也会因为一些额外的操作，让我们的服务承受额外的负担，正常情况下这一点性能差距不易察觉，然而到了高峰期，或者大型活动的时侯，可能就会因为这一点小坑，对服务造成更大的影响。</p>\n<p>谨记。</p>"},{"title":"【八里庄技术沙龙-12 期】如何从零实现一个高性能的API网关","date":"2019-08-13T16:00:00.000Z","author":"yanbo","toc":true,"thumbnail":"https://piccdn.luojilab.com/fe-oss/default/MTU2NzE1Mjk5Mjg1.jpeg","_content":"\n## API网关是什么？ \n要回答这个问题我们需要先了解下我们得到的架构变迁。\n![单体应用架构](https://piccdn.luojilab.com/fe/blog/20190918/upload_7f178cd4397fa1e5d7c8a7077e5dd880.png)\n\n我们公司最早的时候都是PHP实现的单体应用，比如生活作风的H5商城，得到的V3。这张图就是我们得到的早期架构，当时所有的业务逻辑实现全部在V3当中，然后DCAPI封装了与数据库的交互。这就是一个典型的单体应用架构。\n\n\n<!-- more -->\n\n![微服务无服务架构g](https://piccdn.luojilab.com/fe/blog/20190918/upload_c45a152965f8ec10d45b2f67fad7220d.png)\n\n然后到17年的时候，随着公司人员越来越多以及微服务的兴起，我们也开始进行服务化的改造。但是在进行服务化的时候首先面临的一个问题就是：**当我们把一个单体应用拆成众多微服务之后，每一个服务如何与客户端进行通信？**原来客户端只需要和V3进行对接，现在难道要让客户端分别与这么多服务进行对接么？ 这显然是不可行的。\n\n所以，实际上这时候我们与所有进行微服务落地工作的团队一样面临微服务的一些痛点。那么解决这些痛点的方式，一般业界通用的是引入一个叫做API网关的组件。也就是这样的微服务架构。\n\n![微服务架构](https://piccdn.luojilab.com/fe/blog/20190918/upload_b997a5f989bc093c0751ac3d37a38083.png)\n\n现在我们就可以来回答网关是什么？\n>API网关一般作为系统与外界联通的入口，在微服务架构中，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。\n\n### 网关的核心功能\n- 路由转发\n- 路由重写\n- 访问控制\n- 流量控制\n- 负载均衡\n- 健康检查\n- 服务发现\n- 熔断降级\n\n### 网关的设计目标\n- **具备Cloud-Native特性**\n- **部署支持无限水平扩展**\n- **高性能，高可用**\n- **开箱即用，功能易扩展**\n- **支持多机房部署**\n\n### 网关的抽象模型\n1. 应用：一组路由的集合，抽象为应用，一般为一个业务或一条业务线\n2. 路由：归属于应用，定义了可以通过网关访问的路由规则及限流策略\n3. 服务：对应一个真实的后端服务，可以绑定在多个应用的不同路由上\n4. 节点：每个节点即一个后端服务节点，支持监控检查及负载均衡\n\n这四个模型的关系如下：\n![内部模型关系](https://piccdn.luojilab.com/fe/blog/20190918/upload_1873872e716aca434fb201ff7183a82a.png)\n\n### 网关的高可用方案\n\n![得到网关高可用方案](https://piccdn.luojilab.com/fe/blog/20190918/upload_513e3adb0aa4a3362b1e651bc71aa15d.png)\n\n我们采用etcd来存储配置，通过ETCD的高可用来保证网关集群的高可用和水平无限扩展。\n\n### 网关的易扩展设计\n![image.png](https://piccdn.luojilab.com/fe/blog/20190918/upload_7d2ee18094781cca3e54b43c991ad24b.png)\n\n我们还是希望整个系统能够具备一定的扩展能力，为了避免调度系统过于复杂，所以我们想采用类似Gin框架中间件的形式来实现易扩展。这样每个请求进来之后会穿过所有的中间件，中间件也就可以在这个过程中对其进行操作控制。\n![image.png](https://piccdn.luojilab.com/fe/blog/20190918/upload_3ac9277f62bcaaa58a64383ca8c3e97f.png)\n\nGin框架中间件的巧妙之处主要在于通过Context的Next方法进行自调用实现了一个拦截器。这样，不论在中间件中是否调用了Next都不会影响中间件的执行顺序。如果看代码不好理解，可以看下面这两张图。\n\n![中间件内部不调用Next](https://piccdn.luojilab.com/fe/blog/20190918/upload_478c92e973f783ae8704f8ab3a05183b.png)\n\n![中间件内部调用Next](https://piccdn.luojilab.com/fe/blog/20190918/upload_9b0b2ae60182518bf450b6d0f80d6b33.png)\n\n### 网关的内部组件\n![内部组件调用关系](https://piccdn.luojilab.com/fe/blog/20190918/upload_995dd1ac9e9b5c3da7026cd8848e76a8.png)\n\n最终，在易扩展、高可用的基础上，我们在系统内部实现了上图这样的内部结构。\n1. **APIServer负责提供配置变更的接口**\n2. **当它收到配置变更请求时将配置数据写入ETCD**\n3. **由Watcher组件对ETCD进行watch并把最新的数据映射到Model上，同时编译中间件的HandlerChain**\n4. **代理服务器负责接收需要转发的请求，开始执行HandlerChain**\n\n\n## Golang高性能系统实战\n** 工具：**\n- Jmeter：用于发起压测流量\n- runtime/pprof：采集程序（非 Server）的运行数据进行分析\n- net/http/pprof：采集 HTTP Server 的运行时数据进行分析\n- go tool pprof bin/server http://10.2.0.2:8088/debug/pprof/profile\n- go-torch -u http://10.2.0.2:8088/debug/pprof/profile -f slice.svg\n\n** 环境：**\n- 压测机：8C16G\n- API网关：4C8G\n- 系统：Centos7\n\n### 反向代理\n![Go反向代理服务器](https://piccdn.luojilab.com/fe/blog/20190918/upload_0afe549f4844c4704d7951492b90289e.png)\n反向代理是网关的基础功能，所以我们首先就对Golang实现的反向代理做了压测，如上图采用Golang官方的net.http包实现。经过多次压测验证，在4C8G的服务器上只能压到19000+，将近两万QPS。这结果令我们很愕然，因为大家都知道Golang的并发处理能力是不弱的，所以我们又单独对Golang实现的HTTPServer进行了压测，实现代码如下图。\n\n![GoHTTP服务器](https://piccdn.luojilab.com/fe/blog/20190918/upload_85bb90f0a02994f08c77eb3007f00921.png)\n\n最终压出了88000+的QPS，这结果才令人满意。那么我们就分析，Golang的http.Client性能可能远低于Server。我们都知道Golang社区除了官方的net.http包还有一个fasthttp，那么能不能使用fasthttp来替代反向代理中的Client部分呢。见过反复验证，也是可以的。最终我们压出了这两张火焰图。\n\n![nethttp反向代理：19343QPS](https://piccdn.luojilab.com/fe/blog/20190918/upload_0cda12b0b3b1fd0a5254999bcda1e83e.png)\n\n![fasthttp反向代理：45654QPS](https://piccdn.luojilab.com/fe/blog/20190918/upload_6442a094e4f719b502bf6801d1432f09.png)\n\n### 正则匹配\n![路由重写正则测试](https://piccdn.luojilab.com/fe/blog/20190918/upload_dcc63629c6c545d8fd4848f5dc15ede3.png)\n\n![路由重写正则测试结果](https://piccdn.luojilab.com/fe/blog/20190918/upload_bfa7789824669bf871ebccae2416cd96.png)\n\n**Tips: 在热点代码中避免使用正则，如果无法避免，那么一定要进行预编译。**\n\n### 字符串拼接\n![多字符串拼接测试](https://piccdn.luojilab.com/fe/blog/20190918/upload_4205efe3bc8bd61b8a7ee1265add951b.png)\n\n![多字符串拼接测试结果](https://piccdn.luojilab.com/fe/blog/20190918/upload_99a70ebcb2591dbea9483de304af868e.png)\n\n![单字符拼接测试](https://piccdn.luojilab.com/fe/blog/20190918/upload_c43fc59b5ab8ac26c534aa1bb712248f.png)\n\n![单字符拼接测试结果](https://piccdn.luojilab.com/fe/blog/20190918/upload_9b46064a7b1474f084617e04e1d7f5b4.png)\n\n**Tips1：单次调用时，操作符+ > strings.Join >= bytes.Buffer > fmt.Sprintf**\n\n**Tips2：多次调用时，bytes.Buffer >= strings.Join > 操作符+ > fmt.Sprintf**\n\n### 频繁创建对象 Vs 复用对象\n![频繁创建对象](https://piccdn.luojilab.com/fe/blog/20190918/upload_f7890f002b341d5dc9cec25c880baca9.png)\n\n![使用sync.Pool复用对象后](https://piccdn.luojilab.com/fe/blog/20190918/upload_089cb3989e0df932465c69b2f0f4de67.png)\n\n可以看到明显的提升，所以在热点代码中如果有创建对象的操作，要尽量进行复用。\n\n### Slice查询 Vs Map查询\n\n![Slice和Map查询对比测试](https://piccdn.luojilab.com/fe/blog/20190918/upload_70d8f685f8c6286a961eb21e23fe8290.png)\n\n ![Slice和Map查询对比测试结果](https://piccdn.luojilab.com/fe/blog/20190918/upload_51c78c45274095c6fb8e2fe982a7c124.png)\n\n\nMap查询的时间复杂度为O1，而Slice查询的时间复杂度为On，我们直观上理解Map肯定是比Slice快的。但是实际的情况并不是那么绝对，可以看到上面的例子中，当成员数量为10时我们遍历整个slice的速度都比map的一次查询快。经过研究map底层代码，我们发现这是因为map底层还有hash的操作。\n\n所以，最终经过我们测试，在不考虑key大小的情况下，成员数量小于25时slice的性能要好于map。\n\n\n### 高性能总结\n- **避免反射和锁的使用**\n- **避免创建过多的对象（避免GC）**\n- **尽量复用已经创建的对象（sync.Pool）**\n- **避免进行[]byte和string的转换**\n- **设置GOGC用内存换CPU时间**\n- **对于精度不高的时间自己实现时钟**\n- **数据量较少时用slice替代map**\n\n","source":"_posts/Technical/ddgw.md","raw":"title: 【八里庄技术沙龙-12 期】如何从零实现一个高性能的API网关\ndate: 2019-08-14\nauthor: yanbo\ntoc: true\nthumbnail: https://piccdn.luojilab.com/fe-oss/default/MTU2NzE1Mjk5Mjg1.jpeg\ntag: \n  - 八里庄技术沙龙 \ncategories: \n  - 八里庄技术沙龙\n\n---\n\n## API网关是什么？ \n要回答这个问题我们需要先了解下我们得到的架构变迁。\n![单体应用架构](https://piccdn.luojilab.com/fe/blog/20190918/upload_7f178cd4397fa1e5d7c8a7077e5dd880.png)\n\n我们公司最早的时候都是PHP实现的单体应用，比如生活作风的H5商城，得到的V3。这张图就是我们得到的早期架构，当时所有的业务逻辑实现全部在V3当中，然后DCAPI封装了与数据库的交互。这就是一个典型的单体应用架构。\n\n\n<!-- more -->\n\n![微服务无服务架构g](https://piccdn.luojilab.com/fe/blog/20190918/upload_c45a152965f8ec10d45b2f67fad7220d.png)\n\n然后到17年的时候，随着公司人员越来越多以及微服务的兴起，我们也开始进行服务化的改造。但是在进行服务化的时候首先面临的一个问题就是：**当我们把一个单体应用拆成众多微服务之后，每一个服务如何与客户端进行通信？**原来客户端只需要和V3进行对接，现在难道要让客户端分别与这么多服务进行对接么？ 这显然是不可行的。\n\n所以，实际上这时候我们与所有进行微服务落地工作的团队一样面临微服务的一些痛点。那么解决这些痛点的方式，一般业界通用的是引入一个叫做API网关的组件。也就是这样的微服务架构。\n\n![微服务架构](https://piccdn.luojilab.com/fe/blog/20190918/upload_b997a5f989bc093c0751ac3d37a38083.png)\n\n现在我们就可以来回答网关是什么？\n>API网关一般作为系统与外界联通的入口，在微服务架构中，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。\n\n### 网关的核心功能\n- 路由转发\n- 路由重写\n- 访问控制\n- 流量控制\n- 负载均衡\n- 健康检查\n- 服务发现\n- 熔断降级\n\n### 网关的设计目标\n- **具备Cloud-Native特性**\n- **部署支持无限水平扩展**\n- **高性能，高可用**\n- **开箱即用，功能易扩展**\n- **支持多机房部署**\n\n### 网关的抽象模型\n1. 应用：一组路由的集合，抽象为应用，一般为一个业务或一条业务线\n2. 路由：归属于应用，定义了可以通过网关访问的路由规则及限流策略\n3. 服务：对应一个真实的后端服务，可以绑定在多个应用的不同路由上\n4. 节点：每个节点即一个后端服务节点，支持监控检查及负载均衡\n\n这四个模型的关系如下：\n![内部模型关系](https://piccdn.luojilab.com/fe/blog/20190918/upload_1873872e716aca434fb201ff7183a82a.png)\n\n### 网关的高可用方案\n\n![得到网关高可用方案](https://piccdn.luojilab.com/fe/blog/20190918/upload_513e3adb0aa4a3362b1e651bc71aa15d.png)\n\n我们采用etcd来存储配置，通过ETCD的高可用来保证网关集群的高可用和水平无限扩展。\n\n### 网关的易扩展设计\n![image.png](https://piccdn.luojilab.com/fe/blog/20190918/upload_7d2ee18094781cca3e54b43c991ad24b.png)\n\n我们还是希望整个系统能够具备一定的扩展能力，为了避免调度系统过于复杂，所以我们想采用类似Gin框架中间件的形式来实现易扩展。这样每个请求进来之后会穿过所有的中间件，中间件也就可以在这个过程中对其进行操作控制。\n![image.png](https://piccdn.luojilab.com/fe/blog/20190918/upload_3ac9277f62bcaaa58a64383ca8c3e97f.png)\n\nGin框架中间件的巧妙之处主要在于通过Context的Next方法进行自调用实现了一个拦截器。这样，不论在中间件中是否调用了Next都不会影响中间件的执行顺序。如果看代码不好理解，可以看下面这两张图。\n\n![中间件内部不调用Next](https://piccdn.luojilab.com/fe/blog/20190918/upload_478c92e973f783ae8704f8ab3a05183b.png)\n\n![中间件内部调用Next](https://piccdn.luojilab.com/fe/blog/20190918/upload_9b0b2ae60182518bf450b6d0f80d6b33.png)\n\n### 网关的内部组件\n![内部组件调用关系](https://piccdn.luojilab.com/fe/blog/20190918/upload_995dd1ac9e9b5c3da7026cd8848e76a8.png)\n\n最终，在易扩展、高可用的基础上，我们在系统内部实现了上图这样的内部结构。\n1. **APIServer负责提供配置变更的接口**\n2. **当它收到配置变更请求时将配置数据写入ETCD**\n3. **由Watcher组件对ETCD进行watch并把最新的数据映射到Model上，同时编译中间件的HandlerChain**\n4. **代理服务器负责接收需要转发的请求，开始执行HandlerChain**\n\n\n## Golang高性能系统实战\n** 工具：**\n- Jmeter：用于发起压测流量\n- runtime/pprof：采集程序（非 Server）的运行数据进行分析\n- net/http/pprof：采集 HTTP Server 的运行时数据进行分析\n- go tool pprof bin/server http://10.2.0.2:8088/debug/pprof/profile\n- go-torch -u http://10.2.0.2:8088/debug/pprof/profile -f slice.svg\n\n** 环境：**\n- 压测机：8C16G\n- API网关：4C8G\n- 系统：Centos7\n\n### 反向代理\n![Go反向代理服务器](https://piccdn.luojilab.com/fe/blog/20190918/upload_0afe549f4844c4704d7951492b90289e.png)\n反向代理是网关的基础功能，所以我们首先就对Golang实现的反向代理做了压测，如上图采用Golang官方的net.http包实现。经过多次压测验证，在4C8G的服务器上只能压到19000+，将近两万QPS。这结果令我们很愕然，因为大家都知道Golang的并发处理能力是不弱的，所以我们又单独对Golang实现的HTTPServer进行了压测，实现代码如下图。\n\n![GoHTTP服务器](https://piccdn.luojilab.com/fe/blog/20190918/upload_85bb90f0a02994f08c77eb3007f00921.png)\n\n最终压出了88000+的QPS，这结果才令人满意。那么我们就分析，Golang的http.Client性能可能远低于Server。我们都知道Golang社区除了官方的net.http包还有一个fasthttp，那么能不能使用fasthttp来替代反向代理中的Client部分呢。见过反复验证，也是可以的。最终我们压出了这两张火焰图。\n\n![nethttp反向代理：19343QPS](https://piccdn.luojilab.com/fe/blog/20190918/upload_0cda12b0b3b1fd0a5254999bcda1e83e.png)\n\n![fasthttp反向代理：45654QPS](https://piccdn.luojilab.com/fe/blog/20190918/upload_6442a094e4f719b502bf6801d1432f09.png)\n\n### 正则匹配\n![路由重写正则测试](https://piccdn.luojilab.com/fe/blog/20190918/upload_dcc63629c6c545d8fd4848f5dc15ede3.png)\n\n![路由重写正则测试结果](https://piccdn.luojilab.com/fe/blog/20190918/upload_bfa7789824669bf871ebccae2416cd96.png)\n\n**Tips: 在热点代码中避免使用正则，如果无法避免，那么一定要进行预编译。**\n\n### 字符串拼接\n![多字符串拼接测试](https://piccdn.luojilab.com/fe/blog/20190918/upload_4205efe3bc8bd61b8a7ee1265add951b.png)\n\n![多字符串拼接测试结果](https://piccdn.luojilab.com/fe/blog/20190918/upload_99a70ebcb2591dbea9483de304af868e.png)\n\n![单字符拼接测试](https://piccdn.luojilab.com/fe/blog/20190918/upload_c43fc59b5ab8ac26c534aa1bb712248f.png)\n\n![单字符拼接测试结果](https://piccdn.luojilab.com/fe/blog/20190918/upload_9b46064a7b1474f084617e04e1d7f5b4.png)\n\n**Tips1：单次调用时，操作符+ > strings.Join >= bytes.Buffer > fmt.Sprintf**\n\n**Tips2：多次调用时，bytes.Buffer >= strings.Join > 操作符+ > fmt.Sprintf**\n\n### 频繁创建对象 Vs 复用对象\n![频繁创建对象](https://piccdn.luojilab.com/fe/blog/20190918/upload_f7890f002b341d5dc9cec25c880baca9.png)\n\n![使用sync.Pool复用对象后](https://piccdn.luojilab.com/fe/blog/20190918/upload_089cb3989e0df932465c69b2f0f4de67.png)\n\n可以看到明显的提升，所以在热点代码中如果有创建对象的操作，要尽量进行复用。\n\n### Slice查询 Vs Map查询\n\n![Slice和Map查询对比测试](https://piccdn.luojilab.com/fe/blog/20190918/upload_70d8f685f8c6286a961eb21e23fe8290.png)\n\n ![Slice和Map查询对比测试结果](https://piccdn.luojilab.com/fe/blog/20190918/upload_51c78c45274095c6fb8e2fe982a7c124.png)\n\n\nMap查询的时间复杂度为O1，而Slice查询的时间复杂度为On，我们直观上理解Map肯定是比Slice快的。但是实际的情况并不是那么绝对，可以看到上面的例子中，当成员数量为10时我们遍历整个slice的速度都比map的一次查询快。经过研究map底层代码，我们发现这是因为map底层还有hash的操作。\n\n所以，最终经过我们测试，在不考虑key大小的情况下，成员数量小于25时slice的性能要好于map。\n\n\n### 高性能总结\n- **避免反射和锁的使用**\n- **避免创建过多的对象（避免GC）**\n- **尽量复用已经创建的对象（sync.Pool）**\n- **避免进行[]byte和string的转换**\n- **设置GOGC用内存换CPU时间**\n- **对于精度不高的时间自己实现时钟**\n- **数据量较少时用slice替代map**\n\n","slug":"Technical/ddgw","published":1,"updated":"2019-12-05T11:52:26.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3so5k9300054efyey23fkiz","content":"<h2 id=\"API网关是什么？\"><a href=\"#API网关是什么？\" class=\"headerlink\" title=\"API网关是什么？\"></a>API网关是什么？</h2><p>要回答这个问题我们需要先了解下我们得到的架构变迁。<br><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_7f178cd4397fa1e5d7c8a7077e5dd880.png\" alt=\"单体应用架构\"></p>\n<p>我们公司最早的时候都是PHP实现的单体应用，比如生活作风的H5商城，得到的V3。这张图就是我们得到的早期架构，当时所有的业务逻辑实现全部在V3当中，然后DCAPI封装了与数据库的交互。这就是一个典型的单体应用架构。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_c45a152965f8ec10d45b2f67fad7220d.png\" alt=\"微服务无服务架构g\"></p>\n<p>然后到17年的时候，随着公司人员越来越多以及微服务的兴起，我们也开始进行服务化的改造。但是在进行服务化的时候首先面临的一个问题就是：<strong>当我们把一个单体应用拆成众多微服务之后，每一个服务如何与客户端进行通信？</strong>原来客户端只需要和V3进行对接，现在难道要让客户端分别与这么多服务进行对接么？ 这显然是不可行的。</p>\n<p>所以，实际上这时候我们与所有进行微服务落地工作的团队一样面临微服务的一些痛点。那么解决这些痛点的方式，一般业界通用的是引入一个叫做API网关的组件。也就是这样的微服务架构。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_b997a5f989bc093c0751ac3d37a38083.png\" alt=\"微服务架构\"></p>\n<p>现在我们就可以来回答网关是什么？</p>\n<blockquote>\n<p>API网关一般作为系统与外界联通的入口，在微服务架构中，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。</p>\n</blockquote>\n<h3 id=\"网关的核心功能\"><a href=\"#网关的核心功能\" class=\"headerlink\" title=\"网关的核心功能\"></a>网关的核心功能</h3><ul>\n<li>路由转发</li>\n<li>路由重写</li>\n<li>访问控制</li>\n<li>流量控制</li>\n<li>负载均衡</li>\n<li>健康检查</li>\n<li>服务发现</li>\n<li>熔断降级</li>\n</ul>\n<h3 id=\"网关的设计目标\"><a href=\"#网关的设计目标\" class=\"headerlink\" title=\"网关的设计目标\"></a>网关的设计目标</h3><ul>\n<li><strong>具备Cloud-Native特性</strong></li>\n<li><strong>部署支持无限水平扩展</strong></li>\n<li><strong>高性能，高可用</strong></li>\n<li><strong>开箱即用，功能易扩展</strong></li>\n<li><strong>支持多机房部署</strong></li>\n</ul>\n<h3 id=\"网关的抽象模型\"><a href=\"#网关的抽象模型\" class=\"headerlink\" title=\"网关的抽象模型\"></a>网关的抽象模型</h3><ol>\n<li>应用：一组路由的集合，抽象为应用，一般为一个业务或一条业务线</li>\n<li>路由：归属于应用，定义了可以通过网关访问的路由规则及限流策略</li>\n<li>服务：对应一个真实的后端服务，可以绑定在多个应用的不同路由上</li>\n<li>节点：每个节点即一个后端服务节点，支持监控检查及负载均衡</li>\n</ol>\n<p>这四个模型的关系如下：<br><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_1873872e716aca434fb201ff7183a82a.png\" alt=\"内部模型关系\"></p>\n<h3 id=\"网关的高可用方案\"><a href=\"#网关的高可用方案\" class=\"headerlink\" title=\"网关的高可用方案\"></a>网关的高可用方案</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_513e3adb0aa4a3362b1e651bc71aa15d.png\" alt=\"得到网关高可用方案\"></p>\n<p>我们采用etcd来存储配置，通过ETCD的高可用来保证网关集群的高可用和水平无限扩展。</p>\n<h3 id=\"网关的易扩展设计\"><a href=\"#网关的易扩展设计\" class=\"headerlink\" title=\"网关的易扩展设计\"></a>网关的易扩展设计</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_7d2ee18094781cca3e54b43c991ad24b.png\" alt=\"image.png\"></p>\n<p>我们还是希望整个系统能够具备一定的扩展能力，为了避免调度系统过于复杂，所以我们想采用类似Gin框架中间件的形式来实现易扩展。这样每个请求进来之后会穿过所有的中间件，中间件也就可以在这个过程中对其进行操作控制。<br><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_3ac9277f62bcaaa58a64383ca8c3e97f.png\" alt=\"image.png\"></p>\n<p>Gin框架中间件的巧妙之处主要在于通过Context的Next方法进行自调用实现了一个拦截器。这样，不论在中间件中是否调用了Next都不会影响中间件的执行顺序。如果看代码不好理解，可以看下面这两张图。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_478c92e973f783ae8704f8ab3a05183b.png\" alt=\"中间件内部不调用Next\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_9b0b2ae60182518bf450b6d0f80d6b33.png\" alt=\"中间件内部调用Next\"></p>\n<h3 id=\"网关的内部组件\"><a href=\"#网关的内部组件\" class=\"headerlink\" title=\"网关的内部组件\"></a>网关的内部组件</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_995dd1ac9e9b5c3da7026cd8848e76a8.png\" alt=\"内部组件调用关系\"></p>\n<p>最终，在易扩展、高可用的基础上，我们在系统内部实现了上图这样的内部结构。</p>\n<ol>\n<li><strong>APIServer负责提供配置变更的接口</strong></li>\n<li><strong>当它收到配置变更请求时将配置数据写入ETCD</strong></li>\n<li><strong>由Watcher组件对ETCD进行watch并把最新的数据映射到Model上，同时编译中间件的HandlerChain</strong></li>\n<li><strong>代理服务器负责接收需要转发的请求，开始执行HandlerChain</strong></li>\n</ol>\n<h2 id=\"Golang高性能系统实战\"><a href=\"#Golang高性能系统实战\" class=\"headerlink\" title=\"Golang高性能系统实战\"></a>Golang高性能系统实战</h2><p>** 工具：**</p>\n<ul>\n<li>Jmeter：用于发起压测流量</li>\n<li>runtime/pprof：采集程序（非 Server）的运行数据进行分析</li>\n<li>net/http/pprof：采集 HTTP Server 的运行时数据进行分析</li>\n<li>go tool pprof bin/server <a href=\"http://10.2.0.2:8088/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://10.2.0.2:8088/debug/pprof/profile</a></li>\n<li>go-torch -u <a href=\"http://10.2.0.2:8088/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://10.2.0.2:8088/debug/pprof/profile</a> -f slice.svg</li>\n</ul>\n<p>** 环境：**</p>\n<ul>\n<li>压测机：8C16G</li>\n<li>API网关：4C8G</li>\n<li>系统：Centos7</li>\n</ul>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_0afe549f4844c4704d7951492b90289e.png\" alt=\"Go反向代理服务器\"><br>反向代理是网关的基础功能，所以我们首先就对Golang实现的反向代理做了压测，如上图采用Golang官方的net.http包实现。经过多次压测验证，在4C8G的服务器上只能压到19000+，将近两万QPS。这结果令我们很愕然，因为大家都知道Golang的并发处理能力是不弱的，所以我们又单独对Golang实现的HTTPServer进行了压测，实现代码如下图。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_85bb90f0a02994f08c77eb3007f00921.png\" alt=\"GoHTTP服务器\"></p>\n<p>最终压出了88000+的QPS，这结果才令人满意。那么我们就分析，Golang的http.Client性能可能远低于Server。我们都知道Golang社区除了官方的net.http包还有一个fasthttp，那么能不能使用fasthttp来替代反向代理中的Client部分呢。见过反复验证，也是可以的。最终我们压出了这两张火焰图。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_0cda12b0b3b1fd0a5254999bcda1e83e.png\" alt=\"nethttp反向代理：19343QPS\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_6442a094e4f719b502bf6801d1432f09.png\" alt=\"fasthttp反向代理：45654QPS\"></p>\n<h3 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_dcc63629c6c545d8fd4848f5dc15ede3.png\" alt=\"路由重写正则测试\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_bfa7789824669bf871ebccae2416cd96.png\" alt=\"路由重写正则测试结果\"></p>\n<p><strong>Tips: 在热点代码中避免使用正则，如果无法避免，那么一定要进行预编译。</strong></p>\n<h3 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_4205efe3bc8bd61b8a7ee1265add951b.png\" alt=\"多字符串拼接测试\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_99a70ebcb2591dbea9483de304af868e.png\" alt=\"多字符串拼接测试结果\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_c43fc59b5ab8ac26c534aa1bb712248f.png\" alt=\"单字符拼接测试\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_9b46064a7b1474f084617e04e1d7f5b4.png\" alt=\"单字符拼接测试结果\"></p>\n<p><strong>Tips1：单次调用时，操作符+ &gt; strings.Join &gt;= bytes.Buffer &gt; fmt.Sprintf</strong></p>\n<p><strong>Tips2：多次调用时，bytes.Buffer &gt;= strings.Join &gt; 操作符+ &gt; fmt.Sprintf</strong></p>\n<h3 id=\"频繁创建对象-Vs-复用对象\"><a href=\"#频繁创建对象-Vs-复用对象\" class=\"headerlink\" title=\"频繁创建对象 Vs 复用对象\"></a>频繁创建对象 Vs 复用对象</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_f7890f002b341d5dc9cec25c880baca9.png\" alt=\"频繁创建对象\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_089cb3989e0df932465c69b2f0f4de67.png\" alt=\"使用sync.Pool复用对象后\"></p>\n<p>可以看到明显的提升，所以在热点代码中如果有创建对象的操作，要尽量进行复用。</p>\n<h3 id=\"Slice查询-Vs-Map查询\"><a href=\"#Slice查询-Vs-Map查询\" class=\"headerlink\" title=\"Slice查询 Vs Map查询\"></a>Slice查询 Vs Map查询</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_70d8f685f8c6286a961eb21e23fe8290.png\" alt=\"Slice和Map查询对比测试\"></p>\n<p> <img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_51c78c45274095c6fb8e2fe982a7c124.png\" alt=\"Slice和Map查询对比测试结果\"></p>\n<p>Map查询的时间复杂度为O1，而Slice查询的时间复杂度为On，我们直观上理解Map肯定是比Slice快的。但是实际的情况并不是那么绝对，可以看到上面的例子中，当成员数量为10时我们遍历整个slice的速度都比map的一次查询快。经过研究map底层代码，我们发现这是因为map底层还有hash的操作。</p>\n<p>所以，最终经过我们测试，在不考虑key大小的情况下，成员数量小于25时slice的性能要好于map。</p>\n<h3 id=\"高性能总结\"><a href=\"#高性能总结\" class=\"headerlink\" title=\"高性能总结\"></a>高性能总结</h3><ul>\n<li><strong>避免反射和锁的使用</strong></li>\n<li><strong>避免创建过多的对象（避免GC）</strong></li>\n<li><strong>尽量复用已经创建的对象（sync.Pool）</strong></li>\n<li><strong>避免进行[]byte和string的转换</strong></li>\n<li><strong>设置GOGC用内存换CPU时间</strong></li>\n<li><strong>对于精度不高的时间自己实现时钟</strong></li>\n<li><strong>数据量较少时用slice替代map</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"API网关是什么？\"><a href=\"#API网关是什么？\" class=\"headerlink\" title=\"API网关是什么？\"></a>API网关是什么？</h2><p>要回答这个问题我们需要先了解下我们得到的架构变迁。<br><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_7f178cd4397fa1e5d7c8a7077e5dd880.png\" alt=\"单体应用架构\"></p>\n<p>我们公司最早的时候都是PHP实现的单体应用，比如生活作风的H5商城，得到的V3。这张图就是我们得到的早期架构，当时所有的业务逻辑实现全部在V3当中，然后DCAPI封装了与数据库的交互。这就是一个典型的单体应用架构。</p>","more":"<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_c45a152965f8ec10d45b2f67fad7220d.png\" alt=\"微服务无服务架构g\"></p>\n<p>然后到17年的时候，随着公司人员越来越多以及微服务的兴起，我们也开始进行服务化的改造。但是在进行服务化的时候首先面临的一个问题就是：<strong>当我们把一个单体应用拆成众多微服务之后，每一个服务如何与客户端进行通信？</strong>原来客户端只需要和V3进行对接，现在难道要让客户端分别与这么多服务进行对接么？ 这显然是不可行的。</p>\n<p>所以，实际上这时候我们与所有进行微服务落地工作的团队一样面临微服务的一些痛点。那么解决这些痛点的方式，一般业界通用的是引入一个叫做API网关的组件。也就是这样的微服务架构。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_b997a5f989bc093c0751ac3d37a38083.png\" alt=\"微服务架构\"></p>\n<p>现在我们就可以来回答网关是什么？</p>\n<blockquote>\n<p>API网关一般作为系统与外界联通的入口，在微服务架构中，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。</p>\n</blockquote>\n<h3 id=\"网关的核心功能\"><a href=\"#网关的核心功能\" class=\"headerlink\" title=\"网关的核心功能\"></a>网关的核心功能</h3><ul>\n<li>路由转发</li>\n<li>路由重写</li>\n<li>访问控制</li>\n<li>流量控制</li>\n<li>负载均衡</li>\n<li>健康检查</li>\n<li>服务发现</li>\n<li>熔断降级</li>\n</ul>\n<h3 id=\"网关的设计目标\"><a href=\"#网关的设计目标\" class=\"headerlink\" title=\"网关的设计目标\"></a>网关的设计目标</h3><ul>\n<li><strong>具备Cloud-Native特性</strong></li>\n<li><strong>部署支持无限水平扩展</strong></li>\n<li><strong>高性能，高可用</strong></li>\n<li><strong>开箱即用，功能易扩展</strong></li>\n<li><strong>支持多机房部署</strong></li>\n</ul>\n<h3 id=\"网关的抽象模型\"><a href=\"#网关的抽象模型\" class=\"headerlink\" title=\"网关的抽象模型\"></a>网关的抽象模型</h3><ol>\n<li>应用：一组路由的集合，抽象为应用，一般为一个业务或一条业务线</li>\n<li>路由：归属于应用，定义了可以通过网关访问的路由规则及限流策略</li>\n<li>服务：对应一个真实的后端服务，可以绑定在多个应用的不同路由上</li>\n<li>节点：每个节点即一个后端服务节点，支持监控检查及负载均衡</li>\n</ol>\n<p>这四个模型的关系如下：<br><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_1873872e716aca434fb201ff7183a82a.png\" alt=\"内部模型关系\"></p>\n<h3 id=\"网关的高可用方案\"><a href=\"#网关的高可用方案\" class=\"headerlink\" title=\"网关的高可用方案\"></a>网关的高可用方案</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_513e3adb0aa4a3362b1e651bc71aa15d.png\" alt=\"得到网关高可用方案\"></p>\n<p>我们采用etcd来存储配置，通过ETCD的高可用来保证网关集群的高可用和水平无限扩展。</p>\n<h3 id=\"网关的易扩展设计\"><a href=\"#网关的易扩展设计\" class=\"headerlink\" title=\"网关的易扩展设计\"></a>网关的易扩展设计</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_7d2ee18094781cca3e54b43c991ad24b.png\" alt=\"image.png\"></p>\n<p>我们还是希望整个系统能够具备一定的扩展能力，为了避免调度系统过于复杂，所以我们想采用类似Gin框架中间件的形式来实现易扩展。这样每个请求进来之后会穿过所有的中间件，中间件也就可以在这个过程中对其进行操作控制。<br><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_3ac9277f62bcaaa58a64383ca8c3e97f.png\" alt=\"image.png\"></p>\n<p>Gin框架中间件的巧妙之处主要在于通过Context的Next方法进行自调用实现了一个拦截器。这样，不论在中间件中是否调用了Next都不会影响中间件的执行顺序。如果看代码不好理解，可以看下面这两张图。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_478c92e973f783ae8704f8ab3a05183b.png\" alt=\"中间件内部不调用Next\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_9b0b2ae60182518bf450b6d0f80d6b33.png\" alt=\"中间件内部调用Next\"></p>\n<h3 id=\"网关的内部组件\"><a href=\"#网关的内部组件\" class=\"headerlink\" title=\"网关的内部组件\"></a>网关的内部组件</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_995dd1ac9e9b5c3da7026cd8848e76a8.png\" alt=\"内部组件调用关系\"></p>\n<p>最终，在易扩展、高可用的基础上，我们在系统内部实现了上图这样的内部结构。</p>\n<ol>\n<li><strong>APIServer负责提供配置变更的接口</strong></li>\n<li><strong>当它收到配置变更请求时将配置数据写入ETCD</strong></li>\n<li><strong>由Watcher组件对ETCD进行watch并把最新的数据映射到Model上，同时编译中间件的HandlerChain</strong></li>\n<li><strong>代理服务器负责接收需要转发的请求，开始执行HandlerChain</strong></li>\n</ol>\n<h2 id=\"Golang高性能系统实战\"><a href=\"#Golang高性能系统实战\" class=\"headerlink\" title=\"Golang高性能系统实战\"></a>Golang高性能系统实战</h2><p>** 工具：**</p>\n<ul>\n<li>Jmeter：用于发起压测流量</li>\n<li>runtime/pprof：采集程序（非 Server）的运行数据进行分析</li>\n<li>net/http/pprof：采集 HTTP Server 的运行时数据进行分析</li>\n<li>go tool pprof bin/server <a href=\"http://10.2.0.2:8088/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://10.2.0.2:8088/debug/pprof/profile</a></li>\n<li>go-torch -u <a href=\"http://10.2.0.2:8088/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://10.2.0.2:8088/debug/pprof/profile</a> -f slice.svg</li>\n</ul>\n<p>** 环境：**</p>\n<ul>\n<li>压测机：8C16G</li>\n<li>API网关：4C8G</li>\n<li>系统：Centos7</li>\n</ul>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_0afe549f4844c4704d7951492b90289e.png\" alt=\"Go反向代理服务器\"><br>反向代理是网关的基础功能，所以我们首先就对Golang实现的反向代理做了压测，如上图采用Golang官方的net.http包实现。经过多次压测验证，在4C8G的服务器上只能压到19000+，将近两万QPS。这结果令我们很愕然，因为大家都知道Golang的并发处理能力是不弱的，所以我们又单独对Golang实现的HTTPServer进行了压测，实现代码如下图。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_85bb90f0a02994f08c77eb3007f00921.png\" alt=\"GoHTTP服务器\"></p>\n<p>最终压出了88000+的QPS，这结果才令人满意。那么我们就分析，Golang的http.Client性能可能远低于Server。我们都知道Golang社区除了官方的net.http包还有一个fasthttp，那么能不能使用fasthttp来替代反向代理中的Client部分呢。见过反复验证，也是可以的。最终我们压出了这两张火焰图。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_0cda12b0b3b1fd0a5254999bcda1e83e.png\" alt=\"nethttp反向代理：19343QPS\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_6442a094e4f719b502bf6801d1432f09.png\" alt=\"fasthttp反向代理：45654QPS\"></p>\n<h3 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_dcc63629c6c545d8fd4848f5dc15ede3.png\" alt=\"路由重写正则测试\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_bfa7789824669bf871ebccae2416cd96.png\" alt=\"路由重写正则测试结果\"></p>\n<p><strong>Tips: 在热点代码中避免使用正则，如果无法避免，那么一定要进行预编译。</strong></p>\n<h3 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_4205efe3bc8bd61b8a7ee1265add951b.png\" alt=\"多字符串拼接测试\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_99a70ebcb2591dbea9483de304af868e.png\" alt=\"多字符串拼接测试结果\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_c43fc59b5ab8ac26c534aa1bb712248f.png\" alt=\"单字符拼接测试\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_9b46064a7b1474f084617e04e1d7f5b4.png\" alt=\"单字符拼接测试结果\"></p>\n<p><strong>Tips1：单次调用时，操作符+ &gt; strings.Join &gt;= bytes.Buffer &gt; fmt.Sprintf</strong></p>\n<p><strong>Tips2：多次调用时，bytes.Buffer &gt;= strings.Join &gt; 操作符+ &gt; fmt.Sprintf</strong></p>\n<h3 id=\"频繁创建对象-Vs-复用对象\"><a href=\"#频繁创建对象-Vs-复用对象\" class=\"headerlink\" title=\"频繁创建对象 Vs 复用对象\"></a>频繁创建对象 Vs 复用对象</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_f7890f002b341d5dc9cec25c880baca9.png\" alt=\"频繁创建对象\"></p>\n<p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_089cb3989e0df932465c69b2f0f4de67.png\" alt=\"使用sync.Pool复用对象后\"></p>\n<p>可以看到明显的提升，所以在热点代码中如果有创建对象的操作，要尽量进行复用。</p>\n<h3 id=\"Slice查询-Vs-Map查询\"><a href=\"#Slice查询-Vs-Map查询\" class=\"headerlink\" title=\"Slice查询 Vs Map查询\"></a>Slice查询 Vs Map查询</h3><p><img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_70d8f685f8c6286a961eb21e23fe8290.png\" alt=\"Slice和Map查询对比测试\"></p>\n<p> <img src=\"https://piccdn.luojilab.com/fe/blog/20190918/upload_51c78c45274095c6fb8e2fe982a7c124.png\" alt=\"Slice和Map查询对比测试结果\"></p>\n<p>Map查询的时间复杂度为O1，而Slice查询的时间复杂度为On，我们直观上理解Map肯定是比Slice快的。但是实际的情况并不是那么绝对，可以看到上面的例子中，当成员数量为10时我们遍历整个slice的速度都比map的一次查询快。经过研究map底层代码，我们发现这是因为map底层还有hash的操作。</p>\n<p>所以，最终经过我们测试，在不考虑key大小的情况下，成员数量小于25时slice的性能要好于map。</p>\n<h3 id=\"高性能总结\"><a href=\"#高性能总结\" class=\"headerlink\" title=\"高性能总结\"></a>高性能总结</h3><ul>\n<li><strong>避免反射和锁的使用</strong></li>\n<li><strong>避免创建过多的对象（避免GC）</strong></li>\n<li><strong>尽量复用已经创建的对象（sync.Pool）</strong></li>\n<li><strong>避免进行[]byte和string的转换</strong></li>\n<li><strong>设置GOGC用内存换CPU时间</strong></li>\n<li><strong>对于精度不高的时间自己实现时钟</strong></li>\n<li><strong>数据量较少时用slice替代map</strong></li>\n</ul>"},{"title":"【八里庄技术沙龙-15 期】得到安卓客户端的工程架构实践","date":"2019-11-06T16:00:00.000Z","author":"liushuo","toc":true,"thumbnail":"https://piccdn.luojilab.com/fe-oss/default/MTU3MzQ0NjI1NDI4.png","_content":"\n大家好，我是刘硕，来自得到安卓客户端。主要负责业务架构方向的工程效能提升相关工作。我们希望，通过对工程架构的改造升级，践行工程化方面的一些通用实践。使安卓团队在研发效率和研发体验上得到整体提升，提高app稳定性。\n\n最近两年，我们在工程架构方面有了一些成果，主要围绕着工程架构，开发架构相关方面做了很多工作，大概分为两部分内容：组件化和mvvm开发架构。\n\n<!-- more -->\n\n#### 组件化拆分\n组件化的概念其实理解上很简单，所谓组件化，就是把一个功能完整的app拆分成多个子模块，每个子模块可以独立编译和运行，也可以将这些子模块任意组合成一个新的app，子模块之间不互相依赖，但可以相互交互。\n\n##### 单体工程架构\n一般app的开发早期，团队的重心并不在开发架构的选型上。主要也是因为早期的项目比较小，大家更关注\n多快好省的完成任务，对于如何复用，如何解耦没有过度考虑。如下图是得到早期的工程架构。\n\n随着版本迭代，app的功能越来越多，项目结构逐渐也演变成了一个庞大的单体工程，内部依赖错综复杂。\n\n当然，这会带来很多很多问题。\n\n第一、逻辑复杂，不易理解。想要熟悉掌握所有功能需要耗费大量的时间和精力，不仅如此，对于新人熟悉业务来说，也会给他们带来巨大的挑战。\n\n第二、不同的业务功能耦合严重。导致面对一个修改，我们无法界定它的影响范围，牵一发，动全身。\n\n第三、构建时间越来越长，降低了研发效率。\n\n![Untitled Diagram (23).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_3087dd52ede277f8bd91fe9366be7b48.png) \n\n##### 单体工程组件化拆分\n为了解决单体工程存在的这些问题，我们开始了工程的组件化改造。优先梳理各个业务模块，将不同业务模块\n的代码和资源放到不同的业务子工程中，这些作为组件化工程中的业务组件。对于不同业务组件之间公用的代码和资源，下沉到基础子工程中，作为业务子工程的依赖。独立壳工程app，它的主要任务是负责组件的集成打包，所以尽量不要包含业务逻辑。组件化拆分如下图：\n\n![Untitled Diagram (26).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_e98c87a323e87aa1e305202c87a3fc6d.png)\n\n##### 组件间通信\n工程组件化拆分结束后，我们遇到的另一个问题是如何进行组件间的方法调用，因为业务组件之间是完全解耦的，所以不能简单的通过引用的方式进行调用。\n\n![Untitled Diagram (21).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_d8506a2f2d326d503d3d70de223f499d.png)\n\n我们为业务组件之间通信提供了两种方式。页面路由和服务调用。从实现上来说，这两种方式都是遵循协议下沉的原则，将服务协议下沉到通信组件。\n\napp启动后，组件工程分别将自己提供的服务和页面路由注册到通信组件。如果某个组件\n希望调用其他组件提供的服务或路由到其他组件，就可以通过查询通信组件中的注册信息，完成组件间通信的\n任务。\n\n##### 组件单独调试运行\n如果我们集成所有组件构建项目，时间会很长，平均大概10分钟左右，为了解决这个问题。我们提出了单组件调试\n运行的方案。\n\n![Untitled Diagram (27).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_f765bb0788e2e7f8b36078850af3b63a.png)\n\n通过自定义组件构建脚本，每个业务组件都可以作为壳工程独立运行。并且可以集成其他依赖的组件并进行组件间通信。通过这种方式，编译效率得到了很大的提升，我们运行单组件工程，构建时间只需要40秒左右。\n\n##### 组件化2.0\n组件化用了大概一年时间，我们遇到了新的问题。大家有时希望全组件集成运行app，正如之前的解决方案，我们并没有针对这种情况的优化手段，所以就导致了每天还是浪费了很多时间在编译构建上。\n\n其实，gradle在构建项目时，确实是支持增量编译的，但有时改动一个文件，会导致项目构建时间超过10分钟。我们需要尽快解决这个问题，不然每天团队所有人在构建上浪费的总时间，我粗略的算了下  7个人*5次*10分钟，超过5个小时，还是比较吓人的。\n\n##### 全组件集成构建流程分析\n下图简要的描述了我们集成构建app的时候需要执行的核心环节。通过分析，我们发现构建时的一些问题。每次编译项目,所有组件工程都会重新执行同样的编译构建流程，所以，如果组件集成可以直接使用aar的方式，那么这些执行的重复构建\n就可以节省下来。编译时间上会有很大的提升\n\n![Untitled Diagram (33).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_c19f37fdc74d41101463a4578f204ae5.png)\n\n##### 组件打包aar\n所以，顺着前面的思路，我们构建了一套完整的组件打包体系。\n\n![Untitled Diagram (38).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_16304fe99e16eee44a9ea846855bb2f7.png)\n\nci 负责实时监控git仓库代码变动,当开发人员提交了代码，CI 自动开始执行组件打包脚本。打包脚本会分析出所有包含代码变动的组件，并计算出组件对应的版本和maven仓库信息。使用这些信息，执行每个组件的gradle打包任务，并将打包成功后的产出物 aar 上传到组件仓库。\n\n##### 组件化2.0集成构建\n组件有了aar的管理方式，我们的全组件集成构建逻辑就可以进一步得到升级。\n\n![Untitled Diagram (36).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_d616f84d06a018d87976dd1aacba49f5.png)\n\n执行全组件集成构建时，首先解析工程下的组件化配置文件。该配置文件中明确标明了某个组件的依赖方式是aar还是源码，及aar的依赖版本和仓库信息。然后构建脚本就会根据这些信息，灵活的配置组件依赖并集成构建app。\n\n使用aar的集成方式，避免了组件的再次编译，全量编译时间从之前的10分钟降低为现在的2分半左右\n\n#### MVVM 开发架构\n这部分，主要包含一些我们在选型开发架构上的心得和实践。如下图描述，工程组件化架构搭建完成后，我们的编译效率和项目管理方式得到了很大的改进。\n\n但是，组件内的业务开发还在采用比较粗放的模式。Controller作为业务功能组织的核心，完成了大概80%的工作量，内部耦合十分严重，极大的限制了代码的复用能力，导致研发效率底下。\n\n![Untitled Diagram (49).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_500734ffdd71d031dfa89c4025f85953.png)\n\n##### MVC VS MVP\n\n![Untitled Diagram (83).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_83b0b621659d7633d42742eb8176d09f.png)\n\n为了解决目前以Controller为核心的开发模式带来的代码复用问题,我们对比了常见的三种MVX 架构。\n\n其中，MVC 是开发gui应用程序的经典架构。但是，由于Controller直接持有了View的引用并使用这些引用组织展现逻辑，导致展现逻辑不能很好的被复用。\n\nMVP的出现很好的 解决了MVC中展现逻辑不易复用的问题。MVP中展现交互逻辑完全由Presenter负责，并通过View接口与View通信。\n\n但是MVP也存在一些问题。展现逻辑的复用粒度由View接口的力度决定，而且，当展现逻辑非常复杂，\n就会造成Presenter与View联系过于紧密，限制了复用能力。\n\n##### MVP VS MVVM\n\n![Untitled Diagram (54).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_bc0b779af1c6bc2aee13b3bfbac19920.png)\n\n相对于MVP，MVVM中展现逻辑的复用更为彻底。\nMVVM 中创新的提出了抽象View的概念 ViewModel，ViewModel封装了View的一切状态和行为，但与具体的显示框架，布局规则没有任何关系。\n\n这就使得ViewModel可以满足几乎任何场景下的被复用需求。基于传统的MVVM概念和google 推出的AAC 架构组件，我们开发了一套更符合自己实际情况的MVVM方案.\n\n下面开始详细的介绍我们的MVVM 实践。\n\n##### MVVM 中的依赖原则\n\nMVVM 遵循单向依赖原则，依赖关系从上向下 依次为 View 依赖 ViewModel,ViewModel依赖 Model，不允许跨层依赖。这样的好处是可以使调用依赖关系更加清晰。\n\n沿着依赖方向的通信方式以直接方法调用为主。由于不能违背依赖原则，从下向上的通信主要借助观察者模式实现，上层注册观察者，下层需要通信时，触发观察者回调。\n\n![Untitled Diagram (57).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_908f888db681263a44229d3f899f1fe1.png)\n\n##### MVVM 中的类层次\n如下图，MVVM 中View ViewModel Model 都有自己的类层次结构。\n\n其中，View 需要 承载 布局渲染等逻辑，所以Activity， Fragment，ViewHolder 及其子类属于View的角色范畴。\n\nViewModel作为View的抽象表示，分别针对页面和列表item提供了不同的子类实现。\n\nModel中BaseModel类主要封装了网络库相关的方法调用，具体子类可以根据不同场景，实现不同的需求。\n\n![Untitled Diagram (81).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_5e0f7c3e0e36df4358644bbf3e9977cd.png)\n\n##### MVVM 在首页的实践\n\n![Untitled Diagram (82).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_f61fa909899fbfa3a6f4efdafb5c8d3f.png)\n\n首页算是得到app中比较特殊的页面。最外层结构是一个列表，列表中每个item 独立请求需要显示的业务数据。\n\n我们在使用mvvm架构整个页面的过程中，确实遇到了一些问题。\n这些问题，大概包含了三个方面的内容。\n\n问题1：如何复用逻辑\n面向对象开发中，复用的主要手段包括组合还有继承\n\n那么，mvvm中，展现逻辑和数据逻辑的复用，也不外乎这两种手段。\n\n例如，得到app 首页中 推荐课程，推荐听书都包含 负反馈和底部推荐标签功能，我们将这两个功能抽象到TagsItemVM 中，课程，听书VM分别继承TagsItemVM，这样就可以非常容易的实现这两个展现交互逻辑的复用。\n\n![Untitled Diagram (86).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_4aea96b8fbf0c310c141478c81bbf034.png)\n\n问题2：ViewModel如何感知View的生命周期变化\n\n![Untitled Diagram (95).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_fce79cfa2bb995e19bc87177755d7170.png)\n\n在mvvm中，View直接持有ViewModel的引用，所以，当View的生命周期发生变化，ViewModel对应的生命周期函数会立即被调用。通过这种方式，我们确保ViewModel与View的\n生命周期能够保持同步\n\n但由于页面Activity，Fragment和列表ItemViewHolder具有不同的生命周期形式，所以他们对应的ViewModel会有不同的生命周期回调。\n\nViewModel内部使用一个对象维护自身的生命周期状态，当ViewModel与View绑定后，ViewModel的生命周期 活跃，当ViewModel与View解除绑定后，ViewModel的生命周期不活跃。\n\n此外，ViewModel生命周期的活跃状态受其parent ViewModel的生命周期影响，当parent ViewModel 不活跃，当前ViewModel的生命周期同样已经不活跃。\n\n通过感知ViewModel生命周期的活跃状态,在生命周期不活跃时，执行某些资源的清理操作，可以有效防止内存泄露。\n\n![Untitled Diagram (75).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_8a5dad97b4785a5b386659f6c81ed694.png)code block\n\n问题3：ViewModel之间如何互相通信\n\n![Untitled Diagram (61).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_ed373b1658fa4ff4ba9c914acfa5c5fc.png)\n\nViewModel之间通信主要依赖于LifecycleBus，这是一种特殊的事件总线。\n\nViewModel不活跃时，由于会断开与总线的链接，所以不会收到总线上的事件。\n\n这样的设计主要考虑到 viewmodel 已经不在与View有绑定关系，ViewModel继续关注View中的事件通知是没有意义的，还可能带来其他未知的问题。\n\n这中方案还带来了另外的好处，使event的派发效率更好，因为事件只会派发到活跃的ViewModel\n\n##### 消除模板代码，简化开发\n\n![Untitled Diagram (78).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_735be772fe5abd4942e14d8d813f5c9e.png)\n\n如上图，传统的MVVM实现中，如果我们希望实现一个列表效果，至少需要新创建四个文件，view adapter，item view hodler，item view model，layout file。但是，view adapter和view holder中主要是一些模板代码，几乎没有有效的业务逻辑。\n\n所以，我们为了解决这个问题，在MVVM framework中提供三个基础设施类，通用的view adapter，通用的view holder，bindItemVH注解。\n\n这样，我们再实现同样的列表效果，只需要创建两个文件 item view model和layout file。\n\n然后使用注解关联这两个文件。运行时，通用的view adapter 根据注解指定的关联关系，就可以将相关的ui渲染到屏幕上。\n\n##### 我们的收获\n目前我们已经上线首页，已购的mvvm改造，消息中心，问答，搜索，课程的mvvm方案也已经完成。\n\n通过mvvm开发架构的升级，我们的程序结构更加清晰，代码可读性更高，通过运行时注解的支持，彻底消除了不必要的模板代码,使我们的开发更加顺畅。\n\n#### 未来规划\n未来，我们想尝试的方向有组件平台化，插件化，跨平台，希望通过这些手段，进一步提升团队协作效能，提高app研发效率，和用户体验\n\n以上就是我们最近两年在工程架构上的努力，谢谢大家\n","source":"_posts/Technical/ddmvvm-android.md","raw":"title: 【八里庄技术沙龙-15 期】得到安卓客户端的工程架构实践\ndate: 2019-11-07\nauthor: liushuo\ntoc: true\nthumbnail: https://piccdn.luojilab.com/fe-oss/default/MTU3MzQ0NjI1NDI4.png\ntag: \n  - 八里庄技术沙龙 \n  - Android\ncategories: \n  - 八里庄技术沙龙\n\n---\n\n大家好，我是刘硕，来自得到安卓客户端。主要负责业务架构方向的工程效能提升相关工作。我们希望，通过对工程架构的改造升级，践行工程化方面的一些通用实践。使安卓团队在研发效率和研发体验上得到整体提升，提高app稳定性。\n\n最近两年，我们在工程架构方面有了一些成果，主要围绕着工程架构，开发架构相关方面做了很多工作，大概分为两部分内容：组件化和mvvm开发架构。\n\n<!-- more -->\n\n#### 组件化拆分\n组件化的概念其实理解上很简单，所谓组件化，就是把一个功能完整的app拆分成多个子模块，每个子模块可以独立编译和运行，也可以将这些子模块任意组合成一个新的app，子模块之间不互相依赖，但可以相互交互。\n\n##### 单体工程架构\n一般app的开发早期，团队的重心并不在开发架构的选型上。主要也是因为早期的项目比较小，大家更关注\n多快好省的完成任务，对于如何复用，如何解耦没有过度考虑。如下图是得到早期的工程架构。\n\n随着版本迭代，app的功能越来越多，项目结构逐渐也演变成了一个庞大的单体工程，内部依赖错综复杂。\n\n当然，这会带来很多很多问题。\n\n第一、逻辑复杂，不易理解。想要熟悉掌握所有功能需要耗费大量的时间和精力，不仅如此，对于新人熟悉业务来说，也会给他们带来巨大的挑战。\n\n第二、不同的业务功能耦合严重。导致面对一个修改，我们无法界定它的影响范围，牵一发，动全身。\n\n第三、构建时间越来越长，降低了研发效率。\n\n![Untitled Diagram (23).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_3087dd52ede277f8bd91fe9366be7b48.png) \n\n##### 单体工程组件化拆分\n为了解决单体工程存在的这些问题，我们开始了工程的组件化改造。优先梳理各个业务模块，将不同业务模块\n的代码和资源放到不同的业务子工程中，这些作为组件化工程中的业务组件。对于不同业务组件之间公用的代码和资源，下沉到基础子工程中，作为业务子工程的依赖。独立壳工程app，它的主要任务是负责组件的集成打包，所以尽量不要包含业务逻辑。组件化拆分如下图：\n\n![Untitled Diagram (26).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_e98c87a323e87aa1e305202c87a3fc6d.png)\n\n##### 组件间通信\n工程组件化拆分结束后，我们遇到的另一个问题是如何进行组件间的方法调用，因为业务组件之间是完全解耦的，所以不能简单的通过引用的方式进行调用。\n\n![Untitled Diagram (21).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_d8506a2f2d326d503d3d70de223f499d.png)\n\n我们为业务组件之间通信提供了两种方式。页面路由和服务调用。从实现上来说，这两种方式都是遵循协议下沉的原则，将服务协议下沉到通信组件。\n\napp启动后，组件工程分别将自己提供的服务和页面路由注册到通信组件。如果某个组件\n希望调用其他组件提供的服务或路由到其他组件，就可以通过查询通信组件中的注册信息，完成组件间通信的\n任务。\n\n##### 组件单独调试运行\n如果我们集成所有组件构建项目，时间会很长，平均大概10分钟左右，为了解决这个问题。我们提出了单组件调试\n运行的方案。\n\n![Untitled Diagram (27).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_f765bb0788e2e7f8b36078850af3b63a.png)\n\n通过自定义组件构建脚本，每个业务组件都可以作为壳工程独立运行。并且可以集成其他依赖的组件并进行组件间通信。通过这种方式，编译效率得到了很大的提升，我们运行单组件工程，构建时间只需要40秒左右。\n\n##### 组件化2.0\n组件化用了大概一年时间，我们遇到了新的问题。大家有时希望全组件集成运行app，正如之前的解决方案，我们并没有针对这种情况的优化手段，所以就导致了每天还是浪费了很多时间在编译构建上。\n\n其实，gradle在构建项目时，确实是支持增量编译的，但有时改动一个文件，会导致项目构建时间超过10分钟。我们需要尽快解决这个问题，不然每天团队所有人在构建上浪费的总时间，我粗略的算了下  7个人*5次*10分钟，超过5个小时，还是比较吓人的。\n\n##### 全组件集成构建流程分析\n下图简要的描述了我们集成构建app的时候需要执行的核心环节。通过分析，我们发现构建时的一些问题。每次编译项目,所有组件工程都会重新执行同样的编译构建流程，所以，如果组件集成可以直接使用aar的方式，那么这些执行的重复构建\n就可以节省下来。编译时间上会有很大的提升\n\n![Untitled Diagram (33).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_c19f37fdc74d41101463a4578f204ae5.png)\n\n##### 组件打包aar\n所以，顺着前面的思路，我们构建了一套完整的组件打包体系。\n\n![Untitled Diagram (38).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_16304fe99e16eee44a9ea846855bb2f7.png)\n\nci 负责实时监控git仓库代码变动,当开发人员提交了代码，CI 自动开始执行组件打包脚本。打包脚本会分析出所有包含代码变动的组件，并计算出组件对应的版本和maven仓库信息。使用这些信息，执行每个组件的gradle打包任务，并将打包成功后的产出物 aar 上传到组件仓库。\n\n##### 组件化2.0集成构建\n组件有了aar的管理方式，我们的全组件集成构建逻辑就可以进一步得到升级。\n\n![Untitled Diagram (36).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_d616f84d06a018d87976dd1aacba49f5.png)\n\n执行全组件集成构建时，首先解析工程下的组件化配置文件。该配置文件中明确标明了某个组件的依赖方式是aar还是源码，及aar的依赖版本和仓库信息。然后构建脚本就会根据这些信息，灵活的配置组件依赖并集成构建app。\n\n使用aar的集成方式，避免了组件的再次编译，全量编译时间从之前的10分钟降低为现在的2分半左右\n\n#### MVVM 开发架构\n这部分，主要包含一些我们在选型开发架构上的心得和实践。如下图描述，工程组件化架构搭建完成后，我们的编译效率和项目管理方式得到了很大的改进。\n\n但是，组件内的业务开发还在采用比较粗放的模式。Controller作为业务功能组织的核心，完成了大概80%的工作量，内部耦合十分严重，极大的限制了代码的复用能力，导致研发效率底下。\n\n![Untitled Diagram (49).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_500734ffdd71d031dfa89c4025f85953.png)\n\n##### MVC VS MVP\n\n![Untitled Diagram (83).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_83b0b621659d7633d42742eb8176d09f.png)\n\n为了解决目前以Controller为核心的开发模式带来的代码复用问题,我们对比了常见的三种MVX 架构。\n\n其中，MVC 是开发gui应用程序的经典架构。但是，由于Controller直接持有了View的引用并使用这些引用组织展现逻辑，导致展现逻辑不能很好的被复用。\n\nMVP的出现很好的 解决了MVC中展现逻辑不易复用的问题。MVP中展现交互逻辑完全由Presenter负责，并通过View接口与View通信。\n\n但是MVP也存在一些问题。展现逻辑的复用粒度由View接口的力度决定，而且，当展现逻辑非常复杂，\n就会造成Presenter与View联系过于紧密，限制了复用能力。\n\n##### MVP VS MVVM\n\n![Untitled Diagram (54).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_bc0b779af1c6bc2aee13b3bfbac19920.png)\n\n相对于MVP，MVVM中展现逻辑的复用更为彻底。\nMVVM 中创新的提出了抽象View的概念 ViewModel，ViewModel封装了View的一切状态和行为，但与具体的显示框架，布局规则没有任何关系。\n\n这就使得ViewModel可以满足几乎任何场景下的被复用需求。基于传统的MVVM概念和google 推出的AAC 架构组件，我们开发了一套更符合自己实际情况的MVVM方案.\n\n下面开始详细的介绍我们的MVVM 实践。\n\n##### MVVM 中的依赖原则\n\nMVVM 遵循单向依赖原则，依赖关系从上向下 依次为 View 依赖 ViewModel,ViewModel依赖 Model，不允许跨层依赖。这样的好处是可以使调用依赖关系更加清晰。\n\n沿着依赖方向的通信方式以直接方法调用为主。由于不能违背依赖原则，从下向上的通信主要借助观察者模式实现，上层注册观察者，下层需要通信时，触发观察者回调。\n\n![Untitled Diagram (57).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_908f888db681263a44229d3f899f1fe1.png)\n\n##### MVVM 中的类层次\n如下图，MVVM 中View ViewModel Model 都有自己的类层次结构。\n\n其中，View 需要 承载 布局渲染等逻辑，所以Activity， Fragment，ViewHolder 及其子类属于View的角色范畴。\n\nViewModel作为View的抽象表示，分别针对页面和列表item提供了不同的子类实现。\n\nModel中BaseModel类主要封装了网络库相关的方法调用，具体子类可以根据不同场景，实现不同的需求。\n\n![Untitled Diagram (81).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_5e0f7c3e0e36df4358644bbf3e9977cd.png)\n\n##### MVVM 在首页的实践\n\n![Untitled Diagram (82).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_f61fa909899fbfa3a6f4efdafb5c8d3f.png)\n\n首页算是得到app中比较特殊的页面。最外层结构是一个列表，列表中每个item 独立请求需要显示的业务数据。\n\n我们在使用mvvm架构整个页面的过程中，确实遇到了一些问题。\n这些问题，大概包含了三个方面的内容。\n\n问题1：如何复用逻辑\n面向对象开发中，复用的主要手段包括组合还有继承\n\n那么，mvvm中，展现逻辑和数据逻辑的复用，也不外乎这两种手段。\n\n例如，得到app 首页中 推荐课程，推荐听书都包含 负反馈和底部推荐标签功能，我们将这两个功能抽象到TagsItemVM 中，课程，听书VM分别继承TagsItemVM，这样就可以非常容易的实现这两个展现交互逻辑的复用。\n\n![Untitled Diagram (86).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_4aea96b8fbf0c310c141478c81bbf034.png)\n\n问题2：ViewModel如何感知View的生命周期变化\n\n![Untitled Diagram (95).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_fce79cfa2bb995e19bc87177755d7170.png)\n\n在mvvm中，View直接持有ViewModel的引用，所以，当View的生命周期发生变化，ViewModel对应的生命周期函数会立即被调用。通过这种方式，我们确保ViewModel与View的\n生命周期能够保持同步\n\n但由于页面Activity，Fragment和列表ItemViewHolder具有不同的生命周期形式，所以他们对应的ViewModel会有不同的生命周期回调。\n\nViewModel内部使用一个对象维护自身的生命周期状态，当ViewModel与View绑定后，ViewModel的生命周期 活跃，当ViewModel与View解除绑定后，ViewModel的生命周期不活跃。\n\n此外，ViewModel生命周期的活跃状态受其parent ViewModel的生命周期影响，当parent ViewModel 不活跃，当前ViewModel的生命周期同样已经不活跃。\n\n通过感知ViewModel生命周期的活跃状态,在生命周期不活跃时，执行某些资源的清理操作，可以有效防止内存泄露。\n\n![Untitled Diagram (75).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_8a5dad97b4785a5b386659f6c81ed694.png)code block\n\n问题3：ViewModel之间如何互相通信\n\n![Untitled Diagram (61).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_ed373b1658fa4ff4ba9c914acfa5c5fc.png)\n\nViewModel之间通信主要依赖于LifecycleBus，这是一种特殊的事件总线。\n\nViewModel不活跃时，由于会断开与总线的链接，所以不会收到总线上的事件。\n\n这样的设计主要考虑到 viewmodel 已经不在与View有绑定关系，ViewModel继续关注View中的事件通知是没有意义的，还可能带来其他未知的问题。\n\n这中方案还带来了另外的好处，使event的派发效率更好，因为事件只会派发到活跃的ViewModel\n\n##### 消除模板代码，简化开发\n\n![Untitled Diagram (78).png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_735be772fe5abd4942e14d8d813f5c9e.png)\n\n如上图，传统的MVVM实现中，如果我们希望实现一个列表效果，至少需要新创建四个文件，view adapter，item view hodler，item view model，layout file。但是，view adapter和view holder中主要是一些模板代码，几乎没有有效的业务逻辑。\n\n所以，我们为了解决这个问题，在MVVM framework中提供三个基础设施类，通用的view adapter，通用的view holder，bindItemVH注解。\n\n这样，我们再实现同样的列表效果，只需要创建两个文件 item view model和layout file。\n\n然后使用注解关联这两个文件。运行时，通用的view adapter 根据注解指定的关联关系，就可以将相关的ui渲染到屏幕上。\n\n##### 我们的收获\n目前我们已经上线首页，已购的mvvm改造，消息中心，问答，搜索，课程的mvvm方案也已经完成。\n\n通过mvvm开发架构的升级，我们的程序结构更加清晰，代码可读性更高，通过运行时注解的支持，彻底消除了不必要的模板代码,使我们的开发更加顺畅。\n\n#### 未来规划\n未来，我们想尝试的方向有组件平台化，插件化，跨平台，希望通过这些手段，进一步提升团队协作效能，提高app研发效率，和用户体验\n\n以上就是我们最近两年在工程架构上的努力，谢谢大家\n","slug":"Technical/ddmvvm-android","published":1,"updated":"2019-12-05T11:52:26.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3so5k9400064efy91q05fx2","content":"<p>大家好，我是刘硕，来自得到安卓客户端。主要负责业务架构方向的工程效能提升相关工作。我们希望，通过对工程架构的改造升级，践行工程化方面的一些通用实践。使安卓团队在研发效率和研发体验上得到整体提升，提高app稳定性。</p>\n<p>最近两年，我们在工程架构方面有了一些成果，主要围绕着工程架构，开发架构相关方面做了很多工作，大概分为两部分内容：组件化和mvvm开发架构。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"组件化拆分\"><a href=\"#组件化拆分\" class=\"headerlink\" title=\"组件化拆分\"></a>组件化拆分</h4><p>组件化的概念其实理解上很简单，所谓组件化，就是把一个功能完整的app拆分成多个子模块，每个子模块可以独立编译和运行，也可以将这些子模块任意组合成一个新的app，子模块之间不互相依赖，但可以相互交互。</p>\n<h5 id=\"单体工程架构\"><a href=\"#单体工程架构\" class=\"headerlink\" title=\"单体工程架构\"></a>单体工程架构</h5><p>一般app的开发早期，团队的重心并不在开发架构的选型上。主要也是因为早期的项目比较小，大家更关注<br>多快好省的完成任务，对于如何复用，如何解耦没有过度考虑。如下图是得到早期的工程架构。</p>\n<p>随着版本迭代，app的功能越来越多，项目结构逐渐也演变成了一个庞大的单体工程，内部依赖错综复杂。</p>\n<p>当然，这会带来很多很多问题。</p>\n<p>第一、逻辑复杂，不易理解。想要熟悉掌握所有功能需要耗费大量的时间和精力，不仅如此，对于新人熟悉业务来说，也会给他们带来巨大的挑战。</p>\n<p>第二、不同的业务功能耦合严重。导致面对一个修改，我们无法界定它的影响范围，牵一发，动全身。</p>\n<p>第三、构建时间越来越长，降低了研发效率。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_3087dd52ede277f8bd91fe9366be7b48.png\" alt=\"Untitled Diagram (23).png\"> </p>\n<h5 id=\"单体工程组件化拆分\"><a href=\"#单体工程组件化拆分\" class=\"headerlink\" title=\"单体工程组件化拆分\"></a>单体工程组件化拆分</h5><p>为了解决单体工程存在的这些问题，我们开始了工程的组件化改造。优先梳理各个业务模块，将不同业务模块<br>的代码和资源放到不同的业务子工程中，这些作为组件化工程中的业务组件。对于不同业务组件之间公用的代码和资源，下沉到基础子工程中，作为业务子工程的依赖。独立壳工程app，它的主要任务是负责组件的集成打包，所以尽量不要包含业务逻辑。组件化拆分如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_e98c87a323e87aa1e305202c87a3fc6d.png\" alt=\"Untitled Diagram (26).png\"></p>\n<h5 id=\"组件间通信\"><a href=\"#组件间通信\" class=\"headerlink\" title=\"组件间通信\"></a>组件间通信</h5><p>工程组件化拆分结束后，我们遇到的另一个问题是如何进行组件间的方法调用，因为业务组件之间是完全解耦的，所以不能简单的通过引用的方式进行调用。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_d8506a2f2d326d503d3d70de223f499d.png\" alt=\"Untitled Diagram (21).png\"></p>\n<p>我们为业务组件之间通信提供了两种方式。页面路由和服务调用。从实现上来说，这两种方式都是遵循协议下沉的原则，将服务协议下沉到通信组件。</p>\n<p>app启动后，组件工程分别将自己提供的服务和页面路由注册到通信组件。如果某个组件<br>希望调用其他组件提供的服务或路由到其他组件，就可以通过查询通信组件中的注册信息，完成组件间通信的<br>任务。</p>\n<h5 id=\"组件单独调试运行\"><a href=\"#组件单独调试运行\" class=\"headerlink\" title=\"组件单独调试运行\"></a>组件单独调试运行</h5><p>如果我们集成所有组件构建项目，时间会很长，平均大概10分钟左右，为了解决这个问题。我们提出了单组件调试<br>运行的方案。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_f765bb0788e2e7f8b36078850af3b63a.png\" alt=\"Untitled Diagram (27).png\"></p>\n<p>通过自定义组件构建脚本，每个业务组件都可以作为壳工程独立运行。并且可以集成其他依赖的组件并进行组件间通信。通过这种方式，编译效率得到了很大的提升，我们运行单组件工程，构建时间只需要40秒左右。</p>\n<h5 id=\"组件化2-0\"><a href=\"#组件化2-0\" class=\"headerlink\" title=\"组件化2.0\"></a>组件化2.0</h5><p>组件化用了大概一年时间，我们遇到了新的问题。大家有时希望全组件集成运行app，正如之前的解决方案，我们并没有针对这种情况的优化手段，所以就导致了每天还是浪费了很多时间在编译构建上。</p>\n<p>其实，gradle在构建项目时，确实是支持增量编译的，但有时改动一个文件，会导致项目构建时间超过10分钟。我们需要尽快解决这个问题，不然每天团队所有人在构建上浪费的总时间，我粗略的算了下  7个人<em>5次</em>10分钟，超过5个小时，还是比较吓人的。</p>\n<h5 id=\"全组件集成构建流程分析\"><a href=\"#全组件集成构建流程分析\" class=\"headerlink\" title=\"全组件集成构建流程分析\"></a>全组件集成构建流程分析</h5><p>下图简要的描述了我们集成构建app的时候需要执行的核心环节。通过分析，我们发现构建时的一些问题。每次编译项目,所有组件工程都会重新执行同样的编译构建流程，所以，如果组件集成可以直接使用aar的方式，那么这些执行的重复构建<br>就可以节省下来。编译时间上会有很大的提升</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_c19f37fdc74d41101463a4578f204ae5.png\" alt=\"Untitled Diagram (33).png\"></p>\n<h5 id=\"组件打包aar\"><a href=\"#组件打包aar\" class=\"headerlink\" title=\"组件打包aar\"></a>组件打包aar</h5><p>所以，顺着前面的思路，我们构建了一套完整的组件打包体系。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_16304fe99e16eee44a9ea846855bb2f7.png\" alt=\"Untitled Diagram (38).png\"></p>\n<p>ci 负责实时监控git仓库代码变动,当开发人员提交了代码，CI 自动开始执行组件打包脚本。打包脚本会分析出所有包含代码变动的组件，并计算出组件对应的版本和maven仓库信息。使用这些信息，执行每个组件的gradle打包任务，并将打包成功后的产出物 aar 上传到组件仓库。</p>\n<h5 id=\"组件化2-0集成构建\"><a href=\"#组件化2-0集成构建\" class=\"headerlink\" title=\"组件化2.0集成构建\"></a>组件化2.0集成构建</h5><p>组件有了aar的管理方式，我们的全组件集成构建逻辑就可以进一步得到升级。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_d616f84d06a018d87976dd1aacba49f5.png\" alt=\"Untitled Diagram (36).png\"></p>\n<p>执行全组件集成构建时，首先解析工程下的组件化配置文件。该配置文件中明确标明了某个组件的依赖方式是aar还是源码，及aar的依赖版本和仓库信息。然后构建脚本就会根据这些信息，灵活的配置组件依赖并集成构建app。</p>\n<p>使用aar的集成方式，避免了组件的再次编译，全量编译时间从之前的10分钟降低为现在的2分半左右</p>\n<h4 id=\"MVVM-开发架构\"><a href=\"#MVVM-开发架构\" class=\"headerlink\" title=\"MVVM 开发架构\"></a>MVVM 开发架构</h4><p>这部分，主要包含一些我们在选型开发架构上的心得和实践。如下图描述，工程组件化架构搭建完成后，我们的编译效率和项目管理方式得到了很大的改进。</p>\n<p>但是，组件内的业务开发还在采用比较粗放的模式。Controller作为业务功能组织的核心，完成了大概80%的工作量，内部耦合十分严重，极大的限制了代码的复用能力，导致研发效率底下。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_500734ffdd71d031dfa89c4025f85953.png\" alt=\"Untitled Diagram (49).png\"></p>\n<h5 id=\"MVC-VS-MVP\"><a href=\"#MVC-VS-MVP\" class=\"headerlink\" title=\"MVC VS MVP\"></a>MVC VS MVP</h5><p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_83b0b621659d7633d42742eb8176d09f.png\" alt=\"Untitled Diagram (83).png\"></p>\n<p>为了解决目前以Controller为核心的开发模式带来的代码复用问题,我们对比了常见的三种MVX 架构。</p>\n<p>其中，MVC 是开发gui应用程序的经典架构。但是，由于Controller直接持有了View的引用并使用这些引用组织展现逻辑，导致展现逻辑不能很好的被复用。</p>\n<p>MVP的出现很好的 解决了MVC中展现逻辑不易复用的问题。MVP中展现交互逻辑完全由Presenter负责，并通过View接口与View通信。</p>\n<p>但是MVP也存在一些问题。展现逻辑的复用粒度由View接口的力度决定，而且，当展现逻辑非常复杂，<br>就会造成Presenter与View联系过于紧密，限制了复用能力。</p>\n<h5 id=\"MVP-VS-MVVM\"><a href=\"#MVP-VS-MVVM\" class=\"headerlink\" title=\"MVP VS MVVM\"></a>MVP VS MVVM</h5><p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_bc0b779af1c6bc2aee13b3bfbac19920.png\" alt=\"Untitled Diagram (54).png\"></p>\n<p>相对于MVP，MVVM中展现逻辑的复用更为彻底。<br>MVVM 中创新的提出了抽象View的概念 ViewModel，ViewModel封装了View的一切状态和行为，但与具体的显示框架，布局规则没有任何关系。</p>\n<p>这就使得ViewModel可以满足几乎任何场景下的被复用需求。基于传统的MVVM概念和google 推出的AAC 架构组件，我们开发了一套更符合自己实际情况的MVVM方案.</p>\n<p>下面开始详细的介绍我们的MVVM 实践。</p>\n<h5 id=\"MVVM-中的依赖原则\"><a href=\"#MVVM-中的依赖原则\" class=\"headerlink\" title=\"MVVM 中的依赖原则\"></a>MVVM 中的依赖原则</h5><p>MVVM 遵循单向依赖原则，依赖关系从上向下 依次为 View 依赖 ViewModel,ViewModel依赖 Model，不允许跨层依赖。这样的好处是可以使调用依赖关系更加清晰。</p>\n<p>沿着依赖方向的通信方式以直接方法调用为主。由于不能违背依赖原则，从下向上的通信主要借助观察者模式实现，上层注册观察者，下层需要通信时，触发观察者回调。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_908f888db681263a44229d3f899f1fe1.png\" alt=\"Untitled Diagram (57).png\"></p>\n<h5 id=\"MVVM-中的类层次\"><a href=\"#MVVM-中的类层次\" class=\"headerlink\" title=\"MVVM 中的类层次\"></a>MVVM 中的类层次</h5><p>如下图，MVVM 中View ViewModel Model 都有自己的类层次结构。</p>\n<p>其中，View 需要 承载 布局渲染等逻辑，所以Activity， Fragment，ViewHolder 及其子类属于View的角色范畴。</p>\n<p>ViewModel作为View的抽象表示，分别针对页面和列表item提供了不同的子类实现。</p>\n<p>Model中BaseModel类主要封装了网络库相关的方法调用，具体子类可以根据不同场景，实现不同的需求。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_5e0f7c3e0e36df4358644bbf3e9977cd.png\" alt=\"Untitled Diagram (81).png\"></p>\n<h5 id=\"MVVM-在首页的实践\"><a href=\"#MVVM-在首页的实践\" class=\"headerlink\" title=\"MVVM 在首页的实践\"></a>MVVM 在首页的实践</h5><p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_f61fa909899fbfa3a6f4efdafb5c8d3f.png\" alt=\"Untitled Diagram (82).png\"></p>\n<p>首页算是得到app中比较特殊的页面。最外层结构是一个列表，列表中每个item 独立请求需要显示的业务数据。</p>\n<p>我们在使用mvvm架构整个页面的过程中，确实遇到了一些问题。<br>这些问题，大概包含了三个方面的内容。</p>\n<p>问题1：如何复用逻辑<br>面向对象开发中，复用的主要手段包括组合还有继承</p>\n<p>那么，mvvm中，展现逻辑和数据逻辑的复用，也不外乎这两种手段。</p>\n<p>例如，得到app 首页中 推荐课程，推荐听书都包含 负反馈和底部推荐标签功能，我们将这两个功能抽象到TagsItemVM 中，课程，听书VM分别继承TagsItemVM，这样就可以非常容易的实现这两个展现交互逻辑的复用。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_4aea96b8fbf0c310c141478c81bbf034.png\" alt=\"Untitled Diagram (86).png\"></p>\n<p>问题2：ViewModel如何感知View的生命周期变化</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_fce79cfa2bb995e19bc87177755d7170.png\" alt=\"Untitled Diagram (95).png\"></p>\n<p>在mvvm中，View直接持有ViewModel的引用，所以，当View的生命周期发生变化，ViewModel对应的生命周期函数会立即被调用。通过这种方式，我们确保ViewModel与View的<br>生命周期能够保持同步</p>\n<p>但由于页面Activity，Fragment和列表ItemViewHolder具有不同的生命周期形式，所以他们对应的ViewModel会有不同的生命周期回调。</p>\n<p>ViewModel内部使用一个对象维护自身的生命周期状态，当ViewModel与View绑定后，ViewModel的生命周期 活跃，当ViewModel与View解除绑定后，ViewModel的生命周期不活跃。</p>\n<p>此外，ViewModel生命周期的活跃状态受其parent ViewModel的生命周期影响，当parent ViewModel 不活跃，当前ViewModel的生命周期同样已经不活跃。</p>\n<p>通过感知ViewModel生命周期的活跃状态,在生命周期不活跃时，执行某些资源的清理操作，可以有效防止内存泄露。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_8a5dad97b4785a5b386659f6c81ed694.png\" alt=\"Untitled Diagram (75).png\">code block</p>\n<p>问题3：ViewModel之间如何互相通信</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_ed373b1658fa4ff4ba9c914acfa5c5fc.png\" alt=\"Untitled Diagram (61).png\"></p>\n<p>ViewModel之间通信主要依赖于LifecycleBus，这是一种特殊的事件总线。</p>\n<p>ViewModel不活跃时，由于会断开与总线的链接，所以不会收到总线上的事件。</p>\n<p>这样的设计主要考虑到 viewmodel 已经不在与View有绑定关系，ViewModel继续关注View中的事件通知是没有意义的，还可能带来其他未知的问题。</p>\n<p>这中方案还带来了另外的好处，使event的派发效率更好，因为事件只会派发到活跃的ViewModel</p>\n<h5 id=\"消除模板代码，简化开发\"><a href=\"#消除模板代码，简化开发\" class=\"headerlink\" title=\"消除模板代码，简化开发\"></a>消除模板代码，简化开发</h5><p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_735be772fe5abd4942e14d8d813f5c9e.png\" alt=\"Untitled Diagram (78).png\"></p>\n<p>如上图，传统的MVVM实现中，如果我们希望实现一个列表效果，至少需要新创建四个文件，view adapter，item view hodler，item view model，layout file。但是，view adapter和view holder中主要是一些模板代码，几乎没有有效的业务逻辑。</p>\n<p>所以，我们为了解决这个问题，在MVVM framework中提供三个基础设施类，通用的view adapter，通用的view holder，bindItemVH注解。</p>\n<p>这样，我们再实现同样的列表效果，只需要创建两个文件 item view model和layout file。</p>\n<p>然后使用注解关联这两个文件。运行时，通用的view adapter 根据注解指定的关联关系，就可以将相关的ui渲染到屏幕上。</p>\n<h5 id=\"我们的收获\"><a href=\"#我们的收获\" class=\"headerlink\" title=\"我们的收获\"></a>我们的收获</h5><p>目前我们已经上线首页，已购的mvvm改造，消息中心，问答，搜索，课程的mvvm方案也已经完成。</p>\n<p>通过mvvm开发架构的升级，我们的程序结构更加清晰，代码可读性更高，通过运行时注解的支持，彻底消除了不必要的模板代码,使我们的开发更加顺畅。</p>\n<h4 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h4><p>未来，我们想尝试的方向有组件平台化，插件化，跨平台，希望通过这些手段，进一步提升团队协作效能，提高app研发效率，和用户体验</p>\n<p>以上就是我们最近两年在工程架构上的努力，谢谢大家</p>\n","site":{"data":{}},"excerpt":"<p>大家好，我是刘硕，来自得到安卓客户端。主要负责业务架构方向的工程效能提升相关工作。我们希望，通过对工程架构的改造升级，践行工程化方面的一些通用实践。使安卓团队在研发效率和研发体验上得到整体提升，提高app稳定性。</p>\n<p>最近两年，我们在工程架构方面有了一些成果，主要围绕着工程架构，开发架构相关方面做了很多工作，大概分为两部分内容：组件化和mvvm开发架构。</p>","more":"<h4 id=\"组件化拆分\"><a href=\"#组件化拆分\" class=\"headerlink\" title=\"组件化拆分\"></a>组件化拆分</h4><p>组件化的概念其实理解上很简单，所谓组件化，就是把一个功能完整的app拆分成多个子模块，每个子模块可以独立编译和运行，也可以将这些子模块任意组合成一个新的app，子模块之间不互相依赖，但可以相互交互。</p>\n<h5 id=\"单体工程架构\"><a href=\"#单体工程架构\" class=\"headerlink\" title=\"单体工程架构\"></a>单体工程架构</h5><p>一般app的开发早期，团队的重心并不在开发架构的选型上。主要也是因为早期的项目比较小，大家更关注<br>多快好省的完成任务，对于如何复用，如何解耦没有过度考虑。如下图是得到早期的工程架构。</p>\n<p>随着版本迭代，app的功能越来越多，项目结构逐渐也演变成了一个庞大的单体工程，内部依赖错综复杂。</p>\n<p>当然，这会带来很多很多问题。</p>\n<p>第一、逻辑复杂，不易理解。想要熟悉掌握所有功能需要耗费大量的时间和精力，不仅如此，对于新人熟悉业务来说，也会给他们带来巨大的挑战。</p>\n<p>第二、不同的业务功能耦合严重。导致面对一个修改，我们无法界定它的影响范围，牵一发，动全身。</p>\n<p>第三、构建时间越来越长，降低了研发效率。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_3087dd52ede277f8bd91fe9366be7b48.png\" alt=\"Untitled Diagram (23).png\"> </p>\n<h5 id=\"单体工程组件化拆分\"><a href=\"#单体工程组件化拆分\" class=\"headerlink\" title=\"单体工程组件化拆分\"></a>单体工程组件化拆分</h5><p>为了解决单体工程存在的这些问题，我们开始了工程的组件化改造。优先梳理各个业务模块，将不同业务模块<br>的代码和资源放到不同的业务子工程中，这些作为组件化工程中的业务组件。对于不同业务组件之间公用的代码和资源，下沉到基础子工程中，作为业务子工程的依赖。独立壳工程app，它的主要任务是负责组件的集成打包，所以尽量不要包含业务逻辑。组件化拆分如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_e98c87a323e87aa1e305202c87a3fc6d.png\" alt=\"Untitled Diagram (26).png\"></p>\n<h5 id=\"组件间通信\"><a href=\"#组件间通信\" class=\"headerlink\" title=\"组件间通信\"></a>组件间通信</h5><p>工程组件化拆分结束后，我们遇到的另一个问题是如何进行组件间的方法调用，因为业务组件之间是完全解耦的，所以不能简单的通过引用的方式进行调用。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_d8506a2f2d326d503d3d70de223f499d.png\" alt=\"Untitled Diagram (21).png\"></p>\n<p>我们为业务组件之间通信提供了两种方式。页面路由和服务调用。从实现上来说，这两种方式都是遵循协议下沉的原则，将服务协议下沉到通信组件。</p>\n<p>app启动后，组件工程分别将自己提供的服务和页面路由注册到通信组件。如果某个组件<br>希望调用其他组件提供的服务或路由到其他组件，就可以通过查询通信组件中的注册信息，完成组件间通信的<br>任务。</p>\n<h5 id=\"组件单独调试运行\"><a href=\"#组件单独调试运行\" class=\"headerlink\" title=\"组件单独调试运行\"></a>组件单独调试运行</h5><p>如果我们集成所有组件构建项目，时间会很长，平均大概10分钟左右，为了解决这个问题。我们提出了单组件调试<br>运行的方案。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_f765bb0788e2e7f8b36078850af3b63a.png\" alt=\"Untitled Diagram (27).png\"></p>\n<p>通过自定义组件构建脚本，每个业务组件都可以作为壳工程独立运行。并且可以集成其他依赖的组件并进行组件间通信。通过这种方式，编译效率得到了很大的提升，我们运行单组件工程，构建时间只需要40秒左右。</p>\n<h5 id=\"组件化2-0\"><a href=\"#组件化2-0\" class=\"headerlink\" title=\"组件化2.0\"></a>组件化2.0</h5><p>组件化用了大概一年时间，我们遇到了新的问题。大家有时希望全组件集成运行app，正如之前的解决方案，我们并没有针对这种情况的优化手段，所以就导致了每天还是浪费了很多时间在编译构建上。</p>\n<p>其实，gradle在构建项目时，确实是支持增量编译的，但有时改动一个文件，会导致项目构建时间超过10分钟。我们需要尽快解决这个问题，不然每天团队所有人在构建上浪费的总时间，我粗略的算了下  7个人<em>5次</em>10分钟，超过5个小时，还是比较吓人的。</p>\n<h5 id=\"全组件集成构建流程分析\"><a href=\"#全组件集成构建流程分析\" class=\"headerlink\" title=\"全组件集成构建流程分析\"></a>全组件集成构建流程分析</h5><p>下图简要的描述了我们集成构建app的时候需要执行的核心环节。通过分析，我们发现构建时的一些问题。每次编译项目,所有组件工程都会重新执行同样的编译构建流程，所以，如果组件集成可以直接使用aar的方式，那么这些执行的重复构建<br>就可以节省下来。编译时间上会有很大的提升</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_c19f37fdc74d41101463a4578f204ae5.png\" alt=\"Untitled Diagram (33).png\"></p>\n<h5 id=\"组件打包aar\"><a href=\"#组件打包aar\" class=\"headerlink\" title=\"组件打包aar\"></a>组件打包aar</h5><p>所以，顺着前面的思路，我们构建了一套完整的组件打包体系。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_16304fe99e16eee44a9ea846855bb2f7.png\" alt=\"Untitled Diagram (38).png\"></p>\n<p>ci 负责实时监控git仓库代码变动,当开发人员提交了代码，CI 自动开始执行组件打包脚本。打包脚本会分析出所有包含代码变动的组件，并计算出组件对应的版本和maven仓库信息。使用这些信息，执行每个组件的gradle打包任务，并将打包成功后的产出物 aar 上传到组件仓库。</p>\n<h5 id=\"组件化2-0集成构建\"><a href=\"#组件化2-0集成构建\" class=\"headerlink\" title=\"组件化2.0集成构建\"></a>组件化2.0集成构建</h5><p>组件有了aar的管理方式，我们的全组件集成构建逻辑就可以进一步得到升级。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_d616f84d06a018d87976dd1aacba49f5.png\" alt=\"Untitled Diagram (36).png\"></p>\n<p>执行全组件集成构建时，首先解析工程下的组件化配置文件。该配置文件中明确标明了某个组件的依赖方式是aar还是源码，及aar的依赖版本和仓库信息。然后构建脚本就会根据这些信息，灵活的配置组件依赖并集成构建app。</p>\n<p>使用aar的集成方式，避免了组件的再次编译，全量编译时间从之前的10分钟降低为现在的2分半左右</p>\n<h4 id=\"MVVM-开发架构\"><a href=\"#MVVM-开发架构\" class=\"headerlink\" title=\"MVVM 开发架构\"></a>MVVM 开发架构</h4><p>这部分，主要包含一些我们在选型开发架构上的心得和实践。如下图描述，工程组件化架构搭建完成后，我们的编译效率和项目管理方式得到了很大的改进。</p>\n<p>但是，组件内的业务开发还在采用比较粗放的模式。Controller作为业务功能组织的核心，完成了大概80%的工作量，内部耦合十分严重，极大的限制了代码的复用能力，导致研发效率底下。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_500734ffdd71d031dfa89c4025f85953.png\" alt=\"Untitled Diagram (49).png\"></p>\n<h5 id=\"MVC-VS-MVP\"><a href=\"#MVC-VS-MVP\" class=\"headerlink\" title=\"MVC VS MVP\"></a>MVC VS MVP</h5><p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_83b0b621659d7633d42742eb8176d09f.png\" alt=\"Untitled Diagram (83).png\"></p>\n<p>为了解决目前以Controller为核心的开发模式带来的代码复用问题,我们对比了常见的三种MVX 架构。</p>\n<p>其中，MVC 是开发gui应用程序的经典架构。但是，由于Controller直接持有了View的引用并使用这些引用组织展现逻辑，导致展现逻辑不能很好的被复用。</p>\n<p>MVP的出现很好的 解决了MVC中展现逻辑不易复用的问题。MVP中展现交互逻辑完全由Presenter负责，并通过View接口与View通信。</p>\n<p>但是MVP也存在一些问题。展现逻辑的复用粒度由View接口的力度决定，而且，当展现逻辑非常复杂，<br>就会造成Presenter与View联系过于紧密，限制了复用能力。</p>\n<h5 id=\"MVP-VS-MVVM\"><a href=\"#MVP-VS-MVVM\" class=\"headerlink\" title=\"MVP VS MVVM\"></a>MVP VS MVVM</h5><p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_bc0b779af1c6bc2aee13b3bfbac19920.png\" alt=\"Untitled Diagram (54).png\"></p>\n<p>相对于MVP，MVVM中展现逻辑的复用更为彻底。<br>MVVM 中创新的提出了抽象View的概念 ViewModel，ViewModel封装了View的一切状态和行为，但与具体的显示框架，布局规则没有任何关系。</p>\n<p>这就使得ViewModel可以满足几乎任何场景下的被复用需求。基于传统的MVVM概念和google 推出的AAC 架构组件，我们开发了一套更符合自己实际情况的MVVM方案.</p>\n<p>下面开始详细的介绍我们的MVVM 实践。</p>\n<h5 id=\"MVVM-中的依赖原则\"><a href=\"#MVVM-中的依赖原则\" class=\"headerlink\" title=\"MVVM 中的依赖原则\"></a>MVVM 中的依赖原则</h5><p>MVVM 遵循单向依赖原则，依赖关系从上向下 依次为 View 依赖 ViewModel,ViewModel依赖 Model，不允许跨层依赖。这样的好处是可以使调用依赖关系更加清晰。</p>\n<p>沿着依赖方向的通信方式以直接方法调用为主。由于不能违背依赖原则，从下向上的通信主要借助观察者模式实现，上层注册观察者，下层需要通信时，触发观察者回调。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_908f888db681263a44229d3f899f1fe1.png\" alt=\"Untitled Diagram (57).png\"></p>\n<h5 id=\"MVVM-中的类层次\"><a href=\"#MVVM-中的类层次\" class=\"headerlink\" title=\"MVVM 中的类层次\"></a>MVVM 中的类层次</h5><p>如下图，MVVM 中View ViewModel Model 都有自己的类层次结构。</p>\n<p>其中，View 需要 承载 布局渲染等逻辑，所以Activity， Fragment，ViewHolder 及其子类属于View的角色范畴。</p>\n<p>ViewModel作为View的抽象表示，分别针对页面和列表item提供了不同的子类实现。</p>\n<p>Model中BaseModel类主要封装了网络库相关的方法调用，具体子类可以根据不同场景，实现不同的需求。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_5e0f7c3e0e36df4358644bbf3e9977cd.png\" alt=\"Untitled Diagram (81).png\"></p>\n<h5 id=\"MVVM-在首页的实践\"><a href=\"#MVVM-在首页的实践\" class=\"headerlink\" title=\"MVVM 在首页的实践\"></a>MVVM 在首页的实践</h5><p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_f61fa909899fbfa3a6f4efdafb5c8d3f.png\" alt=\"Untitled Diagram (82).png\"></p>\n<p>首页算是得到app中比较特殊的页面。最外层结构是一个列表，列表中每个item 独立请求需要显示的业务数据。</p>\n<p>我们在使用mvvm架构整个页面的过程中，确实遇到了一些问题。<br>这些问题，大概包含了三个方面的内容。</p>\n<p>问题1：如何复用逻辑<br>面向对象开发中，复用的主要手段包括组合还有继承</p>\n<p>那么，mvvm中，展现逻辑和数据逻辑的复用，也不外乎这两种手段。</p>\n<p>例如，得到app 首页中 推荐课程，推荐听书都包含 负反馈和底部推荐标签功能，我们将这两个功能抽象到TagsItemVM 中，课程，听书VM分别继承TagsItemVM，这样就可以非常容易的实现这两个展现交互逻辑的复用。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_4aea96b8fbf0c310c141478c81bbf034.png\" alt=\"Untitled Diagram (86).png\"></p>\n<p>问题2：ViewModel如何感知View的生命周期变化</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_fce79cfa2bb995e19bc87177755d7170.png\" alt=\"Untitled Diagram (95).png\"></p>\n<p>在mvvm中，View直接持有ViewModel的引用，所以，当View的生命周期发生变化，ViewModel对应的生命周期函数会立即被调用。通过这种方式，我们确保ViewModel与View的<br>生命周期能够保持同步</p>\n<p>但由于页面Activity，Fragment和列表ItemViewHolder具有不同的生命周期形式，所以他们对应的ViewModel会有不同的生命周期回调。</p>\n<p>ViewModel内部使用一个对象维护自身的生命周期状态，当ViewModel与View绑定后，ViewModel的生命周期 活跃，当ViewModel与View解除绑定后，ViewModel的生命周期不活跃。</p>\n<p>此外，ViewModel生命周期的活跃状态受其parent ViewModel的生命周期影响，当parent ViewModel 不活跃，当前ViewModel的生命周期同样已经不活跃。</p>\n<p>通过感知ViewModel生命周期的活跃状态,在生命周期不活跃时，执行某些资源的清理操作，可以有效防止内存泄露。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_8a5dad97b4785a5b386659f6c81ed694.png\" alt=\"Untitled Diagram (75).png\">code block</p>\n<p>问题3：ViewModel之间如何互相通信</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_ed373b1658fa4ff4ba9c914acfa5c5fc.png\" alt=\"Untitled Diagram (61).png\"></p>\n<p>ViewModel之间通信主要依赖于LifecycleBus，这是一种特殊的事件总线。</p>\n<p>ViewModel不活跃时，由于会断开与总线的链接，所以不会收到总线上的事件。</p>\n<p>这样的设计主要考虑到 viewmodel 已经不在与View有绑定关系，ViewModel继续关注View中的事件通知是没有意义的，还可能带来其他未知的问题。</p>\n<p>这中方案还带来了另外的好处，使event的派发效率更好，因为事件只会派发到活跃的ViewModel</p>\n<h5 id=\"消除模板代码，简化开发\"><a href=\"#消除模板代码，简化开发\" class=\"headerlink\" title=\"消除模板代码，简化开发\"></a>消除模板代码，简化开发</h5><p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191110/upload_735be772fe5abd4942e14d8d813f5c9e.png\" alt=\"Untitled Diagram (78).png\"></p>\n<p>如上图，传统的MVVM实现中，如果我们希望实现一个列表效果，至少需要新创建四个文件，view adapter，item view hodler，item view model，layout file。但是，view adapter和view holder中主要是一些模板代码，几乎没有有效的业务逻辑。</p>\n<p>所以，我们为了解决这个问题，在MVVM framework中提供三个基础设施类，通用的view adapter，通用的view holder，bindItemVH注解。</p>\n<p>这样，我们再实现同样的列表效果，只需要创建两个文件 item view model和layout file。</p>\n<p>然后使用注解关联这两个文件。运行时，通用的view adapter 根据注解指定的关联关系，就可以将相关的ui渲染到屏幕上。</p>\n<h5 id=\"我们的收获\"><a href=\"#我们的收获\" class=\"headerlink\" title=\"我们的收获\"></a>我们的收获</h5><p>目前我们已经上线首页，已购的mvvm改造，消息中心，问答，搜索，课程的mvvm方案也已经完成。</p>\n<p>通过mvvm开发架构的升级，我们的程序结构更加清晰，代码可读性更高，通过运行时注解的支持，彻底消除了不必要的模板代码,使我们的开发更加顺畅。</p>\n<h4 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h4><p>未来，我们想尝试的方向有组件平台化，插件化，跨平台，希望通过这些手段，进一步提升团队协作效能，提高app研发效率，和用户体验</p>\n<p>以上就是我们最近两年在工程架构上的努力，谢谢大家</p>"},{"title":"【八里庄技术沙龙-13 期】进度服务重构之路","date":"2019-09-19T16:00:00.000Z","author":"zuowenkang","toc":true,"thumbnail":"https://piccdn.luojilab.com/fe-oss/default/MTU2OTI1MjA0NDAx.png","_content":"\n## 进度服务是什么  \n\n要说明进度服务是什么，首先要说明进度是什么。得到app主要提供内容服务，用户在使用内容服务的时候，就会产生进度。如图，进度的元素无处不在，收听百分比，已听完等。\n\n<!-- more -->\n\n![进度是什么.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_93c20d949ddeed5595d6e9c75ea27f88.png)\n\n进度服务是提供进度数据上报和进度信息查询的服务。一般流程如下图：\n\n![一般流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e86f8c12420584b87a9e019eab85e282.png)\n\n## 为什么重构\n\n了解了什么是进度服务。下面来说明一下为什么要重构：\n1. 不完善的重构 \n2. 不明确的边界。\n\n### 不完善的重构\n\n在做本次重构之前，实际上已经进行过一次重构了。但是由于第一次重构不完善，导致将变得更加复杂了。\n首先，经过第一次重构之后，进度项目变得更多了。在原有生产者、消费者和查询服务的基础上，新增了新的消费者和查询者。因此当时除了重新设计新的项目，还需要维护额外的5个老项目。同时，库表也增多了。由于采用分库分表，数据库多达6个，表多达5千个。如此多的库表，在刚接手时，维护服务异常痛苦。\n第三个是上报的接口本来一个就可以满足需要，最终采用的是不同业务不同接口，导致上报多达5个。\n\n### 不明确的边界   \n进度服务该包含哪些东西，什么是进度服务的边界，之前是完全没有概念的。一有需求就加进来，导致服务越来越臃肿。\n      \n最后，更可怕的是，之前维护老进度项目的人都走了。\n\n## 如何重构\n\n根据进度服务的流程从三个部分进行解决：\n1. 简化内部服务 \n2. 统一上报接口\n3. 简化第三方打点。\n\n如下图，绿色的框表示进度上游客户端上报，红色的表示进度服务内部系统，蓝色是针对下游服务打点。\n\n![回顾.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_41c08f5024f759a0f3b2d47cce77c1a1.png)\n\n### 简化内部服务\n\n针对以上三个部分的工作，首先选择简化内部服务。只有一个稳定的内部服务，才能保证系统的稳健。简化内部服务主要分为四步： 1）抽象数据结构和流程 2）双写 3）迁移数据 4）切换服务。\n\n#### 抽象数据结构和流程\n\n首先是抽象数据结构和流程。要抽象数据结构先来看看得到服务业务和资源的关系。听书和电子书只包含一个资源，而课程包含文章和音频资源。产品要求学完任意一个就算学完该类资源。因此抽象出面向资源的子资源进度，面向业务的主资源进度。如下图\n\n![抽象数据模型.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_516f36de79b475bab3849c7f00d78fbf.png)\n\n针对于包含两种资源的业务，如何按照要求进行合并呢？一般分为两种方案，一种是查询的时候，进行合并，另一种是写入的时候合并。如下图：\n\n![合并方案.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_47dccd46f038ac342c5cbd2f7a460da2.png)\n\n查询合并的好处在于只需要记录子资源，在查询的时候进行合并处理进度。缺点是针对多个资源查询翻倍，批量时更是需要处理多对数组的合并工作，比较复杂。写入合并的好处是查询方便，缺点是需要写入两张表。由于考虑到后者比较简单，且进度状态不可回退，采用写入合并的方案。\n\n下面看看进度服务的流程。对于资源进度，无论什么业务，都会按照三个阶段的方式记录数据。因此抽象出统一的上报流程。如下图：\n\n![抽象流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_47d76d16527f95905c64b71862cc6728.png)\n\n上报流程经历的流程比较长，任何阶段都可能出现异常。需要采用重试，以保证数据的一致性。如果采用全流程重试就需要更大范围的事务，会影响性能。因此采用阶段重试的方法，阶段方法内部进行事务保证。那么就需要一个灵活的流程控制。\n\n![流程异常.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_301a2fbecce21c3e6504e4f63901113c.png)\n\n流程代理就是来完成这个工作的。如下图，红色的部分是阶段方法的接口标准，需要根据通用参数完成对应的阶段业务处理。其中分别包含三个阶段方法的具体实现。绿色的部分是通用参数的封装，整个过程中通过通过参数传递数据。下面的蓝色部分是流程代理，其中包含一个通用方法的map，处理函数主要包含方法数组和通用参数。处理流程是通过循环执行传入的阶段函数，完成流程灵活处理。\n\n![流程代理.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_1bd85eab35569c97b582ec789e5b3739.png)\n\n#### 双写\n\n通过抽象数据结构和流程，完成内部处理的简化。这样就可以写数据了。由于之前的重构导致项目比较复杂，不可能一次性替换，因此采用双写的方式。双写有两种方案：\n1. 消费topic \n2. 双写到新接口。\n\n消费topic主要用于新的数据结构与老的结构基本一致，这样可以更加快速的接入数据。\n\n![消费topic.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e41b8b213f956e94d81eef98770442bf.png)\n\n双写到新接口。由于新的数据结构与老的结构差异比较大。因此在原有的消费者里面进行数据适配到新服务的接口，最终完成双写的目的。\n![双写新接口.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_ce881bbcf7e4c2e0bafae5e05b3ce6f9.png)\n\n通过双写完成了新数据的写入，要保证进度数据的完成性，就要导入老数据了。\n\n#### 3迁移数据\n\n首先进行存储选型。原有的mysql存在6个库和5千多张表，实在是无法继续维护。因此采用mongo数据库。首先mongo比较便捷，代码无需做分表分库的处理，通过mongo的自动分片完成数据的切分。另外是mongo的高并发，写入最高可达到20wqps。第三点是可弹性扩容，再也不用担心容量的问题了。最后是有mongo大佬。选择mongo作为数据库，针对于大约100亿数据，要进行迁移就需要选择工具了。由于需要进行一个业务类型的合并以及数据的补全，最终采用跑脚本的方式。\n\n脚本的流程分为三个部分，首先是根据环境和数据库参数初始化环境，然后是根据开始分区和结束分区进行表级的并发处理。并发处理中主要是在限定时间段按照id进行循环批量扫描的方式进行。如果扫描到数据则写入mongo，没有就表明表已经扫描完毕直接退出。如此循环至所有分区处理完毕。\n\n![脚本流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_843e1cd9c9d4d2a524230ff6cfd2eeeb.png)\n\n迁移数据最重要的是断点续传的问题，主要有一下几个办法。\n1. 打印扫描的id，中断时可根据最后一个id作为起始id进行继续执行。\n2. 标记数据来源。\n3. 记录自增id。\n\n另一个问题是先双写还是先导数据。双写的好处在于不需要增量更新数据，缺点在于对于有状态的数据无法批量处理。先导数据的好处在于可以批量新增数据，但是双写后，需要增量更新导入数据时间节点到双写开始节点的数据。\n\n迁移数据最重要的是数据的验证。\n1. 脚本记录累计查询数和写入数 \n2. 对比数据总数 \n3. 抽样对比数据\n4. 大数据校验趋势\n\n最终，通过抽象数据，双写，迁移数据和验证完成了简化内部服务的目标。\n\n### 统一上报接口\n\n内部服务稳定之后，开始处理上游上报。进度服务提供各个业务统一的上报接口，并完成数据上报。同时客户端上报架构变更为业务负责数据的组装，上报组件上报数据，并完成打包、重试等工作。如下图所示：\n![客户端架构.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_6a904a5fa0f86a67b3f9cac78d4f9165.png)\n\n与客户端上报统一之后，上报数据的准确性和可追溯有了保障，这样查询问题就更加简单了。\n\n### 第三方打点\n客户端上报不仅仅记录进度数据，同时需要及时触发第三方效益，也称为第三方打点。首先了解一下调用关系。当用户上报时，通过主动通知，下游方可以及时完成效益处理，通过回调获取进度数据。用户还可以在具体的业务页面进行被动处理。\n\n![调用关系.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_33bc7b4f34f6d7a89dba2351b04f1866.png)\n\n第三方打点流程主要包括三个部分，检验条件、组装参数和调用接口。\n![打点流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_9ce1d4577299dff6143ccaf3555a5422.png)\n\n随着第三方打点越来越多，不想每次重复开发，因此需要通过配置开发简化打点工作。根据对打点流程进行分析，从其中三个方面抽象出配置化所需要的数据结构。\n\n对于判断条件是根据进度内部相关的数据进行判断。这些内部数据就是进度服务的数据结构，也是进度服务的领域数据。所有的判断只能是进度服务领域内的数据，例如进度大小、资源类型等。\n\n调用接口主要包含服务名和请求地址。请求参数是进度模块所有包含对外的通用数据结构，这样能够保证进度参数更加灵活。\n\n根据上面三个过程的说明，抽象出对应的配置化数据结构如下。其中事件表示不同类型的进度上报模块。控制条件表示频率的控制，由于进度服务请求比较大，需要对频率进行控制，防止下游被打挂。\n![配置化数据结构.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_b3be228e6260743400bcc1305faf34c6.png)\n\n下游服务配置好配置数据后，程序就可以根据配置数据进行逻辑处理。配置化的处理流程如下图，首先服务启动时会初始化配置管理器。配置管理器通过查询配置化数据，实例化对应事件的检测器、条件解析器、调用器等组件。当有上报事件发生时，会从配置管理器中获取对应的处理器，然后通过检测器判断是否执行调用，如果需要执行则调用对应的调用器发送请求，如果不需要则返回，执行其他的处理器继续执行。调用器会调用一个新的调度服务，完成重试等调用工作。\n\n![配置化流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e2b4c0d6c135a5ac79e0aa215e311af4.png)\n\n最终，通过抽象数据结构和流程、双写、迁移数据完成了简化内部服务的目标，保证了内部服务的稳定。通过统一接口简化上游上报，保证了数据上报的准确性和简单。通过配置化开发简化了第三方打点流程。通过以上三部，完成进度服务的最终重构。\n\n## 经验\n重构中遇到很多问题，下面从mongo超时、kafka积压和海亮数据处理说说遇到的问题。\n\n### mongo超时问题\nmongo超时问题主要数据均衡、IO限制和索引命中。\n\n由于使用的是mongo集群。需要手动设置分片键，这样数据才会根据分片键决定存储在集群的具体物理机器上。如下图，假设以user_id为分片键,按照范围来存放到chunk,如上图6个chunk盒子。那么对应范围的user_id的所有数据会落到对应的chunk上。配置服务会记录分片键和chunk的关联，以及chunk与物理机器的关联。默认情况不做分片，所有的chunk会写到主节点上，即所有的数据会写到主节点。很悲剧，行为数据所有的数据都写到了主节点。很快1T的硬盘不够用了。很明显，上图这种情况，数据就发生了倾斜。如果开启均衡，数据就会从a机器上转移到b或c机器上。此时机器io可能会被打满，导致超时。\n\n![数据倾斜.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_73e840b107993cbf3ec5dfd81f094be6.png)\n\n另外阿里云选择的搭建mongo的ECS配置比较低，IO不够，导致容易打满。同时与其他服务混合部署，其他服务发生大查询时影响进度服务。最后采用高配阿里云高配ECS独立部署服务集群。\n\n索引选择问题。mongo索引是通过采样的⽅方式选择的。因此在数据写入量比较⼤且数据可能出现倾斜的情况下，采样不不准确导致索引选择不合适。最终采⽤hint强制走具体索引的⽅方式解决。如下图：\n\n![mongo索引.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_6d400bdc455c01a0e09d78b232e616e1.png)\n\n### kafka积压\n\n重构的过程中，也发生kafka积压的问题。kafka的partition只能被群组中的一个消费者消费。阿里云的partition是有限制的，因此不能够通过增加partition来解决。最后通过加入线程池的方式解决该问题。虽然一个partition只能被一个消费者连接。但是可以有多个消费线程去执行具体业务。因此如下图：\n\n![线程池.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_618280f9e52c94af5c61c39e444e0569.png)\n\n主线程连接kafka获取消息，同时新建一定数量的goroutine去等待消费。主线程获取到消息后写入到内部channel。多个goroutine从内部channel获取消息并发执行。通过这种方式解决消息积压的问题。\n\n### 海量数据处理\n另一个头疼的问题是接近55亿的行为表，需要修改双写10天的数据。采用导数据的方式id大于某个值，遍历数据修改。但是执行的时候总是出现超时，更新数据脚本总是无法执行完毕。最后采用分而治之的方式，将10天的数据分别写入10张新表，并附加自增id。然后通过并发的方式，更新原始表。通过这种方式解决了海量数据处理的问题。\n\n## 总结       \n最后总结一下，做服务明确边界，多做抽象；海量数据处理分而治之，并发处理。","source":"_posts/Technical/process.md","raw":"title: 【八里庄技术沙龙-13 期】进度服务重构之路\ndate: 2019-09-20\nauthor: zuowenkang\ntoc: true\nthumbnail: https://piccdn.luojilab.com/fe-oss/default/MTU2OTI1MjA0NDAx.png\ntag: \n  - 八里庄技术沙龙 \ncategories: \n  - 八里庄技术沙龙\n\n---\n\n## 进度服务是什么  \n\n要说明进度服务是什么，首先要说明进度是什么。得到app主要提供内容服务，用户在使用内容服务的时候，就会产生进度。如图，进度的元素无处不在，收听百分比，已听完等。\n\n<!-- more -->\n\n![进度是什么.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_93c20d949ddeed5595d6e9c75ea27f88.png)\n\n进度服务是提供进度数据上报和进度信息查询的服务。一般流程如下图：\n\n![一般流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e86f8c12420584b87a9e019eab85e282.png)\n\n## 为什么重构\n\n了解了什么是进度服务。下面来说明一下为什么要重构：\n1. 不完善的重构 \n2. 不明确的边界。\n\n### 不完善的重构\n\n在做本次重构之前，实际上已经进行过一次重构了。但是由于第一次重构不完善，导致将变得更加复杂了。\n首先，经过第一次重构之后，进度项目变得更多了。在原有生产者、消费者和查询服务的基础上，新增了新的消费者和查询者。因此当时除了重新设计新的项目，还需要维护额外的5个老项目。同时，库表也增多了。由于采用分库分表，数据库多达6个，表多达5千个。如此多的库表，在刚接手时，维护服务异常痛苦。\n第三个是上报的接口本来一个就可以满足需要，最终采用的是不同业务不同接口，导致上报多达5个。\n\n### 不明确的边界   \n进度服务该包含哪些东西，什么是进度服务的边界，之前是完全没有概念的。一有需求就加进来，导致服务越来越臃肿。\n      \n最后，更可怕的是，之前维护老进度项目的人都走了。\n\n## 如何重构\n\n根据进度服务的流程从三个部分进行解决：\n1. 简化内部服务 \n2. 统一上报接口\n3. 简化第三方打点。\n\n如下图，绿色的框表示进度上游客户端上报，红色的表示进度服务内部系统，蓝色是针对下游服务打点。\n\n![回顾.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_41c08f5024f759a0f3b2d47cce77c1a1.png)\n\n### 简化内部服务\n\n针对以上三个部分的工作，首先选择简化内部服务。只有一个稳定的内部服务，才能保证系统的稳健。简化内部服务主要分为四步： 1）抽象数据结构和流程 2）双写 3）迁移数据 4）切换服务。\n\n#### 抽象数据结构和流程\n\n首先是抽象数据结构和流程。要抽象数据结构先来看看得到服务业务和资源的关系。听书和电子书只包含一个资源，而课程包含文章和音频资源。产品要求学完任意一个就算学完该类资源。因此抽象出面向资源的子资源进度，面向业务的主资源进度。如下图\n\n![抽象数据模型.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_516f36de79b475bab3849c7f00d78fbf.png)\n\n针对于包含两种资源的业务，如何按照要求进行合并呢？一般分为两种方案，一种是查询的时候，进行合并，另一种是写入的时候合并。如下图：\n\n![合并方案.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_47dccd46f038ac342c5cbd2f7a460da2.png)\n\n查询合并的好处在于只需要记录子资源，在查询的时候进行合并处理进度。缺点是针对多个资源查询翻倍，批量时更是需要处理多对数组的合并工作，比较复杂。写入合并的好处是查询方便，缺点是需要写入两张表。由于考虑到后者比较简单，且进度状态不可回退，采用写入合并的方案。\n\n下面看看进度服务的流程。对于资源进度，无论什么业务，都会按照三个阶段的方式记录数据。因此抽象出统一的上报流程。如下图：\n\n![抽象流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_47d76d16527f95905c64b71862cc6728.png)\n\n上报流程经历的流程比较长，任何阶段都可能出现异常。需要采用重试，以保证数据的一致性。如果采用全流程重试就需要更大范围的事务，会影响性能。因此采用阶段重试的方法，阶段方法内部进行事务保证。那么就需要一个灵活的流程控制。\n\n![流程异常.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_301a2fbecce21c3e6504e4f63901113c.png)\n\n流程代理就是来完成这个工作的。如下图，红色的部分是阶段方法的接口标准，需要根据通用参数完成对应的阶段业务处理。其中分别包含三个阶段方法的具体实现。绿色的部分是通用参数的封装，整个过程中通过通过参数传递数据。下面的蓝色部分是流程代理，其中包含一个通用方法的map，处理函数主要包含方法数组和通用参数。处理流程是通过循环执行传入的阶段函数，完成流程灵活处理。\n\n![流程代理.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_1bd85eab35569c97b582ec789e5b3739.png)\n\n#### 双写\n\n通过抽象数据结构和流程，完成内部处理的简化。这样就可以写数据了。由于之前的重构导致项目比较复杂，不可能一次性替换，因此采用双写的方式。双写有两种方案：\n1. 消费topic \n2. 双写到新接口。\n\n消费topic主要用于新的数据结构与老的结构基本一致，这样可以更加快速的接入数据。\n\n![消费topic.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e41b8b213f956e94d81eef98770442bf.png)\n\n双写到新接口。由于新的数据结构与老的结构差异比较大。因此在原有的消费者里面进行数据适配到新服务的接口，最终完成双写的目的。\n![双写新接口.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_ce881bbcf7e4c2e0bafae5e05b3ce6f9.png)\n\n通过双写完成了新数据的写入，要保证进度数据的完成性，就要导入老数据了。\n\n#### 3迁移数据\n\n首先进行存储选型。原有的mysql存在6个库和5千多张表，实在是无法继续维护。因此采用mongo数据库。首先mongo比较便捷，代码无需做分表分库的处理，通过mongo的自动分片完成数据的切分。另外是mongo的高并发，写入最高可达到20wqps。第三点是可弹性扩容，再也不用担心容量的问题了。最后是有mongo大佬。选择mongo作为数据库，针对于大约100亿数据，要进行迁移就需要选择工具了。由于需要进行一个业务类型的合并以及数据的补全，最终采用跑脚本的方式。\n\n脚本的流程分为三个部分，首先是根据环境和数据库参数初始化环境，然后是根据开始分区和结束分区进行表级的并发处理。并发处理中主要是在限定时间段按照id进行循环批量扫描的方式进行。如果扫描到数据则写入mongo，没有就表明表已经扫描完毕直接退出。如此循环至所有分区处理完毕。\n\n![脚本流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_843e1cd9c9d4d2a524230ff6cfd2eeeb.png)\n\n迁移数据最重要的是断点续传的问题，主要有一下几个办法。\n1. 打印扫描的id，中断时可根据最后一个id作为起始id进行继续执行。\n2. 标记数据来源。\n3. 记录自增id。\n\n另一个问题是先双写还是先导数据。双写的好处在于不需要增量更新数据，缺点在于对于有状态的数据无法批量处理。先导数据的好处在于可以批量新增数据，但是双写后，需要增量更新导入数据时间节点到双写开始节点的数据。\n\n迁移数据最重要的是数据的验证。\n1. 脚本记录累计查询数和写入数 \n2. 对比数据总数 \n3. 抽样对比数据\n4. 大数据校验趋势\n\n最终，通过抽象数据，双写，迁移数据和验证完成了简化内部服务的目标。\n\n### 统一上报接口\n\n内部服务稳定之后，开始处理上游上报。进度服务提供各个业务统一的上报接口，并完成数据上报。同时客户端上报架构变更为业务负责数据的组装，上报组件上报数据，并完成打包、重试等工作。如下图所示：\n![客户端架构.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_6a904a5fa0f86a67b3f9cac78d4f9165.png)\n\n与客户端上报统一之后，上报数据的准确性和可追溯有了保障，这样查询问题就更加简单了。\n\n### 第三方打点\n客户端上报不仅仅记录进度数据，同时需要及时触发第三方效益，也称为第三方打点。首先了解一下调用关系。当用户上报时，通过主动通知，下游方可以及时完成效益处理，通过回调获取进度数据。用户还可以在具体的业务页面进行被动处理。\n\n![调用关系.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_33bc7b4f34f6d7a89dba2351b04f1866.png)\n\n第三方打点流程主要包括三个部分，检验条件、组装参数和调用接口。\n![打点流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_9ce1d4577299dff6143ccaf3555a5422.png)\n\n随着第三方打点越来越多，不想每次重复开发，因此需要通过配置开发简化打点工作。根据对打点流程进行分析，从其中三个方面抽象出配置化所需要的数据结构。\n\n对于判断条件是根据进度内部相关的数据进行判断。这些内部数据就是进度服务的数据结构，也是进度服务的领域数据。所有的判断只能是进度服务领域内的数据，例如进度大小、资源类型等。\n\n调用接口主要包含服务名和请求地址。请求参数是进度模块所有包含对外的通用数据结构，这样能够保证进度参数更加灵活。\n\n根据上面三个过程的说明，抽象出对应的配置化数据结构如下。其中事件表示不同类型的进度上报模块。控制条件表示频率的控制，由于进度服务请求比较大，需要对频率进行控制，防止下游被打挂。\n![配置化数据结构.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_b3be228e6260743400bcc1305faf34c6.png)\n\n下游服务配置好配置数据后，程序就可以根据配置数据进行逻辑处理。配置化的处理流程如下图，首先服务启动时会初始化配置管理器。配置管理器通过查询配置化数据，实例化对应事件的检测器、条件解析器、调用器等组件。当有上报事件发生时，会从配置管理器中获取对应的处理器，然后通过检测器判断是否执行调用，如果需要执行则调用对应的调用器发送请求，如果不需要则返回，执行其他的处理器继续执行。调用器会调用一个新的调度服务，完成重试等调用工作。\n\n![配置化流程.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e2b4c0d6c135a5ac79e0aa215e311af4.png)\n\n最终，通过抽象数据结构和流程、双写、迁移数据完成了简化内部服务的目标，保证了内部服务的稳定。通过统一接口简化上游上报，保证了数据上报的准确性和简单。通过配置化开发简化了第三方打点流程。通过以上三部，完成进度服务的最终重构。\n\n## 经验\n重构中遇到很多问题，下面从mongo超时、kafka积压和海亮数据处理说说遇到的问题。\n\n### mongo超时问题\nmongo超时问题主要数据均衡、IO限制和索引命中。\n\n由于使用的是mongo集群。需要手动设置分片键，这样数据才会根据分片键决定存储在集群的具体物理机器上。如下图，假设以user_id为分片键,按照范围来存放到chunk,如上图6个chunk盒子。那么对应范围的user_id的所有数据会落到对应的chunk上。配置服务会记录分片键和chunk的关联，以及chunk与物理机器的关联。默认情况不做分片，所有的chunk会写到主节点上，即所有的数据会写到主节点。很悲剧，行为数据所有的数据都写到了主节点。很快1T的硬盘不够用了。很明显，上图这种情况，数据就发生了倾斜。如果开启均衡，数据就会从a机器上转移到b或c机器上。此时机器io可能会被打满，导致超时。\n\n![数据倾斜.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_73e840b107993cbf3ec5dfd81f094be6.png)\n\n另外阿里云选择的搭建mongo的ECS配置比较低，IO不够，导致容易打满。同时与其他服务混合部署，其他服务发生大查询时影响进度服务。最后采用高配阿里云高配ECS独立部署服务集群。\n\n索引选择问题。mongo索引是通过采样的⽅方式选择的。因此在数据写入量比较⼤且数据可能出现倾斜的情况下，采样不不准确导致索引选择不合适。最终采⽤hint强制走具体索引的⽅方式解决。如下图：\n\n![mongo索引.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_6d400bdc455c01a0e09d78b232e616e1.png)\n\n### kafka积压\n\n重构的过程中，也发生kafka积压的问题。kafka的partition只能被群组中的一个消费者消费。阿里云的partition是有限制的，因此不能够通过增加partition来解决。最后通过加入线程池的方式解决该问题。虽然一个partition只能被一个消费者连接。但是可以有多个消费线程去执行具体业务。因此如下图：\n\n![线程池.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_618280f9e52c94af5c61c39e444e0569.png)\n\n主线程连接kafka获取消息，同时新建一定数量的goroutine去等待消费。主线程获取到消息后写入到内部channel。多个goroutine从内部channel获取消息并发执行。通过这种方式解决消息积压的问题。\n\n### 海量数据处理\n另一个头疼的问题是接近55亿的行为表，需要修改双写10天的数据。采用导数据的方式id大于某个值，遍历数据修改。但是执行的时候总是出现超时，更新数据脚本总是无法执行完毕。最后采用分而治之的方式，将10天的数据分别写入10张新表，并附加自增id。然后通过并发的方式，更新原始表。通过这种方式解决了海量数据处理的问题。\n\n## 总结       \n最后总结一下，做服务明确边界，多做抽象；海量数据处理分而治之，并发处理。","slug":"Technical/process","published":1,"updated":"2019-12-05T11:52:26.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3so5k9700094efy31b6dlal","content":"<h2 id=\"进度服务是什么\"><a href=\"#进度服务是什么\" class=\"headerlink\" title=\"进度服务是什么\"></a>进度服务是什么</h2><p>要说明进度服务是什么，首先要说明进度是什么。得到app主要提供内容服务，用户在使用内容服务的时候，就会产生进度。如图，进度的元素无处不在，收听百分比，已听完等。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_93c20d949ddeed5595d6e9c75ea27f88.png\" alt=\"进度是什么.png\"></p>\n<p>进度服务是提供进度数据上报和进度信息查询的服务。一般流程如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e86f8c12420584b87a9e019eab85e282.png\" alt=\"一般流程.png\"></p>\n<h2 id=\"为什么重构\"><a href=\"#为什么重构\" class=\"headerlink\" title=\"为什么重构\"></a>为什么重构</h2><p>了解了什么是进度服务。下面来说明一下为什么要重构：</p>\n<ol>\n<li>不完善的重构 </li>\n<li>不明确的边界。</li>\n</ol>\n<h3 id=\"不完善的重构\"><a href=\"#不完善的重构\" class=\"headerlink\" title=\"不完善的重构\"></a>不完善的重构</h3><p>在做本次重构之前，实际上已经进行过一次重构了。但是由于第一次重构不完善，导致将变得更加复杂了。<br>首先，经过第一次重构之后，进度项目变得更多了。在原有生产者、消费者和查询服务的基础上，新增了新的消费者和查询者。因此当时除了重新设计新的项目，还需要维护额外的5个老项目。同时，库表也增多了。由于采用分库分表，数据库多达6个，表多达5千个。如此多的库表，在刚接手时，维护服务异常痛苦。<br>第三个是上报的接口本来一个就可以满足需要，最终采用的是不同业务不同接口，导致上报多达5个。</p>\n<h3 id=\"不明确的边界\"><a href=\"#不明确的边界\" class=\"headerlink\" title=\"不明确的边界\"></a>不明确的边界</h3><p>进度服务该包含哪些东西，什么是进度服务的边界，之前是完全没有概念的。一有需求就加进来，导致服务越来越臃肿。</p>\n<p>最后，更可怕的是，之前维护老进度项目的人都走了。</p>\n<h2 id=\"如何重构\"><a href=\"#如何重构\" class=\"headerlink\" title=\"如何重构\"></a>如何重构</h2><p>根据进度服务的流程从三个部分进行解决：</p>\n<ol>\n<li>简化内部服务 </li>\n<li>统一上报接口</li>\n<li>简化第三方打点。</li>\n</ol>\n<p>如下图，绿色的框表示进度上游客户端上报，红色的表示进度服务内部系统，蓝色是针对下游服务打点。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_41c08f5024f759a0f3b2d47cce77c1a1.png\" alt=\"回顾.png\"></p>\n<h3 id=\"简化内部服务\"><a href=\"#简化内部服务\" class=\"headerlink\" title=\"简化内部服务\"></a>简化内部服务</h3><p>针对以上三个部分的工作，首先选择简化内部服务。只有一个稳定的内部服务，才能保证系统的稳健。简化内部服务主要分为四步： 1）抽象数据结构和流程 2）双写 3）迁移数据 4）切换服务。</p>\n<h4 id=\"抽象数据结构和流程\"><a href=\"#抽象数据结构和流程\" class=\"headerlink\" title=\"抽象数据结构和流程\"></a>抽象数据结构和流程</h4><p>首先是抽象数据结构和流程。要抽象数据结构先来看看得到服务业务和资源的关系。听书和电子书只包含一个资源，而课程包含文章和音频资源。产品要求学完任意一个就算学完该类资源。因此抽象出面向资源的子资源进度，面向业务的主资源进度。如下图</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_516f36de79b475bab3849c7f00d78fbf.png\" alt=\"抽象数据模型.png\"></p>\n<p>针对于包含两种资源的业务，如何按照要求进行合并呢？一般分为两种方案，一种是查询的时候，进行合并，另一种是写入的时候合并。如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_47dccd46f038ac342c5cbd2f7a460da2.png\" alt=\"合并方案.png\"></p>\n<p>查询合并的好处在于只需要记录子资源，在查询的时候进行合并处理进度。缺点是针对多个资源查询翻倍，批量时更是需要处理多对数组的合并工作，比较复杂。写入合并的好处是查询方便，缺点是需要写入两张表。由于考虑到后者比较简单，且进度状态不可回退，采用写入合并的方案。</p>\n<p>下面看看进度服务的流程。对于资源进度，无论什么业务，都会按照三个阶段的方式记录数据。因此抽象出统一的上报流程。如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_47d76d16527f95905c64b71862cc6728.png\" alt=\"抽象流程.png\"></p>\n<p>上报流程经历的流程比较长，任何阶段都可能出现异常。需要采用重试，以保证数据的一致性。如果采用全流程重试就需要更大范围的事务，会影响性能。因此采用阶段重试的方法，阶段方法内部进行事务保证。那么就需要一个灵活的流程控制。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_301a2fbecce21c3e6504e4f63901113c.png\" alt=\"流程异常.png\"></p>\n<p>流程代理就是来完成这个工作的。如下图，红色的部分是阶段方法的接口标准，需要根据通用参数完成对应的阶段业务处理。其中分别包含三个阶段方法的具体实现。绿色的部分是通用参数的封装，整个过程中通过通过参数传递数据。下面的蓝色部分是流程代理，其中包含一个通用方法的map，处理函数主要包含方法数组和通用参数。处理流程是通过循环执行传入的阶段函数，完成流程灵活处理。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_1bd85eab35569c97b582ec789e5b3739.png\" alt=\"流程代理.png\"></p>\n<h4 id=\"双写\"><a href=\"#双写\" class=\"headerlink\" title=\"双写\"></a>双写</h4><p>通过抽象数据结构和流程，完成内部处理的简化。这样就可以写数据了。由于之前的重构导致项目比较复杂，不可能一次性替换，因此采用双写的方式。双写有两种方案：</p>\n<ol>\n<li>消费topic </li>\n<li>双写到新接口。</li>\n</ol>\n<p>消费topic主要用于新的数据结构与老的结构基本一致，这样可以更加快速的接入数据。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e41b8b213f956e94d81eef98770442bf.png\" alt=\"消费topic.png\"></p>\n<p>双写到新接口。由于新的数据结构与老的结构差异比较大。因此在原有的消费者里面进行数据适配到新服务的接口，最终完成双写的目的。<br><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_ce881bbcf7e4c2e0bafae5e05b3ce6f9.png\" alt=\"双写新接口.png\"></p>\n<p>通过双写完成了新数据的写入，要保证进度数据的完成性，就要导入老数据了。</p>\n<h4 id=\"3迁移数据\"><a href=\"#3迁移数据\" class=\"headerlink\" title=\"3迁移数据\"></a>3迁移数据</h4><p>首先进行存储选型。原有的mysql存在6个库和5千多张表，实在是无法继续维护。因此采用mongo数据库。首先mongo比较便捷，代码无需做分表分库的处理，通过mongo的自动分片完成数据的切分。另外是mongo的高并发，写入最高可达到20wqps。第三点是可弹性扩容，再也不用担心容量的问题了。最后是有mongo大佬。选择mongo作为数据库，针对于大约100亿数据，要进行迁移就需要选择工具了。由于需要进行一个业务类型的合并以及数据的补全，最终采用跑脚本的方式。</p>\n<p>脚本的流程分为三个部分，首先是根据环境和数据库参数初始化环境，然后是根据开始分区和结束分区进行表级的并发处理。并发处理中主要是在限定时间段按照id进行循环批量扫描的方式进行。如果扫描到数据则写入mongo，没有就表明表已经扫描完毕直接退出。如此循环至所有分区处理完毕。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_843e1cd9c9d4d2a524230ff6cfd2eeeb.png\" alt=\"脚本流程.png\"></p>\n<p>迁移数据最重要的是断点续传的问题，主要有一下几个办法。</p>\n<ol>\n<li>打印扫描的id，中断时可根据最后一个id作为起始id进行继续执行。</li>\n<li>标记数据来源。</li>\n<li>记录自增id。</li>\n</ol>\n<p>另一个问题是先双写还是先导数据。双写的好处在于不需要增量更新数据，缺点在于对于有状态的数据无法批量处理。先导数据的好处在于可以批量新增数据，但是双写后，需要增量更新导入数据时间节点到双写开始节点的数据。</p>\n<p>迁移数据最重要的是数据的验证。</p>\n<ol>\n<li>脚本记录累计查询数和写入数 </li>\n<li>对比数据总数 </li>\n<li>抽样对比数据</li>\n<li>大数据校验趋势</li>\n</ol>\n<p>最终，通过抽象数据，双写，迁移数据和验证完成了简化内部服务的目标。</p>\n<h3 id=\"统一上报接口\"><a href=\"#统一上报接口\" class=\"headerlink\" title=\"统一上报接口\"></a>统一上报接口</h3><p>内部服务稳定之后，开始处理上游上报。进度服务提供各个业务统一的上报接口，并完成数据上报。同时客户端上报架构变更为业务负责数据的组装，上报组件上报数据，并完成打包、重试等工作。如下图所示：<br><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_6a904a5fa0f86a67b3f9cac78d4f9165.png\" alt=\"客户端架构.png\"></p>\n<p>与客户端上报统一之后，上报数据的准确性和可追溯有了保障，这样查询问题就更加简单了。</p>\n<h3 id=\"第三方打点\"><a href=\"#第三方打点\" class=\"headerlink\" title=\"第三方打点\"></a>第三方打点</h3><p>客户端上报不仅仅记录进度数据，同时需要及时触发第三方效益，也称为第三方打点。首先了解一下调用关系。当用户上报时，通过主动通知，下游方可以及时完成效益处理，通过回调获取进度数据。用户还可以在具体的业务页面进行被动处理。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_33bc7b4f34f6d7a89dba2351b04f1866.png\" alt=\"调用关系.png\"></p>\n<p>第三方打点流程主要包括三个部分，检验条件、组装参数和调用接口。<br><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_9ce1d4577299dff6143ccaf3555a5422.png\" alt=\"打点流程.png\"></p>\n<p>随着第三方打点越来越多，不想每次重复开发，因此需要通过配置开发简化打点工作。根据对打点流程进行分析，从其中三个方面抽象出配置化所需要的数据结构。</p>\n<p>对于判断条件是根据进度内部相关的数据进行判断。这些内部数据就是进度服务的数据结构，也是进度服务的领域数据。所有的判断只能是进度服务领域内的数据，例如进度大小、资源类型等。</p>\n<p>调用接口主要包含服务名和请求地址。请求参数是进度模块所有包含对外的通用数据结构，这样能够保证进度参数更加灵活。</p>\n<p>根据上面三个过程的说明，抽象出对应的配置化数据结构如下。其中事件表示不同类型的进度上报模块。控制条件表示频率的控制，由于进度服务请求比较大，需要对频率进行控制，防止下游被打挂。<br><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_b3be228e6260743400bcc1305faf34c6.png\" alt=\"配置化数据结构.png\"></p>\n<p>下游服务配置好配置数据后，程序就可以根据配置数据进行逻辑处理。配置化的处理流程如下图，首先服务启动时会初始化配置管理器。配置管理器通过查询配置化数据，实例化对应事件的检测器、条件解析器、调用器等组件。当有上报事件发生时，会从配置管理器中获取对应的处理器，然后通过检测器判断是否执行调用，如果需要执行则调用对应的调用器发送请求，如果不需要则返回，执行其他的处理器继续执行。调用器会调用一个新的调度服务，完成重试等调用工作。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e2b4c0d6c135a5ac79e0aa215e311af4.png\" alt=\"配置化流程.png\"></p>\n<p>最终，通过抽象数据结构和流程、双写、迁移数据完成了简化内部服务的目标，保证了内部服务的稳定。通过统一接口简化上游上报，保证了数据上报的准确性和简单。通过配置化开发简化了第三方打点流程。通过以上三部，完成进度服务的最终重构。</p>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><p>重构中遇到很多问题，下面从mongo超时、kafka积压和海亮数据处理说说遇到的问题。</p>\n<h3 id=\"mongo超时问题\"><a href=\"#mongo超时问题\" class=\"headerlink\" title=\"mongo超时问题\"></a>mongo超时问题</h3><p>mongo超时问题主要数据均衡、IO限制和索引命中。</p>\n<p>由于使用的是mongo集群。需要手动设置分片键，这样数据才会根据分片键决定存储在集群的具体物理机器上。如下图，假设以user_id为分片键,按照范围来存放到chunk,如上图6个chunk盒子。那么对应范围的user_id的所有数据会落到对应的chunk上。配置服务会记录分片键和chunk的关联，以及chunk与物理机器的关联。默认情况不做分片，所有的chunk会写到主节点上，即所有的数据会写到主节点。很悲剧，行为数据所有的数据都写到了主节点。很快1T的硬盘不够用了。很明显，上图这种情况，数据就发生了倾斜。如果开启均衡，数据就会从a机器上转移到b或c机器上。此时机器io可能会被打满，导致超时。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_73e840b107993cbf3ec5dfd81f094be6.png\" alt=\"数据倾斜.png\"></p>\n<p>另外阿里云选择的搭建mongo的ECS配置比较低，IO不够，导致容易打满。同时与其他服务混合部署，其他服务发生大查询时影响进度服务。最后采用高配阿里云高配ECS独立部署服务集群。</p>\n<p>索引选择问题。mongo索引是通过采样的⽅方式选择的。因此在数据写入量比较⼤且数据可能出现倾斜的情况下，采样不不准确导致索引选择不合适。最终采⽤hint强制走具体索引的⽅方式解决。如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_6d400bdc455c01a0e09d78b232e616e1.png\" alt=\"mongo索引.png\"></p>\n<h3 id=\"kafka积压\"><a href=\"#kafka积压\" class=\"headerlink\" title=\"kafka积压\"></a>kafka积压</h3><p>重构的过程中，也发生kafka积压的问题。kafka的partition只能被群组中的一个消费者消费。阿里云的partition是有限制的，因此不能够通过增加partition来解决。最后通过加入线程池的方式解决该问题。虽然一个partition只能被一个消费者连接。但是可以有多个消费线程去执行具体业务。因此如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_618280f9e52c94af5c61c39e444e0569.png\" alt=\"线程池.png\"></p>\n<p>主线程连接kafka获取消息，同时新建一定数量的goroutine去等待消费。主线程获取到消息后写入到内部channel。多个goroutine从内部channel获取消息并发执行。通过这种方式解决消息积压的问题。</p>\n<h3 id=\"海量数据处理\"><a href=\"#海量数据处理\" class=\"headerlink\" title=\"海量数据处理\"></a>海量数据处理</h3><p>另一个头疼的问题是接近55亿的行为表，需要修改双写10天的数据。采用导数据的方式id大于某个值，遍历数据修改。但是执行的时候总是出现超时，更新数据脚本总是无法执行完毕。最后采用分而治之的方式，将10天的数据分别写入10张新表，并附加自增id。然后通过并发的方式，更新原始表。通过这种方式解决了海量数据处理的问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后总结一下，做服务明确边界，多做抽象；海量数据处理分而治之，并发处理。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"进度服务是什么\"><a href=\"#进度服务是什么\" class=\"headerlink\" title=\"进度服务是什么\"></a>进度服务是什么</h2><p>要说明进度服务是什么，首先要说明进度是什么。得到app主要提供内容服务，用户在使用内容服务的时候，就会产生进度。如图，进度的元素无处不在，收听百分比，已听完等。</p>","more":"<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_93c20d949ddeed5595d6e9c75ea27f88.png\" alt=\"进度是什么.png\"></p>\n<p>进度服务是提供进度数据上报和进度信息查询的服务。一般流程如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e86f8c12420584b87a9e019eab85e282.png\" alt=\"一般流程.png\"></p>\n<h2 id=\"为什么重构\"><a href=\"#为什么重构\" class=\"headerlink\" title=\"为什么重构\"></a>为什么重构</h2><p>了解了什么是进度服务。下面来说明一下为什么要重构：</p>\n<ol>\n<li>不完善的重构 </li>\n<li>不明确的边界。</li>\n</ol>\n<h3 id=\"不完善的重构\"><a href=\"#不完善的重构\" class=\"headerlink\" title=\"不完善的重构\"></a>不完善的重构</h3><p>在做本次重构之前，实际上已经进行过一次重构了。但是由于第一次重构不完善，导致将变得更加复杂了。<br>首先，经过第一次重构之后，进度项目变得更多了。在原有生产者、消费者和查询服务的基础上，新增了新的消费者和查询者。因此当时除了重新设计新的项目，还需要维护额外的5个老项目。同时，库表也增多了。由于采用分库分表，数据库多达6个，表多达5千个。如此多的库表，在刚接手时，维护服务异常痛苦。<br>第三个是上报的接口本来一个就可以满足需要，最终采用的是不同业务不同接口，导致上报多达5个。</p>\n<h3 id=\"不明确的边界\"><a href=\"#不明确的边界\" class=\"headerlink\" title=\"不明确的边界\"></a>不明确的边界</h3><p>进度服务该包含哪些东西，什么是进度服务的边界，之前是完全没有概念的。一有需求就加进来，导致服务越来越臃肿。</p>\n<p>最后，更可怕的是，之前维护老进度项目的人都走了。</p>\n<h2 id=\"如何重构\"><a href=\"#如何重构\" class=\"headerlink\" title=\"如何重构\"></a>如何重构</h2><p>根据进度服务的流程从三个部分进行解决：</p>\n<ol>\n<li>简化内部服务 </li>\n<li>统一上报接口</li>\n<li>简化第三方打点。</li>\n</ol>\n<p>如下图，绿色的框表示进度上游客户端上报，红色的表示进度服务内部系统，蓝色是针对下游服务打点。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_41c08f5024f759a0f3b2d47cce77c1a1.png\" alt=\"回顾.png\"></p>\n<h3 id=\"简化内部服务\"><a href=\"#简化内部服务\" class=\"headerlink\" title=\"简化内部服务\"></a>简化内部服务</h3><p>针对以上三个部分的工作，首先选择简化内部服务。只有一个稳定的内部服务，才能保证系统的稳健。简化内部服务主要分为四步： 1）抽象数据结构和流程 2）双写 3）迁移数据 4）切换服务。</p>\n<h4 id=\"抽象数据结构和流程\"><a href=\"#抽象数据结构和流程\" class=\"headerlink\" title=\"抽象数据结构和流程\"></a>抽象数据结构和流程</h4><p>首先是抽象数据结构和流程。要抽象数据结构先来看看得到服务业务和资源的关系。听书和电子书只包含一个资源，而课程包含文章和音频资源。产品要求学完任意一个就算学完该类资源。因此抽象出面向资源的子资源进度，面向业务的主资源进度。如下图</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_516f36de79b475bab3849c7f00d78fbf.png\" alt=\"抽象数据模型.png\"></p>\n<p>针对于包含两种资源的业务，如何按照要求进行合并呢？一般分为两种方案，一种是查询的时候，进行合并，另一种是写入的时候合并。如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_47dccd46f038ac342c5cbd2f7a460da2.png\" alt=\"合并方案.png\"></p>\n<p>查询合并的好处在于只需要记录子资源，在查询的时候进行合并处理进度。缺点是针对多个资源查询翻倍，批量时更是需要处理多对数组的合并工作，比较复杂。写入合并的好处是查询方便，缺点是需要写入两张表。由于考虑到后者比较简单，且进度状态不可回退，采用写入合并的方案。</p>\n<p>下面看看进度服务的流程。对于资源进度，无论什么业务，都会按照三个阶段的方式记录数据。因此抽象出统一的上报流程。如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_47d76d16527f95905c64b71862cc6728.png\" alt=\"抽象流程.png\"></p>\n<p>上报流程经历的流程比较长，任何阶段都可能出现异常。需要采用重试，以保证数据的一致性。如果采用全流程重试就需要更大范围的事务，会影响性能。因此采用阶段重试的方法，阶段方法内部进行事务保证。那么就需要一个灵活的流程控制。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_301a2fbecce21c3e6504e4f63901113c.png\" alt=\"流程异常.png\"></p>\n<p>流程代理就是来完成这个工作的。如下图，红色的部分是阶段方法的接口标准，需要根据通用参数完成对应的阶段业务处理。其中分别包含三个阶段方法的具体实现。绿色的部分是通用参数的封装，整个过程中通过通过参数传递数据。下面的蓝色部分是流程代理，其中包含一个通用方法的map，处理函数主要包含方法数组和通用参数。处理流程是通过循环执行传入的阶段函数，完成流程灵活处理。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_1bd85eab35569c97b582ec789e5b3739.png\" alt=\"流程代理.png\"></p>\n<h4 id=\"双写\"><a href=\"#双写\" class=\"headerlink\" title=\"双写\"></a>双写</h4><p>通过抽象数据结构和流程，完成内部处理的简化。这样就可以写数据了。由于之前的重构导致项目比较复杂，不可能一次性替换，因此采用双写的方式。双写有两种方案：</p>\n<ol>\n<li>消费topic </li>\n<li>双写到新接口。</li>\n</ol>\n<p>消费topic主要用于新的数据结构与老的结构基本一致，这样可以更加快速的接入数据。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e41b8b213f956e94d81eef98770442bf.png\" alt=\"消费topic.png\"></p>\n<p>双写到新接口。由于新的数据结构与老的结构差异比较大。因此在原有的消费者里面进行数据适配到新服务的接口，最终完成双写的目的。<br><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_ce881bbcf7e4c2e0bafae5e05b3ce6f9.png\" alt=\"双写新接口.png\"></p>\n<p>通过双写完成了新数据的写入，要保证进度数据的完成性，就要导入老数据了。</p>\n<h4 id=\"3迁移数据\"><a href=\"#3迁移数据\" class=\"headerlink\" title=\"3迁移数据\"></a>3迁移数据</h4><p>首先进行存储选型。原有的mysql存在6个库和5千多张表，实在是无法继续维护。因此采用mongo数据库。首先mongo比较便捷，代码无需做分表分库的处理，通过mongo的自动分片完成数据的切分。另外是mongo的高并发，写入最高可达到20wqps。第三点是可弹性扩容，再也不用担心容量的问题了。最后是有mongo大佬。选择mongo作为数据库，针对于大约100亿数据，要进行迁移就需要选择工具了。由于需要进行一个业务类型的合并以及数据的补全，最终采用跑脚本的方式。</p>\n<p>脚本的流程分为三个部分，首先是根据环境和数据库参数初始化环境，然后是根据开始分区和结束分区进行表级的并发处理。并发处理中主要是在限定时间段按照id进行循环批量扫描的方式进行。如果扫描到数据则写入mongo，没有就表明表已经扫描完毕直接退出。如此循环至所有分区处理完毕。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_843e1cd9c9d4d2a524230ff6cfd2eeeb.png\" alt=\"脚本流程.png\"></p>\n<p>迁移数据最重要的是断点续传的问题，主要有一下几个办法。</p>\n<ol>\n<li>打印扫描的id，中断时可根据最后一个id作为起始id进行继续执行。</li>\n<li>标记数据来源。</li>\n<li>记录自增id。</li>\n</ol>\n<p>另一个问题是先双写还是先导数据。双写的好处在于不需要增量更新数据，缺点在于对于有状态的数据无法批量处理。先导数据的好处在于可以批量新增数据，但是双写后，需要增量更新导入数据时间节点到双写开始节点的数据。</p>\n<p>迁移数据最重要的是数据的验证。</p>\n<ol>\n<li>脚本记录累计查询数和写入数 </li>\n<li>对比数据总数 </li>\n<li>抽样对比数据</li>\n<li>大数据校验趋势</li>\n</ol>\n<p>最终，通过抽象数据，双写，迁移数据和验证完成了简化内部服务的目标。</p>\n<h3 id=\"统一上报接口\"><a href=\"#统一上报接口\" class=\"headerlink\" title=\"统一上报接口\"></a>统一上报接口</h3><p>内部服务稳定之后，开始处理上游上报。进度服务提供各个业务统一的上报接口，并完成数据上报。同时客户端上报架构变更为业务负责数据的组装，上报组件上报数据，并完成打包、重试等工作。如下图所示：<br><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_6a904a5fa0f86a67b3f9cac78d4f9165.png\" alt=\"客户端架构.png\"></p>\n<p>与客户端上报统一之后，上报数据的准确性和可追溯有了保障，这样查询问题就更加简单了。</p>\n<h3 id=\"第三方打点\"><a href=\"#第三方打点\" class=\"headerlink\" title=\"第三方打点\"></a>第三方打点</h3><p>客户端上报不仅仅记录进度数据，同时需要及时触发第三方效益，也称为第三方打点。首先了解一下调用关系。当用户上报时，通过主动通知，下游方可以及时完成效益处理，通过回调获取进度数据。用户还可以在具体的业务页面进行被动处理。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_33bc7b4f34f6d7a89dba2351b04f1866.png\" alt=\"调用关系.png\"></p>\n<p>第三方打点流程主要包括三个部分，检验条件、组装参数和调用接口。<br><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_9ce1d4577299dff6143ccaf3555a5422.png\" alt=\"打点流程.png\"></p>\n<p>随着第三方打点越来越多，不想每次重复开发，因此需要通过配置开发简化打点工作。根据对打点流程进行分析，从其中三个方面抽象出配置化所需要的数据结构。</p>\n<p>对于判断条件是根据进度内部相关的数据进行判断。这些内部数据就是进度服务的数据结构，也是进度服务的领域数据。所有的判断只能是进度服务领域内的数据，例如进度大小、资源类型等。</p>\n<p>调用接口主要包含服务名和请求地址。请求参数是进度模块所有包含对外的通用数据结构，这样能够保证进度参数更加灵活。</p>\n<p>根据上面三个过程的说明，抽象出对应的配置化数据结构如下。其中事件表示不同类型的进度上报模块。控制条件表示频率的控制，由于进度服务请求比较大，需要对频率进行控制，防止下游被打挂。<br><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_b3be228e6260743400bcc1305faf34c6.png\" alt=\"配置化数据结构.png\"></p>\n<p>下游服务配置好配置数据后，程序就可以根据配置数据进行逻辑处理。配置化的处理流程如下图，首先服务启动时会初始化配置管理器。配置管理器通过查询配置化数据，实例化对应事件的检测器、条件解析器、调用器等组件。当有上报事件发生时，会从配置管理器中获取对应的处理器，然后通过检测器判断是否执行调用，如果需要执行则调用对应的调用器发送请求，如果不需要则返回，执行其他的处理器继续执行。调用器会调用一个新的调度服务，完成重试等调用工作。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_e2b4c0d6c135a5ac79e0aa215e311af4.png\" alt=\"配置化流程.png\"></p>\n<p>最终，通过抽象数据结构和流程、双写、迁移数据完成了简化内部服务的目标，保证了内部服务的稳定。通过统一接口简化上游上报，保证了数据上报的准确性和简单。通过配置化开发简化了第三方打点流程。通过以上三部，完成进度服务的最终重构。</p>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><p>重构中遇到很多问题，下面从mongo超时、kafka积压和海亮数据处理说说遇到的问题。</p>\n<h3 id=\"mongo超时问题\"><a href=\"#mongo超时问题\" class=\"headerlink\" title=\"mongo超时问题\"></a>mongo超时问题</h3><p>mongo超时问题主要数据均衡、IO限制和索引命中。</p>\n<p>由于使用的是mongo集群。需要手动设置分片键，这样数据才会根据分片键决定存储在集群的具体物理机器上。如下图，假设以user_id为分片键,按照范围来存放到chunk,如上图6个chunk盒子。那么对应范围的user_id的所有数据会落到对应的chunk上。配置服务会记录分片键和chunk的关联，以及chunk与物理机器的关联。默认情况不做分片，所有的chunk会写到主节点上，即所有的数据会写到主节点。很悲剧，行为数据所有的数据都写到了主节点。很快1T的硬盘不够用了。很明显，上图这种情况，数据就发生了倾斜。如果开启均衡，数据就会从a机器上转移到b或c机器上。此时机器io可能会被打满，导致超时。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_73e840b107993cbf3ec5dfd81f094be6.png\" alt=\"数据倾斜.png\"></p>\n<p>另外阿里云选择的搭建mongo的ECS配置比较低，IO不够，导致容易打满。同时与其他服务混合部署，其他服务发生大查询时影响进度服务。最后采用高配阿里云高配ECS独立部署服务集群。</p>\n<p>索引选择问题。mongo索引是通过采样的⽅方式选择的。因此在数据写入量比较⼤且数据可能出现倾斜的情况下，采样不不准确导致索引选择不合适。最终采⽤hint强制走具体索引的⽅方式解决。如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_6d400bdc455c01a0e09d78b232e616e1.png\" alt=\"mongo索引.png\"></p>\n<h3 id=\"kafka积压\"><a href=\"#kafka积压\" class=\"headerlink\" title=\"kafka积压\"></a>kafka积压</h3><p>重构的过程中，也发生kafka积压的问题。kafka的partition只能被群组中的一个消费者消费。阿里云的partition是有限制的，因此不能够通过增加partition来解决。最后通过加入线程池的方式解决该问题。虽然一个partition只能被一个消费者连接。但是可以有多个消费线程去执行具体业务。因此如下图：</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20190923/upload_618280f9e52c94af5c61c39e444e0569.png\" alt=\"线程池.png\"></p>\n<p>主线程连接kafka获取消息，同时新建一定数量的goroutine去等待消费。主线程获取到消息后写入到内部channel。多个goroutine从内部channel获取消息并发执行。通过这种方式解决消息积压的问题。</p>\n<h3 id=\"海量数据处理\"><a href=\"#海量数据处理\" class=\"headerlink\" title=\"海量数据处理\"></a>海量数据处理</h3><p>另一个头疼的问题是接近55亿的行为表，需要修改双写10天的数据。采用导数据的方式id大于某个值，遍历数据修改。但是执行的时候总是出现超时，更新数据脚本总是无法执行完毕。最后采用分而治之的方式，将10天的数据分别写入10张新表，并附加自增id。然后通过并发的方式，更新原始表。通过这种方式解决了海量数据处理的问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后总结一下，做服务明确边界，多做抽象；海量数据处理分而治之，并发处理。</p>"},{"title":"【八里庄技术沙龙-14 期】Kubernetes在得到App的落地实践","date":"2019-10-20T16:00:00.000Z","author":"sunqingyun","toc":true,"thumbnail":"https://piccdn.luojilab.com/fe-oss/default/MTU2NzE1Mjk5Mjg1.jpeg","_content":"\n## 引言\n\n罗辑思维是一家创业公司，主要产品有：得到App。主要有两类业务，线上: 订阅课程、商城、听书、讲座、电子书，线下：跨年演讲，得到大学，线下大课等。目前有高质量用户3300万，后端服务以容器方式运行，正在基于Kubernetes进行混合云建设，目前线上主要的主机资源是使用的阿里云。\n\n由于技术选型比较“激进”，并且践行微服务架构设计，目前的语言栈有：按照占比排名，Golang、Node.js、Python、Java、PHP、C++，之前使用云主机（ECS）带来的运行环境管理复杂、发布过程不统一等问题。所以，将应用容器化以及微服务治理，一直是较为迫切的需求。\n\n<!-- more -->\n\n从2013年底Docker开源，到现在已经发展了超过5年的时间，大家已经听说容器技术的优势和收益并逐渐接受准备拥抱之。但想要落地容器以及容器管理系统Kubernetes这种新一代基础设施，远没有想象中容易，在新技术落地的过程中，阻碍往往不是来自于技术本身，而在于观念的更新、生态的丰富以及易用性。\n\n首先介绍一下容器技术。容器是Linux Kernel的功能模块封装，主要基于有十年年以上历史的namespace(since1992)和cgroups(since2007)，容器镜像是一类CopyOnWrite的Overlay文件系统，跟虚拟机的主要区别是，容器间共享宿主机系统内核，所以启动速度较虚拟机更快，可以达到秒级。但简单来说，每个容器是一个进程以及它所拥有的资源和边界。Docker是目前容器技术的事实标准，也可能是未来应用的交付标准。\n\n![1.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_109865868b5c33bc6e1dd39f613c4ee0.png)\n\n然后介绍一下Kubernetes（k8s）。Kubernetes是跨主机、跨集群、跨IDC的容器管理系统，基于Google 生产负载上的 15 年管理经验（Borg），最初由 Google 的工程师设计和开发并开源，且融合了来自社区的经验与实践，已经成为企业级容器管理的事实标准。简单来说，Kubernetes是管理容器（进程）的云操作系统。\n\n![2.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_a3c86eb5251c5fe1c8c9b019b4dbe47d.png)\n\n## 架构演进\n回顾容器技术在得到App落地的过程， 主要有四个阶段：公有云虚拟机阶段，容器化Docker阶段，Kubernetes阶段，混合云阶段。\n\n![3.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_746373dcbc5009f540d93c4d406c10ac.png)\n\n### 虚拟机阶段\n此阶段的进步，是由发布系统代替了散落在不同代码仓库中的发布脚本，从shell脚本时代进入工具时代，使得发布不再需要运维人员参与，并且引入了发布审核机制，大大提高了发布效率。但是，新项目上线时，须经历购买服务器、系统初始化和安装运行环境、项目发版配置，调试部署过程脚本几个步骤，较为繁琐。并且需要增加实例时需要手工操作，仅适合管理少量使用ECS的服务发布。最让人头疼的是由于环境不一致引发的各种线上事故。\n\n![4.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_1071ae4d0a345d7d24d5fd6a293ed5e4.png)\n\n于是，我们决定用通过使用容器技术来解决这些问题。首先，制定出一系列规范：统一运行时版本、域名规范、端口规范、目录规范、日志规范等；然后基于规范开发了两层基础镜像：操作系统层、各语言运行时层；并且整理出Dockerfile模板、entrypoint.sh模板。当应用代码需要容器化时，只需要将Dockerfile和entrypoint.sh两个模板文件添加到项目代码仓库中即可，无需要任何修改，降低了改造的工作量。\n\n### 容器阶段\n通过应用的容器化部署，简化了环境管理，屏蔽了部署细节，统一了交付方式，基础设施只关注资源和容器状态，极大减少了运维工作量。同时，因为有容器的快速启动能力加持，扩容速度达到了秒级，使得应用实例的管理更加敏捷。\n\n![5.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_4cf6edea1a9256b2a9da00e103d92bf7.png)\n\n其底层是阿里云容器服务全家桶，上层根据发布流程和规范开发了相关功能。使用的组件有Gitlab（代码管理），Jenkins（调用其API进行docker build，并回调Dozer），Swarm API（发布、调整容器数量等核心功能），云监控（容器监控）、云日志服务（日志收集 存储 分析）、云SLB（多容器实例的汇聚和负载均衡）、云OpenAPI（添加集群Worker节点）。\n\n该方案的优点是：简单，快速，并且有良好的商业支持，可以将精力投在内部的落地上。缺点也是明显的，即限制较多，强依赖公有云，有时候业务的需求由于公有云暂未开放相关功能，不得不进行取舍。同时，由于历史原因我们使用了Overlay网络，当时这种网络方案在高负载集群中非常不稳定，并且Swarm集群缺乏广泛的生产环境考验并不稳定，以及社区不活跃，最终我们决定更新VPC网络和容器基础设施。\n\n\n### Kubernetes阶段\n我们首先花费巨大的时间和精力将公有云的经典网络（Public）中的所有资源迁移到了VPC网络（Private），在此过程中，由于容器化的应用有“一次构建，随处部署”的优势，这使得我们节省了很多时间。然后基于Kubernetes进行了新的容器基础设施的构建，同时建设了自己的监控和日志收集体系。\n\n![6.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_ded836d07936c88e3dedbd37a615a5d9.png)\n\n通过Kubernetes来进行资源管理和交付，通过管理API来进行应用上线和发布。Kubernetes同时提供了弹性伸缩和故障自动迁移，可以应对简单的流量突增或服务器节点故障等问题。还可跟私有云或公有云的基础设施进行联动，对存储、计算资源或负载均衡设备进行自动化管理。\n\n通过一年的努力，所有的业务流量迁移到了围绕容器和Kubernetes构建的基础设施之上。新的容器网络方案，从性能和稳定性上较之前有了本质提升。同时，Kubernetes的良好生态和优秀设计，底层服务器节点进行了标准化管理，极大简化了运维成本。它的容器配额更加高效，把所有的应用容器进行了资源保障和限制，最终提升了资源利用率。\n\n基础设施的更新，为业务架构迭代提供了支撑，应用的开始大范围的微服务化更新，带来了成倍的管理工作，同时微服务间调用链路变长，问题排查难度增加。此时，微服务的管理成为新的挑战，于是我们开始了工具平台研发和服务治理工作。\n\n\n### 微服务治理\n对于服务治理，我们是在2018年初启动，这方面我们的思路是：用规范和约定来将编程框架和基础设施打通、服务以编程框架的形式连接基础设施。\n\n开发框架：将与各个组件对接的代码和公共代码抽离到框架中，集成了服务注册和配置中心以及tracing功能。同时框架中提供Liveness和Readness探针、Graceful Shutdown等，统一日志格式等。通过使用这套框架，可以提升开发效率，统一微服务面向管理的接口。\n\n配置中心：统一管理配置，将配置和发布包解藕，减少业务开发者维护配置的工作。\n\n服务注册与发现：得到服务注册与服务发现的中间件，以AP为设计目标，支持多种健康检测和负载均衡方式，服务在启动时自动将自己注册到服务发现服务上。并且会实时（定期）从服务发现服务同步各个应用服务的地址列表到本地进行缓存，以起到加速的效果，同时监听远端中心事件，进行数据同步。\n\n追踪系统：分布式链路追踪系统，由开发框架中统一封装，每个服务内嵌标准化接口，将分布式请求还原成调用链路，可以集中展示各个服务节点的请求状态，以及花费时间，进行链路追踪、问题分析。\n\nAPI网关：API网关是系统与外界联通的入口，支持反向代理、重定向、限流等功能，基于服务发现服务发现中心的数据，进行后端实例的注册，API网关一般作为系统与外界联通的入口，在微服务架构中，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能，反向代理、重定向、限流等功能。\n\n![7.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_b3402b76a641ea720e0566823e7338fd.png)\n\n服务启动时请求配置中心，获取运行环境配置，将自身加入注册中心、获取所依赖服务信息，启动完成后，上报健康状态，并提供API服务。微服务间通过服务发现互相感知，服务通过框架接口来维护自身上线、离线。API网关连接到服务注册中心，动态感知服务变化，并自动更新API路由，外部流量通过API网关将流量转发到对应的业务模块。\n\n**Kubernetes在底层基础设施跟上层微服务治理组建中间，起到了承接作用。**\n\n\n## 方案细节\n所有Kubernetes方案中，网络方案是最重要的部分之一，由于我们的基础设施分别在公有云和私有云，虽然网络组件不同，但使用整体相似的网络模型。\n\n### 网络（公有云）\n公有云使用VPC网络，Kubernetes的网络组件，使用Flannel + alivpc Backend，每个Worker节点中的容器作为一个子网，掩码为24，并且使用NAT（地址转换），通过Flannel的alivpc插件调用vRouterAPI，将该此条路由信息写入VPC网络的虚拟路由器（vRouter）的路由表中，以此实现Pod IP与ECS IP互通，该方案设计简洁，比较稳定。\n\n![8.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_d9d2ef476afade3c26474ba3d6031885.png)\n\n### 网络（私有云）\n私有云中的网络方案，虽然看起来跟公有云结构很相似，但是基于Calico，主要是基于BGP路由协议进行路由分发，以达到互联互通的效果。节点内使用BIRD软路由，将每个节点上的Pod所在子网，掩码为24，发送给物理设备RouteReflector进行路由学习和发布。相较公有云的网络，BGP协议更加高效和可靠，同时网络设备可对网络流量进行路径优化，间接提升了网络性能。\n\n![9.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_23cd6c9294e33ff37c7d5b4f6af9d626.png)\n\n### 构建\n构建服务的核心是Jenkins，管理系统通过调用Jenkins的HTTP API进行任务管理，Jenkins接收到请求后将构建任务加入队列，排队构建。构建时，从Git仓库拉取代码，执行Docker build，产出Docker image，成功后push到registry存储。\n\nCI系统的流程是：开发人员在本地进行功能开发，本地测试，当通过单元测试后，进行代码提交。Git服务接收到开发人员的提交后，通知CI系统，触发CI流程。CI系统使用Jenkins进行构建，将代码编译成制品，并产出Docker镜像，然后将镜像push到镜像仓库存储，然后回调Kubernetes系统API，更新测试和预发布环境。\n\n![10.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_2b997ec11e9f583e672688263954ecc0.png)\n\n### 日志方案\n服务数量和应用规模变大时，需要将分布在各处的日志进行收集，集中存储，以提升日志分析效率。我们日志收集分为两类：应用日志和APM日志。\n\n![11.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_af6f720cef244c262aad8977500f0ef9.png)\n\n由于自建的日志系统需要较多服务器资源，后续要花费很多精力去优化，考虑到投入产出比，使用阿里云日志服务(SLS)比较有优势，目前我们容器内产生的日志都是使用ilogtail收集发往SLS，使用阿里云监控的日志关键字监控功能监控错误日志中的特定关键字，进行告警。\n\n另外，filebeat目前只负责收集APM产生的trace日志，发往kafka，由日志处理程序来进行消费，处理后序列化到ElasticSearch，由APM系统进行使用。\n\n### 日志收集\nfilebeat和ilogtail以DaemonSet方式部署，每个Worker节点上部署一个Agent。Pod使用EmptyDir易失性存储方式，通过HostPath挂载形式收集。应用将日志写入规范目录后，日志收集Agent会监听到特定事件，将新增日志取出，发往存储服务。\n\n![12.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_052b4de24adfa7a626516d3efa82dd91.png)\n\n### 监控\n我们的Prometheus是单独的服务器，以运行在集群外部的方式，通过APIServer获取资源信息，然后对自动发现的各个endpoint进行metrics pull。导出metrics，使用了cAdvisor、node-exporter、kube-state-metrics等组件来导出不同维度的度数。prometheus拉取到数据后，根据预设阈值进行评估，触发阈值后发往AlertManager，在AlertManager中根据不同的级别对告警进行路由、沉默和收敛。通知通道有：邮件、企业微信、短信。\n\n![13.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_61f382bf288779f9c9746baa80060555.png)\n\n当数据量大、查询较慢时，可使用Prometheus alert中的record语句，进行数据预处理，即将查询产生的结果存入新的metrics，使用新metric绘制图表和报警的rules检查，速度会有较大提升。\n\n\n### 监控（Pod）\n监控数据展示使用Grafana，数据来自Prometheus，Pod级别。主要展示CPU、内存使用率，TCP连接数。\n\n![14.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_4ee02b92968e55d95f088e28cc83cede.png)\n\n\n### 监控（服务）\n服务维度的监控项有：主要展示CPU、内存使用率，TCP连接数，文件描述符，nf_conntrack，IO等。\n\n![15.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_0efb742d91a74163e87e058209bb0e67.png)\n\n\n### 监控（大盘）\n监控大盘，管理人员使用监控大盘，关注各集群控制平面的各系统组件监控状况，资源的分配情况，依据资源水位进行节点的增减。\n\n![16.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_e3510e8f68040abbb29654cdb445a3ba.png)\n\n\n### 踩到的坑\n1. 初期由于我们的服务器还运行在阿里云经典网络（IaaS的早期多租户网络），在Swarm集群中我们使用了overlay网络，每个容器创建或删除时，由于需要集群内部广播该容器IP等信息，随着容器数量的增加，会有同步失败情况，造成服务容器间不通问题。\n2. 得到App的微服务，大部分是golang语言开发，由于我们的服务多为HTTP短连接形式，并且如果请求的是域名的话，golang会直接发起dns查询，当查询量过大时会遇到“lookup failed”相关报错，需要在容器内部运行nscd服务。\n3. 内核中的tcp参数，尤其是netfilter相关，对于容器网络稳定性影响较大，图中为目前我们在生产环境的Worker节点使用的内核参数。\n\n![17.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_f1d5b1274057d6c0b52d8f92e30f488c.png)\n\n## 总结\n目前得到App后端服务中，80%以上项目、90%以上业务流量运行在Kubernetes管理的容器基础设施之上，日均发布近百次。通过容器的落地，简化了环境管理，统一了发布流程，屏蔽发布细节，基础设施只关注服务运行状态，开放了运维能力，打通了开发和运维间屏障。得益于Kubernetes的优秀设计，现在运维人员不需要关注节点用途，运行环境配置等功能，每个节点都只是资源池的一部分，只需关注集群资源水位，管理工作只剩下增减节点。通过资源配额，对计算资源进行再分配，从而保证和限制了应用的资源需求，进而提升了资源的利用率。\n\n未来我们将会Kubernetes和容器技术的特性进行混合云建设和落地，实现跨云基础环境下的流量调度、资源分配、伸缩等。同时精细化发布过程、设计多种可预期场景的弹性伸缩控制器降、强化资源交付效率，为研发人员赋能。\n\n> **愿大家都能够落地感受容器化交付方式的便利，拥抱Kubernetes“云操作系统”，希望我们的经验对大家有所帮助。**\n","source":"_posts/Technical/k8s.md","raw":"title: 【八里庄技术沙龙-14 期】Kubernetes在得到App的落地实践\ndate: 2019-10-21\nauthor: sunqingyun\ntoc: true\nthumbnail: https://piccdn.luojilab.com/fe-oss/default/MTU2NzE1Mjk5Mjg1.jpeg\ntag: \n  - 八里庄技术沙龙 \n  - Kubernetes\n  - Docker\ncategories: \n  - 八里庄技术沙龙\n\n---\n\n## 引言\n\n罗辑思维是一家创业公司，主要产品有：得到App。主要有两类业务，线上: 订阅课程、商城、听书、讲座、电子书，线下：跨年演讲，得到大学，线下大课等。目前有高质量用户3300万，后端服务以容器方式运行，正在基于Kubernetes进行混合云建设，目前线上主要的主机资源是使用的阿里云。\n\n由于技术选型比较“激进”，并且践行微服务架构设计，目前的语言栈有：按照占比排名，Golang、Node.js、Python、Java、PHP、C++，之前使用云主机（ECS）带来的运行环境管理复杂、发布过程不统一等问题。所以，将应用容器化以及微服务治理，一直是较为迫切的需求。\n\n<!-- more -->\n\n从2013年底Docker开源，到现在已经发展了超过5年的时间，大家已经听说容器技术的优势和收益并逐渐接受准备拥抱之。但想要落地容器以及容器管理系统Kubernetes这种新一代基础设施，远没有想象中容易，在新技术落地的过程中，阻碍往往不是来自于技术本身，而在于观念的更新、生态的丰富以及易用性。\n\n首先介绍一下容器技术。容器是Linux Kernel的功能模块封装，主要基于有十年年以上历史的namespace(since1992)和cgroups(since2007)，容器镜像是一类CopyOnWrite的Overlay文件系统，跟虚拟机的主要区别是，容器间共享宿主机系统内核，所以启动速度较虚拟机更快，可以达到秒级。但简单来说，每个容器是一个进程以及它所拥有的资源和边界。Docker是目前容器技术的事实标准，也可能是未来应用的交付标准。\n\n![1.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_109865868b5c33bc6e1dd39f613c4ee0.png)\n\n然后介绍一下Kubernetes（k8s）。Kubernetes是跨主机、跨集群、跨IDC的容器管理系统，基于Google 生产负载上的 15 年管理经验（Borg），最初由 Google 的工程师设计和开发并开源，且融合了来自社区的经验与实践，已经成为企业级容器管理的事实标准。简单来说，Kubernetes是管理容器（进程）的云操作系统。\n\n![2.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_a3c86eb5251c5fe1c8c9b019b4dbe47d.png)\n\n## 架构演进\n回顾容器技术在得到App落地的过程， 主要有四个阶段：公有云虚拟机阶段，容器化Docker阶段，Kubernetes阶段，混合云阶段。\n\n![3.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_746373dcbc5009f540d93c4d406c10ac.png)\n\n### 虚拟机阶段\n此阶段的进步，是由发布系统代替了散落在不同代码仓库中的发布脚本，从shell脚本时代进入工具时代，使得发布不再需要运维人员参与，并且引入了发布审核机制，大大提高了发布效率。但是，新项目上线时，须经历购买服务器、系统初始化和安装运行环境、项目发版配置，调试部署过程脚本几个步骤，较为繁琐。并且需要增加实例时需要手工操作，仅适合管理少量使用ECS的服务发布。最让人头疼的是由于环境不一致引发的各种线上事故。\n\n![4.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_1071ae4d0a345d7d24d5fd6a293ed5e4.png)\n\n于是，我们决定用通过使用容器技术来解决这些问题。首先，制定出一系列规范：统一运行时版本、域名规范、端口规范、目录规范、日志规范等；然后基于规范开发了两层基础镜像：操作系统层、各语言运行时层；并且整理出Dockerfile模板、entrypoint.sh模板。当应用代码需要容器化时，只需要将Dockerfile和entrypoint.sh两个模板文件添加到项目代码仓库中即可，无需要任何修改，降低了改造的工作量。\n\n### 容器阶段\n通过应用的容器化部署，简化了环境管理，屏蔽了部署细节，统一了交付方式，基础设施只关注资源和容器状态，极大减少了运维工作量。同时，因为有容器的快速启动能力加持，扩容速度达到了秒级，使得应用实例的管理更加敏捷。\n\n![5.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_4cf6edea1a9256b2a9da00e103d92bf7.png)\n\n其底层是阿里云容器服务全家桶，上层根据发布流程和规范开发了相关功能。使用的组件有Gitlab（代码管理），Jenkins（调用其API进行docker build，并回调Dozer），Swarm API（发布、调整容器数量等核心功能），云监控（容器监控）、云日志服务（日志收集 存储 分析）、云SLB（多容器实例的汇聚和负载均衡）、云OpenAPI（添加集群Worker节点）。\n\n该方案的优点是：简单，快速，并且有良好的商业支持，可以将精力投在内部的落地上。缺点也是明显的，即限制较多，强依赖公有云，有时候业务的需求由于公有云暂未开放相关功能，不得不进行取舍。同时，由于历史原因我们使用了Overlay网络，当时这种网络方案在高负载集群中非常不稳定，并且Swarm集群缺乏广泛的生产环境考验并不稳定，以及社区不活跃，最终我们决定更新VPC网络和容器基础设施。\n\n\n### Kubernetes阶段\n我们首先花费巨大的时间和精力将公有云的经典网络（Public）中的所有资源迁移到了VPC网络（Private），在此过程中，由于容器化的应用有“一次构建，随处部署”的优势，这使得我们节省了很多时间。然后基于Kubernetes进行了新的容器基础设施的构建，同时建设了自己的监控和日志收集体系。\n\n![6.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_ded836d07936c88e3dedbd37a615a5d9.png)\n\n通过Kubernetes来进行资源管理和交付，通过管理API来进行应用上线和发布。Kubernetes同时提供了弹性伸缩和故障自动迁移，可以应对简单的流量突增或服务器节点故障等问题。还可跟私有云或公有云的基础设施进行联动，对存储、计算资源或负载均衡设备进行自动化管理。\n\n通过一年的努力，所有的业务流量迁移到了围绕容器和Kubernetes构建的基础设施之上。新的容器网络方案，从性能和稳定性上较之前有了本质提升。同时，Kubernetes的良好生态和优秀设计，底层服务器节点进行了标准化管理，极大简化了运维成本。它的容器配额更加高效，把所有的应用容器进行了资源保障和限制，最终提升了资源利用率。\n\n基础设施的更新，为业务架构迭代提供了支撑，应用的开始大范围的微服务化更新，带来了成倍的管理工作，同时微服务间调用链路变长，问题排查难度增加。此时，微服务的管理成为新的挑战，于是我们开始了工具平台研发和服务治理工作。\n\n\n### 微服务治理\n对于服务治理，我们是在2018年初启动，这方面我们的思路是：用规范和约定来将编程框架和基础设施打通、服务以编程框架的形式连接基础设施。\n\n开发框架：将与各个组件对接的代码和公共代码抽离到框架中，集成了服务注册和配置中心以及tracing功能。同时框架中提供Liveness和Readness探针、Graceful Shutdown等，统一日志格式等。通过使用这套框架，可以提升开发效率，统一微服务面向管理的接口。\n\n配置中心：统一管理配置，将配置和发布包解藕，减少业务开发者维护配置的工作。\n\n服务注册与发现：得到服务注册与服务发现的中间件，以AP为设计目标，支持多种健康检测和负载均衡方式，服务在启动时自动将自己注册到服务发现服务上。并且会实时（定期）从服务发现服务同步各个应用服务的地址列表到本地进行缓存，以起到加速的效果，同时监听远端中心事件，进行数据同步。\n\n追踪系统：分布式链路追踪系统，由开发框架中统一封装，每个服务内嵌标准化接口，将分布式请求还原成调用链路，可以集中展示各个服务节点的请求状态，以及花费时间，进行链路追踪、问题分析。\n\nAPI网关：API网关是系统与外界联通的入口，支持反向代理、重定向、限流等功能，基于服务发现服务发现中心的数据，进行后端实例的注册，API网关一般作为系统与外界联通的入口，在微服务架构中，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能，反向代理、重定向、限流等功能。\n\n![7.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_b3402b76a641ea720e0566823e7338fd.png)\n\n服务启动时请求配置中心，获取运行环境配置，将自身加入注册中心、获取所依赖服务信息，启动完成后，上报健康状态，并提供API服务。微服务间通过服务发现互相感知，服务通过框架接口来维护自身上线、离线。API网关连接到服务注册中心，动态感知服务变化，并自动更新API路由，外部流量通过API网关将流量转发到对应的业务模块。\n\n**Kubernetes在底层基础设施跟上层微服务治理组建中间，起到了承接作用。**\n\n\n## 方案细节\n所有Kubernetes方案中，网络方案是最重要的部分之一，由于我们的基础设施分别在公有云和私有云，虽然网络组件不同，但使用整体相似的网络模型。\n\n### 网络（公有云）\n公有云使用VPC网络，Kubernetes的网络组件，使用Flannel + alivpc Backend，每个Worker节点中的容器作为一个子网，掩码为24，并且使用NAT（地址转换），通过Flannel的alivpc插件调用vRouterAPI，将该此条路由信息写入VPC网络的虚拟路由器（vRouter）的路由表中，以此实现Pod IP与ECS IP互通，该方案设计简洁，比较稳定。\n\n![8.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_d9d2ef476afade3c26474ba3d6031885.png)\n\n### 网络（私有云）\n私有云中的网络方案，虽然看起来跟公有云结构很相似，但是基于Calico，主要是基于BGP路由协议进行路由分发，以达到互联互通的效果。节点内使用BIRD软路由，将每个节点上的Pod所在子网，掩码为24，发送给物理设备RouteReflector进行路由学习和发布。相较公有云的网络，BGP协议更加高效和可靠，同时网络设备可对网络流量进行路径优化，间接提升了网络性能。\n\n![9.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_23cd6c9294e33ff37c7d5b4f6af9d626.png)\n\n### 构建\n构建服务的核心是Jenkins，管理系统通过调用Jenkins的HTTP API进行任务管理，Jenkins接收到请求后将构建任务加入队列，排队构建。构建时，从Git仓库拉取代码，执行Docker build，产出Docker image，成功后push到registry存储。\n\nCI系统的流程是：开发人员在本地进行功能开发，本地测试，当通过单元测试后，进行代码提交。Git服务接收到开发人员的提交后，通知CI系统，触发CI流程。CI系统使用Jenkins进行构建，将代码编译成制品，并产出Docker镜像，然后将镜像push到镜像仓库存储，然后回调Kubernetes系统API，更新测试和预发布环境。\n\n![10.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_2b997ec11e9f583e672688263954ecc0.png)\n\n### 日志方案\n服务数量和应用规模变大时，需要将分布在各处的日志进行收集，集中存储，以提升日志分析效率。我们日志收集分为两类：应用日志和APM日志。\n\n![11.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_af6f720cef244c262aad8977500f0ef9.png)\n\n由于自建的日志系统需要较多服务器资源，后续要花费很多精力去优化，考虑到投入产出比，使用阿里云日志服务(SLS)比较有优势，目前我们容器内产生的日志都是使用ilogtail收集发往SLS，使用阿里云监控的日志关键字监控功能监控错误日志中的特定关键字，进行告警。\n\n另外，filebeat目前只负责收集APM产生的trace日志，发往kafka，由日志处理程序来进行消费，处理后序列化到ElasticSearch，由APM系统进行使用。\n\n### 日志收集\nfilebeat和ilogtail以DaemonSet方式部署，每个Worker节点上部署一个Agent。Pod使用EmptyDir易失性存储方式，通过HostPath挂载形式收集。应用将日志写入规范目录后，日志收集Agent会监听到特定事件，将新增日志取出，发往存储服务。\n\n![12.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_052b4de24adfa7a626516d3efa82dd91.png)\n\n### 监控\n我们的Prometheus是单独的服务器，以运行在集群外部的方式，通过APIServer获取资源信息，然后对自动发现的各个endpoint进行metrics pull。导出metrics，使用了cAdvisor、node-exporter、kube-state-metrics等组件来导出不同维度的度数。prometheus拉取到数据后，根据预设阈值进行评估，触发阈值后发往AlertManager，在AlertManager中根据不同的级别对告警进行路由、沉默和收敛。通知通道有：邮件、企业微信、短信。\n\n![13.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_61f382bf288779f9c9746baa80060555.png)\n\n当数据量大、查询较慢时，可使用Prometheus alert中的record语句，进行数据预处理，即将查询产生的结果存入新的metrics，使用新metric绘制图表和报警的rules检查，速度会有较大提升。\n\n\n### 监控（Pod）\n监控数据展示使用Grafana，数据来自Prometheus，Pod级别。主要展示CPU、内存使用率，TCP连接数。\n\n![14.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_4ee02b92968e55d95f088e28cc83cede.png)\n\n\n### 监控（服务）\n服务维度的监控项有：主要展示CPU、内存使用率，TCP连接数，文件描述符，nf_conntrack，IO等。\n\n![15.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_0efb742d91a74163e87e058209bb0e67.png)\n\n\n### 监控（大盘）\n监控大盘，管理人员使用监控大盘，关注各集群控制平面的各系统组件监控状况，资源的分配情况，依据资源水位进行节点的增减。\n\n![16.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_e3510e8f68040abbb29654cdb445a3ba.png)\n\n\n### 踩到的坑\n1. 初期由于我们的服务器还运行在阿里云经典网络（IaaS的早期多租户网络），在Swarm集群中我们使用了overlay网络，每个容器创建或删除时，由于需要集群内部广播该容器IP等信息，随着容器数量的增加，会有同步失败情况，造成服务容器间不通问题。\n2. 得到App的微服务，大部分是golang语言开发，由于我们的服务多为HTTP短连接形式，并且如果请求的是域名的话，golang会直接发起dns查询，当查询量过大时会遇到“lookup failed”相关报错，需要在容器内部运行nscd服务。\n3. 内核中的tcp参数，尤其是netfilter相关，对于容器网络稳定性影响较大，图中为目前我们在生产环境的Worker节点使用的内核参数。\n\n![17.png](https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_f1d5b1274057d6c0b52d8f92e30f488c.png)\n\n## 总结\n目前得到App后端服务中，80%以上项目、90%以上业务流量运行在Kubernetes管理的容器基础设施之上，日均发布近百次。通过容器的落地，简化了环境管理，统一了发布流程，屏蔽发布细节，基础设施只关注服务运行状态，开放了运维能力，打通了开发和运维间屏障。得益于Kubernetes的优秀设计，现在运维人员不需要关注节点用途，运行环境配置等功能，每个节点都只是资源池的一部分，只需关注集群资源水位，管理工作只剩下增减节点。通过资源配额，对计算资源进行再分配，从而保证和限制了应用的资源需求，进而提升了资源的利用率。\n\n未来我们将会Kubernetes和容器技术的特性进行混合云建设和落地，实现跨云基础环境下的流量调度、资源分配、伸缩等。同时精细化发布过程、设计多种可预期场景的弹性伸缩控制器降、强化资源交付效率，为研发人员赋能。\n\n> **愿大家都能够落地感受容器化交付方式的便利，拥抱Kubernetes“云操作系统”，希望我们的经验对大家有所帮助。**\n","slug":"Technical/k8s","published":1,"updated":"2019-12-05T11:52:26.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3so5k9w00124efyavkph16p","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>罗辑思维是一家创业公司，主要产品有：得到App。主要有两类业务，线上: 订阅课程、商城、听书、讲座、电子书，线下：跨年演讲，得到大学，线下大课等。目前有高质量用户3300万，后端服务以容器方式运行，正在基于Kubernetes进行混合云建设，目前线上主要的主机资源是使用的阿里云。</p>\n<p>由于技术选型比较“激进”，并且践行微服务架构设计，目前的语言栈有：按照占比排名，Golang、Node.js、Python、Java、PHP、C++，之前使用云主机（ECS）带来的运行环境管理复杂、发布过程不统一等问题。所以，将应用容器化以及微服务治理，一直是较为迫切的需求。</p>\n<a id=\"more\"></a>\n\n<p>从2013年底Docker开源，到现在已经发展了超过5年的时间，大家已经听说容器技术的优势和收益并逐渐接受准备拥抱之。但想要落地容器以及容器管理系统Kubernetes这种新一代基础设施，远没有想象中容易，在新技术落地的过程中，阻碍往往不是来自于技术本身，而在于观念的更新、生态的丰富以及易用性。</p>\n<p>首先介绍一下容器技术。容器是Linux Kernel的功能模块封装，主要基于有十年年以上历史的namespace(since1992)和cgroups(since2007)，容器镜像是一类CopyOnWrite的Overlay文件系统，跟虚拟机的主要区别是，容器间共享宿主机系统内核，所以启动速度较虚拟机更快，可以达到秒级。但简单来说，每个容器是一个进程以及它所拥有的资源和边界。Docker是目前容器技术的事实标准，也可能是未来应用的交付标准。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_109865868b5c33bc6e1dd39f613c4ee0.png\" alt=\"1.png\"></p>\n<p>然后介绍一下Kubernetes（k8s）。Kubernetes是跨主机、跨集群、跨IDC的容器管理系统，基于Google 生产负载上的 15 年管理经验（Borg），最初由 Google 的工程师设计和开发并开源，且融合了来自社区的经验与实践，已经成为企业级容器管理的事实标准。简单来说，Kubernetes是管理容器（进程）的云操作系统。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_a3c86eb5251c5fe1c8c9b019b4dbe47d.png\" alt=\"2.png\"></p>\n<h2 id=\"架构演进\"><a href=\"#架构演进\" class=\"headerlink\" title=\"架构演进\"></a>架构演进</h2><p>回顾容器技术在得到App落地的过程， 主要有四个阶段：公有云虚拟机阶段，容器化Docker阶段，Kubernetes阶段，混合云阶段。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_746373dcbc5009f540d93c4d406c10ac.png\" alt=\"3.png\"></p>\n<h3 id=\"虚拟机阶段\"><a href=\"#虚拟机阶段\" class=\"headerlink\" title=\"虚拟机阶段\"></a>虚拟机阶段</h3><p>此阶段的进步，是由发布系统代替了散落在不同代码仓库中的发布脚本，从shell脚本时代进入工具时代，使得发布不再需要运维人员参与，并且引入了发布审核机制，大大提高了发布效率。但是，新项目上线时，须经历购买服务器、系统初始化和安装运行环境、项目发版配置，调试部署过程脚本几个步骤，较为繁琐。并且需要增加实例时需要手工操作，仅适合管理少量使用ECS的服务发布。最让人头疼的是由于环境不一致引发的各种线上事故。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_1071ae4d0a345d7d24d5fd6a293ed5e4.png\" alt=\"4.png\"></p>\n<p>于是，我们决定用通过使用容器技术来解决这些问题。首先，制定出一系列规范：统一运行时版本、域名规范、端口规范、目录规范、日志规范等；然后基于规范开发了两层基础镜像：操作系统层、各语言运行时层；并且整理出Dockerfile模板、entrypoint.sh模板。当应用代码需要容器化时，只需要将Dockerfile和entrypoint.sh两个模板文件添加到项目代码仓库中即可，无需要任何修改，降低了改造的工作量。</p>\n<h3 id=\"容器阶段\"><a href=\"#容器阶段\" class=\"headerlink\" title=\"容器阶段\"></a>容器阶段</h3><p>通过应用的容器化部署，简化了环境管理，屏蔽了部署细节，统一了交付方式，基础设施只关注资源和容器状态，极大减少了运维工作量。同时，因为有容器的快速启动能力加持，扩容速度达到了秒级，使得应用实例的管理更加敏捷。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_4cf6edea1a9256b2a9da00e103d92bf7.png\" alt=\"5.png\"></p>\n<p>其底层是阿里云容器服务全家桶，上层根据发布流程和规范开发了相关功能。使用的组件有Gitlab（代码管理），Jenkins（调用其API进行docker build，并回调Dozer），Swarm API（发布、调整容器数量等核心功能），云监控（容器监控）、云日志服务（日志收集 存储 分析）、云SLB（多容器实例的汇聚和负载均衡）、云OpenAPI（添加集群Worker节点）。</p>\n<p>该方案的优点是：简单，快速，并且有良好的商业支持，可以将精力投在内部的落地上。缺点也是明显的，即限制较多，强依赖公有云，有时候业务的需求由于公有云暂未开放相关功能，不得不进行取舍。同时，由于历史原因我们使用了Overlay网络，当时这种网络方案在高负载集群中非常不稳定，并且Swarm集群缺乏广泛的生产环境考验并不稳定，以及社区不活跃，最终我们决定更新VPC网络和容器基础设施。</p>\n<h3 id=\"Kubernetes阶段\"><a href=\"#Kubernetes阶段\" class=\"headerlink\" title=\"Kubernetes阶段\"></a>Kubernetes阶段</h3><p>我们首先花费巨大的时间和精力将公有云的经典网络（Public）中的所有资源迁移到了VPC网络（Private），在此过程中，由于容器化的应用有“一次构建，随处部署”的优势，这使得我们节省了很多时间。然后基于Kubernetes进行了新的容器基础设施的构建，同时建设了自己的监控和日志收集体系。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_ded836d07936c88e3dedbd37a615a5d9.png\" alt=\"6.png\"></p>\n<p>通过Kubernetes来进行资源管理和交付，通过管理API来进行应用上线和发布。Kubernetes同时提供了弹性伸缩和故障自动迁移，可以应对简单的流量突增或服务器节点故障等问题。还可跟私有云或公有云的基础设施进行联动，对存储、计算资源或负载均衡设备进行自动化管理。</p>\n<p>通过一年的努力，所有的业务流量迁移到了围绕容器和Kubernetes构建的基础设施之上。新的容器网络方案，从性能和稳定性上较之前有了本质提升。同时，Kubernetes的良好生态和优秀设计，底层服务器节点进行了标准化管理，极大简化了运维成本。它的容器配额更加高效，把所有的应用容器进行了资源保障和限制，最终提升了资源利用率。</p>\n<p>基础设施的更新，为业务架构迭代提供了支撑，应用的开始大范围的微服务化更新，带来了成倍的管理工作，同时微服务间调用链路变长，问题排查难度增加。此时，微服务的管理成为新的挑战，于是我们开始了工具平台研发和服务治理工作。</p>\n<h3 id=\"微服务治理\"><a href=\"#微服务治理\" class=\"headerlink\" title=\"微服务治理\"></a>微服务治理</h3><p>对于服务治理，我们是在2018年初启动，这方面我们的思路是：用规范和约定来将编程框架和基础设施打通、服务以编程框架的形式连接基础设施。</p>\n<p>开发框架：将与各个组件对接的代码和公共代码抽离到框架中，集成了服务注册和配置中心以及tracing功能。同时框架中提供Liveness和Readness探针、Graceful Shutdown等，统一日志格式等。通过使用这套框架，可以提升开发效率，统一微服务面向管理的接口。</p>\n<p>配置中心：统一管理配置，将配置和发布包解藕，减少业务开发者维护配置的工作。</p>\n<p>服务注册与发现：得到服务注册与服务发现的中间件，以AP为设计目标，支持多种健康检测和负载均衡方式，服务在启动时自动将自己注册到服务发现服务上。并且会实时（定期）从服务发现服务同步各个应用服务的地址列表到本地进行缓存，以起到加速的效果，同时监听远端中心事件，进行数据同步。</p>\n<p>追踪系统：分布式链路追踪系统，由开发框架中统一封装，每个服务内嵌标准化接口，将分布式请求还原成调用链路，可以集中展示各个服务节点的请求状态，以及花费时间，进行链路追踪、问题分析。</p>\n<p>API网关：API网关是系统与外界联通的入口，支持反向代理、重定向、限流等功能，基于服务发现服务发现中心的数据，进行后端实例的注册，API网关一般作为系统与外界联通的入口，在微服务架构中，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能，反向代理、重定向、限流等功能。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_b3402b76a641ea720e0566823e7338fd.png\" alt=\"7.png\"></p>\n<p>服务启动时请求配置中心，获取运行环境配置，将自身加入注册中心、获取所依赖服务信息，启动完成后，上报健康状态，并提供API服务。微服务间通过服务发现互相感知，服务通过框架接口来维护自身上线、离线。API网关连接到服务注册中心，动态感知服务变化，并自动更新API路由，外部流量通过API网关将流量转发到对应的业务模块。</p>\n<p><strong>Kubernetes在底层基础设施跟上层微服务治理组建中间，起到了承接作用。</strong></p>\n<h2 id=\"方案细节\"><a href=\"#方案细节\" class=\"headerlink\" title=\"方案细节\"></a>方案细节</h2><p>所有Kubernetes方案中，网络方案是最重要的部分之一，由于我们的基础设施分别在公有云和私有云，虽然网络组件不同，但使用整体相似的网络模型。</p>\n<h3 id=\"网络（公有云）\"><a href=\"#网络（公有云）\" class=\"headerlink\" title=\"网络（公有云）\"></a>网络（公有云）</h3><p>公有云使用VPC网络，Kubernetes的网络组件，使用Flannel + alivpc Backend，每个Worker节点中的容器作为一个子网，掩码为24，并且使用NAT（地址转换），通过Flannel的alivpc插件调用vRouterAPI，将该此条路由信息写入VPC网络的虚拟路由器（vRouter）的路由表中，以此实现Pod IP与ECS IP互通，该方案设计简洁，比较稳定。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_d9d2ef476afade3c26474ba3d6031885.png\" alt=\"8.png\"></p>\n<h3 id=\"网络（私有云）\"><a href=\"#网络（私有云）\" class=\"headerlink\" title=\"网络（私有云）\"></a>网络（私有云）</h3><p>私有云中的网络方案，虽然看起来跟公有云结构很相似，但是基于Calico，主要是基于BGP路由协议进行路由分发，以达到互联互通的效果。节点内使用BIRD软路由，将每个节点上的Pod所在子网，掩码为24，发送给物理设备RouteReflector进行路由学习和发布。相较公有云的网络，BGP协议更加高效和可靠，同时网络设备可对网络流量进行路径优化，间接提升了网络性能。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_23cd6c9294e33ff37c7d5b4f6af9d626.png\" alt=\"9.png\"></p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>构建服务的核心是Jenkins，管理系统通过调用Jenkins的HTTP API进行任务管理，Jenkins接收到请求后将构建任务加入队列，排队构建。构建时，从Git仓库拉取代码，执行Docker build，产出Docker image，成功后push到registry存储。</p>\n<p>CI系统的流程是：开发人员在本地进行功能开发，本地测试，当通过单元测试后，进行代码提交。Git服务接收到开发人员的提交后，通知CI系统，触发CI流程。CI系统使用Jenkins进行构建，将代码编译成制品，并产出Docker镜像，然后将镜像push到镜像仓库存储，然后回调Kubernetes系统API，更新测试和预发布环境。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_2b997ec11e9f583e672688263954ecc0.png\" alt=\"10.png\"></p>\n<h3 id=\"日志方案\"><a href=\"#日志方案\" class=\"headerlink\" title=\"日志方案\"></a>日志方案</h3><p>服务数量和应用规模变大时，需要将分布在各处的日志进行收集，集中存储，以提升日志分析效率。我们日志收集分为两类：应用日志和APM日志。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_af6f720cef244c262aad8977500f0ef9.png\" alt=\"11.png\"></p>\n<p>由于自建的日志系统需要较多服务器资源，后续要花费很多精力去优化，考虑到投入产出比，使用阿里云日志服务(SLS)比较有优势，目前我们容器内产生的日志都是使用ilogtail收集发往SLS，使用阿里云监控的日志关键字监控功能监控错误日志中的特定关键字，进行告警。</p>\n<p>另外，filebeat目前只负责收集APM产生的trace日志，发往kafka，由日志处理程序来进行消费，处理后序列化到ElasticSearch，由APM系统进行使用。</p>\n<h3 id=\"日志收集\"><a href=\"#日志收集\" class=\"headerlink\" title=\"日志收集\"></a>日志收集</h3><p>filebeat和ilogtail以DaemonSet方式部署，每个Worker节点上部署一个Agent。Pod使用EmptyDir易失性存储方式，通过HostPath挂载形式收集。应用将日志写入规范目录后，日志收集Agent会监听到特定事件，将新增日志取出，发往存储服务。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_052b4de24adfa7a626516d3efa82dd91.png\" alt=\"12.png\"></p>\n<h3 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h3><p>我们的Prometheus是单独的服务器，以运行在集群外部的方式，通过APIServer获取资源信息，然后对自动发现的各个endpoint进行metrics pull。导出metrics，使用了cAdvisor、node-exporter、kube-state-metrics等组件来导出不同维度的度数。prometheus拉取到数据后，根据预设阈值进行评估，触发阈值后发往AlertManager，在AlertManager中根据不同的级别对告警进行路由、沉默和收敛。通知通道有：邮件、企业微信、短信。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_61f382bf288779f9c9746baa80060555.png\" alt=\"13.png\"></p>\n<p>当数据量大、查询较慢时，可使用Prometheus alert中的record语句，进行数据预处理，即将查询产生的结果存入新的metrics，使用新metric绘制图表和报警的rules检查，速度会有较大提升。</p>\n<h3 id=\"监控（Pod）\"><a href=\"#监控（Pod）\" class=\"headerlink\" title=\"监控（Pod）\"></a>监控（Pod）</h3><p>监控数据展示使用Grafana，数据来自Prometheus，Pod级别。主要展示CPU、内存使用率，TCP连接数。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_4ee02b92968e55d95f088e28cc83cede.png\" alt=\"14.png\"></p>\n<h3 id=\"监控（服务）\"><a href=\"#监控（服务）\" class=\"headerlink\" title=\"监控（服务）\"></a>监控（服务）</h3><p>服务维度的监控项有：主要展示CPU、内存使用率，TCP连接数，文件描述符，nf_conntrack，IO等。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_0efb742d91a74163e87e058209bb0e67.png\" alt=\"15.png\"></p>\n<h3 id=\"监控（大盘）\"><a href=\"#监控（大盘）\" class=\"headerlink\" title=\"监控（大盘）\"></a>监控（大盘）</h3><p>监控大盘，管理人员使用监控大盘，关注各集群控制平面的各系统组件监控状况，资源的分配情况，依据资源水位进行节点的增减。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_e3510e8f68040abbb29654cdb445a3ba.png\" alt=\"16.png\"></p>\n<h3 id=\"踩到的坑\"><a href=\"#踩到的坑\" class=\"headerlink\" title=\"踩到的坑\"></a>踩到的坑</h3><ol>\n<li>初期由于我们的服务器还运行在阿里云经典网络（IaaS的早期多租户网络），在Swarm集群中我们使用了overlay网络，每个容器创建或删除时，由于需要集群内部广播该容器IP等信息，随着容器数量的增加，会有同步失败情况，造成服务容器间不通问题。</li>\n<li>得到App的微服务，大部分是golang语言开发，由于我们的服务多为HTTP短连接形式，并且如果请求的是域名的话，golang会直接发起dns查询，当查询量过大时会遇到“lookup failed”相关报错，需要在容器内部运行nscd服务。</li>\n<li>内核中的tcp参数，尤其是netfilter相关，对于容器网络稳定性影响较大，图中为目前我们在生产环境的Worker节点使用的内核参数。</li>\n</ol>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_f1d5b1274057d6c0b52d8f92e30f488c.png\" alt=\"17.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>目前得到App后端服务中，80%以上项目、90%以上业务流量运行在Kubernetes管理的容器基础设施之上，日均发布近百次。通过容器的落地，简化了环境管理，统一了发布流程，屏蔽发布细节，基础设施只关注服务运行状态，开放了运维能力，打通了开发和运维间屏障。得益于Kubernetes的优秀设计，现在运维人员不需要关注节点用途，运行环境配置等功能，每个节点都只是资源池的一部分，只需关注集群资源水位，管理工作只剩下增减节点。通过资源配额，对计算资源进行再分配，从而保证和限制了应用的资源需求，进而提升了资源的利用率。</p>\n<p>未来我们将会Kubernetes和容器技术的特性进行混合云建设和落地，实现跨云基础环境下的流量调度、资源分配、伸缩等。同时精细化发布过程、设计多种可预期场景的弹性伸缩控制器降、强化资源交付效率，为研发人员赋能。</p>\n<blockquote>\n<p><strong>愿大家都能够落地感受容器化交付方式的便利，拥抱Kubernetes“云操作系统”，希望我们的经验对大家有所帮助。</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>罗辑思维是一家创业公司，主要产品有：得到App。主要有两类业务，线上: 订阅课程、商城、听书、讲座、电子书，线下：跨年演讲，得到大学，线下大课等。目前有高质量用户3300万，后端服务以容器方式运行，正在基于Kubernetes进行混合云建设，目前线上主要的主机资源是使用的阿里云。</p>\n<p>由于技术选型比较“激进”，并且践行微服务架构设计，目前的语言栈有：按照占比排名，Golang、Node.js、Python、Java、PHP、C++，之前使用云主机（ECS）带来的运行环境管理复杂、发布过程不统一等问题。所以，将应用容器化以及微服务治理，一直是较为迫切的需求。</p>","more":"<p>从2013年底Docker开源，到现在已经发展了超过5年的时间，大家已经听说容器技术的优势和收益并逐渐接受准备拥抱之。但想要落地容器以及容器管理系统Kubernetes这种新一代基础设施，远没有想象中容易，在新技术落地的过程中，阻碍往往不是来自于技术本身，而在于观念的更新、生态的丰富以及易用性。</p>\n<p>首先介绍一下容器技术。容器是Linux Kernel的功能模块封装，主要基于有十年年以上历史的namespace(since1992)和cgroups(since2007)，容器镜像是一类CopyOnWrite的Overlay文件系统，跟虚拟机的主要区别是，容器间共享宿主机系统内核，所以启动速度较虚拟机更快，可以达到秒级。但简单来说，每个容器是一个进程以及它所拥有的资源和边界。Docker是目前容器技术的事实标准，也可能是未来应用的交付标准。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_109865868b5c33bc6e1dd39f613c4ee0.png\" alt=\"1.png\"></p>\n<p>然后介绍一下Kubernetes（k8s）。Kubernetes是跨主机、跨集群、跨IDC的容器管理系统，基于Google 生产负载上的 15 年管理经验（Borg），最初由 Google 的工程师设计和开发并开源，且融合了来自社区的经验与实践，已经成为企业级容器管理的事实标准。简单来说，Kubernetes是管理容器（进程）的云操作系统。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_a3c86eb5251c5fe1c8c9b019b4dbe47d.png\" alt=\"2.png\"></p>\n<h2 id=\"架构演进\"><a href=\"#架构演进\" class=\"headerlink\" title=\"架构演进\"></a>架构演进</h2><p>回顾容器技术在得到App落地的过程， 主要有四个阶段：公有云虚拟机阶段，容器化Docker阶段，Kubernetes阶段，混合云阶段。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_746373dcbc5009f540d93c4d406c10ac.png\" alt=\"3.png\"></p>\n<h3 id=\"虚拟机阶段\"><a href=\"#虚拟机阶段\" class=\"headerlink\" title=\"虚拟机阶段\"></a>虚拟机阶段</h3><p>此阶段的进步，是由发布系统代替了散落在不同代码仓库中的发布脚本，从shell脚本时代进入工具时代，使得发布不再需要运维人员参与，并且引入了发布审核机制，大大提高了发布效率。但是，新项目上线时，须经历购买服务器、系统初始化和安装运行环境、项目发版配置，调试部署过程脚本几个步骤，较为繁琐。并且需要增加实例时需要手工操作，仅适合管理少量使用ECS的服务发布。最让人头疼的是由于环境不一致引发的各种线上事故。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_1071ae4d0a345d7d24d5fd6a293ed5e4.png\" alt=\"4.png\"></p>\n<p>于是，我们决定用通过使用容器技术来解决这些问题。首先，制定出一系列规范：统一运行时版本、域名规范、端口规范、目录规范、日志规范等；然后基于规范开发了两层基础镜像：操作系统层、各语言运行时层；并且整理出Dockerfile模板、entrypoint.sh模板。当应用代码需要容器化时，只需要将Dockerfile和entrypoint.sh两个模板文件添加到项目代码仓库中即可，无需要任何修改，降低了改造的工作量。</p>\n<h3 id=\"容器阶段\"><a href=\"#容器阶段\" class=\"headerlink\" title=\"容器阶段\"></a>容器阶段</h3><p>通过应用的容器化部署，简化了环境管理，屏蔽了部署细节，统一了交付方式，基础设施只关注资源和容器状态，极大减少了运维工作量。同时，因为有容器的快速启动能力加持，扩容速度达到了秒级，使得应用实例的管理更加敏捷。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_4cf6edea1a9256b2a9da00e103d92bf7.png\" alt=\"5.png\"></p>\n<p>其底层是阿里云容器服务全家桶，上层根据发布流程和规范开发了相关功能。使用的组件有Gitlab（代码管理），Jenkins（调用其API进行docker build，并回调Dozer），Swarm API（发布、调整容器数量等核心功能），云监控（容器监控）、云日志服务（日志收集 存储 分析）、云SLB（多容器实例的汇聚和负载均衡）、云OpenAPI（添加集群Worker节点）。</p>\n<p>该方案的优点是：简单，快速，并且有良好的商业支持，可以将精力投在内部的落地上。缺点也是明显的，即限制较多，强依赖公有云，有时候业务的需求由于公有云暂未开放相关功能，不得不进行取舍。同时，由于历史原因我们使用了Overlay网络，当时这种网络方案在高负载集群中非常不稳定，并且Swarm集群缺乏广泛的生产环境考验并不稳定，以及社区不活跃，最终我们决定更新VPC网络和容器基础设施。</p>\n<h3 id=\"Kubernetes阶段\"><a href=\"#Kubernetes阶段\" class=\"headerlink\" title=\"Kubernetes阶段\"></a>Kubernetes阶段</h3><p>我们首先花费巨大的时间和精力将公有云的经典网络（Public）中的所有资源迁移到了VPC网络（Private），在此过程中，由于容器化的应用有“一次构建，随处部署”的优势，这使得我们节省了很多时间。然后基于Kubernetes进行了新的容器基础设施的构建，同时建设了自己的监控和日志收集体系。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_ded836d07936c88e3dedbd37a615a5d9.png\" alt=\"6.png\"></p>\n<p>通过Kubernetes来进行资源管理和交付，通过管理API来进行应用上线和发布。Kubernetes同时提供了弹性伸缩和故障自动迁移，可以应对简单的流量突增或服务器节点故障等问题。还可跟私有云或公有云的基础设施进行联动，对存储、计算资源或负载均衡设备进行自动化管理。</p>\n<p>通过一年的努力，所有的业务流量迁移到了围绕容器和Kubernetes构建的基础设施之上。新的容器网络方案，从性能和稳定性上较之前有了本质提升。同时，Kubernetes的良好生态和优秀设计，底层服务器节点进行了标准化管理，极大简化了运维成本。它的容器配额更加高效，把所有的应用容器进行了资源保障和限制，最终提升了资源利用率。</p>\n<p>基础设施的更新，为业务架构迭代提供了支撑，应用的开始大范围的微服务化更新，带来了成倍的管理工作，同时微服务间调用链路变长，问题排查难度增加。此时，微服务的管理成为新的挑战，于是我们开始了工具平台研发和服务治理工作。</p>\n<h3 id=\"微服务治理\"><a href=\"#微服务治理\" class=\"headerlink\" title=\"微服务治理\"></a>微服务治理</h3><p>对于服务治理，我们是在2018年初启动，这方面我们的思路是：用规范和约定来将编程框架和基础设施打通、服务以编程框架的形式连接基础设施。</p>\n<p>开发框架：将与各个组件对接的代码和公共代码抽离到框架中，集成了服务注册和配置中心以及tracing功能。同时框架中提供Liveness和Readness探针、Graceful Shutdown等，统一日志格式等。通过使用这套框架，可以提升开发效率，统一微服务面向管理的接口。</p>\n<p>配置中心：统一管理配置，将配置和发布包解藕，减少业务开发者维护配置的工作。</p>\n<p>服务注册与发现：得到服务注册与服务发现的中间件，以AP为设计目标，支持多种健康检测和负载均衡方式，服务在启动时自动将自己注册到服务发现服务上。并且会实时（定期）从服务发现服务同步各个应用服务的地址列表到本地进行缓存，以起到加速的效果，同时监听远端中心事件，进行数据同步。</p>\n<p>追踪系统：分布式链路追踪系统，由开发框架中统一封装，每个服务内嵌标准化接口，将分布式请求还原成调用链路，可以集中展示各个服务节点的请求状态，以及花费时间，进行链路追踪、问题分析。</p>\n<p>API网关：API网关是系统与外界联通的入口，支持反向代理、重定向、限流等功能，基于服务发现服务发现中心的数据，进行后端实例的注册，API网关一般作为系统与外界联通的入口，在微服务架构中，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能，反向代理、重定向、限流等功能。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_b3402b76a641ea720e0566823e7338fd.png\" alt=\"7.png\"></p>\n<p>服务启动时请求配置中心，获取运行环境配置，将自身加入注册中心、获取所依赖服务信息，启动完成后，上报健康状态，并提供API服务。微服务间通过服务发现互相感知，服务通过框架接口来维护自身上线、离线。API网关连接到服务注册中心，动态感知服务变化，并自动更新API路由，外部流量通过API网关将流量转发到对应的业务模块。</p>\n<p><strong>Kubernetes在底层基础设施跟上层微服务治理组建中间，起到了承接作用。</strong></p>\n<h2 id=\"方案细节\"><a href=\"#方案细节\" class=\"headerlink\" title=\"方案细节\"></a>方案细节</h2><p>所有Kubernetes方案中，网络方案是最重要的部分之一，由于我们的基础设施分别在公有云和私有云，虽然网络组件不同，但使用整体相似的网络模型。</p>\n<h3 id=\"网络（公有云）\"><a href=\"#网络（公有云）\" class=\"headerlink\" title=\"网络（公有云）\"></a>网络（公有云）</h3><p>公有云使用VPC网络，Kubernetes的网络组件，使用Flannel + alivpc Backend，每个Worker节点中的容器作为一个子网，掩码为24，并且使用NAT（地址转换），通过Flannel的alivpc插件调用vRouterAPI，将该此条路由信息写入VPC网络的虚拟路由器（vRouter）的路由表中，以此实现Pod IP与ECS IP互通，该方案设计简洁，比较稳定。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_d9d2ef476afade3c26474ba3d6031885.png\" alt=\"8.png\"></p>\n<h3 id=\"网络（私有云）\"><a href=\"#网络（私有云）\" class=\"headerlink\" title=\"网络（私有云）\"></a>网络（私有云）</h3><p>私有云中的网络方案，虽然看起来跟公有云结构很相似，但是基于Calico，主要是基于BGP路由协议进行路由分发，以达到互联互通的效果。节点内使用BIRD软路由，将每个节点上的Pod所在子网，掩码为24，发送给物理设备RouteReflector进行路由学习和发布。相较公有云的网络，BGP协议更加高效和可靠，同时网络设备可对网络流量进行路径优化，间接提升了网络性能。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_23cd6c9294e33ff37c7d5b4f6af9d626.png\" alt=\"9.png\"></p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>构建服务的核心是Jenkins，管理系统通过调用Jenkins的HTTP API进行任务管理，Jenkins接收到请求后将构建任务加入队列，排队构建。构建时，从Git仓库拉取代码，执行Docker build，产出Docker image，成功后push到registry存储。</p>\n<p>CI系统的流程是：开发人员在本地进行功能开发，本地测试，当通过单元测试后，进行代码提交。Git服务接收到开发人员的提交后，通知CI系统，触发CI流程。CI系统使用Jenkins进行构建，将代码编译成制品，并产出Docker镜像，然后将镜像push到镜像仓库存储，然后回调Kubernetes系统API，更新测试和预发布环境。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_2b997ec11e9f583e672688263954ecc0.png\" alt=\"10.png\"></p>\n<h3 id=\"日志方案\"><a href=\"#日志方案\" class=\"headerlink\" title=\"日志方案\"></a>日志方案</h3><p>服务数量和应用规模变大时，需要将分布在各处的日志进行收集，集中存储，以提升日志分析效率。我们日志收集分为两类：应用日志和APM日志。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_af6f720cef244c262aad8977500f0ef9.png\" alt=\"11.png\"></p>\n<p>由于自建的日志系统需要较多服务器资源，后续要花费很多精力去优化，考虑到投入产出比，使用阿里云日志服务(SLS)比较有优势，目前我们容器内产生的日志都是使用ilogtail收集发往SLS，使用阿里云监控的日志关键字监控功能监控错误日志中的特定关键字，进行告警。</p>\n<p>另外，filebeat目前只负责收集APM产生的trace日志，发往kafka，由日志处理程序来进行消费，处理后序列化到ElasticSearch，由APM系统进行使用。</p>\n<h3 id=\"日志收集\"><a href=\"#日志收集\" class=\"headerlink\" title=\"日志收集\"></a>日志收集</h3><p>filebeat和ilogtail以DaemonSet方式部署，每个Worker节点上部署一个Agent。Pod使用EmptyDir易失性存储方式，通过HostPath挂载形式收集。应用将日志写入规范目录后，日志收集Agent会监听到特定事件，将新增日志取出，发往存储服务。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_052b4de24adfa7a626516d3efa82dd91.png\" alt=\"12.png\"></p>\n<h3 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h3><p>我们的Prometheus是单独的服务器，以运行在集群外部的方式，通过APIServer获取资源信息，然后对自动发现的各个endpoint进行metrics pull。导出metrics，使用了cAdvisor、node-exporter、kube-state-metrics等组件来导出不同维度的度数。prometheus拉取到数据后，根据预设阈值进行评估，触发阈值后发往AlertManager，在AlertManager中根据不同的级别对告警进行路由、沉默和收敛。通知通道有：邮件、企业微信、短信。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_61f382bf288779f9c9746baa80060555.png\" alt=\"13.png\"></p>\n<p>当数据量大、查询较慢时，可使用Prometheus alert中的record语句，进行数据预处理，即将查询产生的结果存入新的metrics，使用新metric绘制图表和报警的rules检查，速度会有较大提升。</p>\n<h3 id=\"监控（Pod）\"><a href=\"#监控（Pod）\" class=\"headerlink\" title=\"监控（Pod）\"></a>监控（Pod）</h3><p>监控数据展示使用Grafana，数据来自Prometheus，Pod级别。主要展示CPU、内存使用率，TCP连接数。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_4ee02b92968e55d95f088e28cc83cede.png\" alt=\"14.png\"></p>\n<h3 id=\"监控（服务）\"><a href=\"#监控（服务）\" class=\"headerlink\" title=\"监控（服务）\"></a>监控（服务）</h3><p>服务维度的监控项有：主要展示CPU、内存使用率，TCP连接数，文件描述符，nf_conntrack，IO等。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_0efb742d91a74163e87e058209bb0e67.png\" alt=\"15.png\"></p>\n<h3 id=\"监控（大盘）\"><a href=\"#监控（大盘）\" class=\"headerlink\" title=\"监控（大盘）\"></a>监控（大盘）</h3><p>监控大盘，管理人员使用监控大盘，关注各集群控制平面的各系统组件监控状况，资源的分配情况，依据资源水位进行节点的增减。</p>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_e3510e8f68040abbb29654cdb445a3ba.png\" alt=\"16.png\"></p>\n<h3 id=\"踩到的坑\"><a href=\"#踩到的坑\" class=\"headerlink\" title=\"踩到的坑\"></a>踩到的坑</h3><ol>\n<li>初期由于我们的服务器还运行在阿里云经典网络（IaaS的早期多租户网络），在Swarm集群中我们使用了overlay网络，每个容器创建或删除时，由于需要集群内部广播该容器IP等信息，随着容器数量的增加，会有同步失败情况，造成服务容器间不通问题。</li>\n<li>得到App的微服务，大部分是golang语言开发，由于我们的服务多为HTTP短连接形式，并且如果请求的是域名的话，golang会直接发起dns查询，当查询量过大时会遇到“lookup failed”相关报错，需要在容器内部运行nscd服务。</li>\n<li>内核中的tcp参数，尤其是netfilter相关，对于容器网络稳定性影响较大，图中为目前我们在生产环境的Worker节点使用的内核参数。</li>\n</ol>\n<p><img src=\"https://luoji-img.oss-cn-beijing.aliyuncs.com/fe/blog/20191022/upload_f1d5b1274057d6c0b52d8f92e30f488c.png\" alt=\"17.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>目前得到App后端服务中，80%以上项目、90%以上业务流量运行在Kubernetes管理的容器基础设施之上，日均发布近百次。通过容器的落地，简化了环境管理，统一了发布流程，屏蔽发布细节，基础设施只关注服务运行状态，开放了运维能力，打通了开发和运维间屏障。得益于Kubernetes的优秀设计，现在运维人员不需要关注节点用途，运行环境配置等功能，每个节点都只是资源池的一部分，只需关注集群资源水位，管理工作只剩下增减节点。通过资源配额，对计算资源进行再分配，从而保证和限制了应用的资源需求，进而提升了资源的利用率。</p>\n<p>未来我们将会Kubernetes和容器技术的特性进行混合云建设和落地，实现跨云基础环境下的流量调度、资源分配、伸缩等。同时精细化发布过程、设计多种可预期场景的弹性伸缩控制器降、强化资源交付效率，为研发人员赋能。</p>\n<blockquote>\n<p><strong>愿大家都能够落地感受容器化交付方式的便利，拥抱Kubernetes“云操作系统”，希望我们的经验对大家有所帮助。</strong></p>\n</blockquote>"},{"title":"如何打造一套Vue组件库","date":"2019-08-25T16:00:00.000Z","author":"zouyawei","toc":true,"thumbnail":"https://piccdn.luojilab.com/fe-oss/default/MTU2NzM5MjkwMTYy.jpeg","_content":"\n# 开篇\n\n组件库能帮我们节省开发精力，无需所有东西都从头开始去做，通过一个个小组件拼接起来，就得到了我们想要的最终页面。在日常开发中如果没有特定的一些业务需求，使用组件库进行开发无疑是更便捷高效，而且质量也相对更高的方案。\n\n目前的开源组件库有很多，不管是react还是vue的体系里都有很多非常优秀的组件库，比如我经常使用的就有elementui和iview。当然也还有其他的一些组件库，他们的本质其实都是为了节省重复造基础组件这一轮子的过程。也有的公司可能会对自己公司的产品有特别的需求，不太愿意使用开源的组件库的样式，或者自己有一些公司内部的业务项目需要用到，但开源项目无法满足的组件需要沉淀下来的时候，自建一套组件库就成为了一个作为业务驱动所需要的项目。\n\n<!-- more -->\n\n本文会从 ”准备“ 和 ”实践“ 两个阶段来阐述，一步步完成一个组件库的打造。大致内容如下：\n\n1. **准备**：主要讲了搭建组件库之前我们需要先提及一下一些基础知识，为实践阶段做铺垫。\n2. **实践**：有了一些基本概念，咱们就直接通过一个实践案例来动手搭建一套基础的组件库。从做的过程中去感受组件库的设计。\n\n希望通过本文的分享以及包含的一个简单的 **实际操作案例**，能让你从组件库使用者的角色向组件库创造者的角色迈进那么一小步，在日常使用组件库的时候心里有个底，那我的目的也就达到了。\n\n我们的案例地址是：https://arronkler.github.io/lime-ui/ \n\n对应的 repo也就是：https://github.com/arronKler/lime-ui\n\n# 准备 ：打造组件库之前你应该知道些什么？\n\n这一个章节主要是想先解析清楚一些在组件库的建立中会用到的一些平时在业务概念中很少去关注的概念。我会分为工程和组件两个方面来阐述，把我所知道的一些其中的技巧和坑点都交付出来，以帮助我们在实际去做的过程中可以有所准备。\n\n\n\n## 项目：做一个组件库项目有哪些额外需要考虑的事？\n\n做组件库项目和常规业务项目肯定还是有一些事情是我们业务项目不怎么需要，但是类库项目一般都会考虑的事，这一小节就是介绍说明一下，那些我们在做组件库的过程中需要额外考虑的事。\n\n\n\n### 组件测试\n\n很多开发者平时业务项目都比较赶，然后就是一般业务项目中都不怎么写测试脚本。但在做一个组件库项目的过程中，最好还是有对应的组件测试的脚本。至少有两点好处：\n\n1. 自动化测试你写的组件的功能特性\n2. 改动代码不用担心会影响之前的使用者。（测试脚本会告诉你有没有出现未预料到的影响）\n\n对于类库型项目，我觉得第二点好处还是很重要的，这才能保证你在不断推进项目升级迭代的过程中，确保不会出现影响已经在用你所创造的类库的那些人，毕竟你要是升级一次让他的项目出现大问题，那可真保不准别人饭碗都能丢。（就像之前的antd的圣诞节雪花事件一样）\n\n由于我们是要写vue的组件库，这里推荐的测试工具集是 `vue-test-utils` 这套工具，https://vue-test-utils.vuejs.org/zh/ 。其中提供的各种测试函数和方法都能很好的满足我们的测试需要。具体的安装使用可以参见它的文档。\n\n我们这里主要想提的是 **组件测试到底要测什么？**\n\n我们这里给到一张很直观的图，看到这张图其实你应该也清楚了这个问题的答案\n\n![IMG](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzNDE2.png)\n\n这张图来自视频 https://www.youtube.com/watch?v=OIpfWTThrK8 ，也是vue-test-util推荐的一个非常棒的演讲，想要具体了解可以进去看一下。\n\n所以回过头来，组件测试，实际需要我们不仅仅作为创造者的角度对组件的功能特性进行测试。更要从使用者的角度来看，把组件当做一个“黑盒子”，我们能给到它的是用户的交互行为、props数据等，这个“黑盒子”也会对应的反馈出一定的事件和渲染的视图可以被使用者所捕获和观察。通过对这些位置的检查，我们就能获知一个组件的行为是否如我们所愿的去进行着，确保它的行为一定是一致不出幺蛾子的。\n\n另外还想提的一点偏的话题就是 **契约精神**。作为组件的使用者，我使用你的组件，等于咱们签订一个契约，这个组件的所有行为应该是和你描述的是一致的，不会出现第三种意料之外的可能。毕竟对于企业项目来说，我们不喜欢surprise。antd的彩蛋事件也是给各位都提个醒，咱们搞技术可以这么玩也挺有创意，但是这种公用类库，特别是企业使用的也比较多的，还是把创意收一收，讲究契约，不讲surprise。就算是自家企业内部使用的组件库，除非是业务上的人都是认可的，否则也不要做这种危险试探。\n\n好的组件测试也是能够帮助我们识别出那些我们有意或无意创造的surprise，有意的咱就不说了，就怕是那种无意中出现的surprise那就比较要命了，所以写好组件测试还是挺有必要的。\n\n\n\n### 文档生成\n\n一般来说，我们做一个类库项目都会有对应的说明文档的，有的项目一个README.md 的文档就够了，有的可能需要在来几个 Markdown的文档。对于组件库这一类的项目来说，我们可以用文档工具来辅助直接生成文档。这里推荐 vuepress ，可以快速帮我们完成组件库文档的建设。(https://vuepress.vuejs.org/zh/guide/)\n\nvuepress是一个文档生成工具，默认的样式和vue官方文档几乎是一致的，因为创造它的初衷就是想为vue和相关的子项目提供文档支持。它内置了 Markdown的扩展，写文档的时候就是用 markdown来写，最让人省心的是<u>你可以直接在 Markdown 文件中使用Vue组件</u>，意味着我们的组件库中写的一个个组件，可以直接放到文档里去用，展示组件的实际运行效果。 我们的案例网站也就是通过vuepress来写的，生成静态网站后，用 `gh-pages` 直接部署到github上。\n\nvuepress更好的一点在于你可以自定义其webpack配置和主题，意味着你可以让你自己的文档站点在开发阶段有更多的功能特性的支持，同时可以把站点风格改成自己的一套主题风格。这就无需我们重头开始去做一套了，对于咱们想要快速完成组件库文档建设这一需求来说，还是挺有效的。\n\n不过这只是咱们要做的事情的一个辅助性的东西，所以具体的使用咱们在实践阶段再说明，这里就不赘述了。\n\n\n\n### 自定义主题\n\n自定义主题的功能对于一个开源类库来说肯定还是挺有好处的，这样使用者就可以自己使用组件库的功能而在界面设计上使用自己的设计风格。其实大部分组件库的功能设计都是挺好挺完善的，所以一般来说中小型公司即使想要实现自己的一套组件风格的东西，直接使用开源类库如 element、iview或者基于react的Antd 所提供的功能和交互逻辑，然后在其上进行主题定制基本就满足需求了（除非你家设计师很有想法。。。）。\n\n自定义主题的功能一般的使用方式是这样的\n\n1. 通过主题生成工具。（制作者需要单独做一个工具）\n2. 引入关键主题文件，覆盖主题变量。(这种方式一般都需要适配制作者所使用的css预处理器）\n\n对于第一种方式往往都是组件库的制作者通过把生成组件样式的那一套东西做成一个工具，然后提供给使用者去根据自己的需要来调整，最后生成一套特定的样式文件，引入使用。\n\n第二种方式，**作为使用者来说，你主要做的其实是覆盖了组件库中的一些主题变量**，因为具体的组件的样式文件不是写死的固定样式值，而是使用了定义好的变量，所以你的自定义主题就生效了。但是这也会引入一个小问题就是你必须适配组件库的创造者所使用的样式预处理器，比如你用iview，那你的项目就要能解析Less文件，你用ElementUI，你的项目就必须可以解析SCSS。\n\n其实对于第一种方式也主要是以调整主题变量为主。所以当咱们自己要做一套组件库的时候，不难看出，一个核心点就是需要**把主题变量文件和样式文件拆开来**，后面的就简单了。\n\n\n\n### webpack打包\n\n类库项目的构建这里提两点：\n\n1. **暴露入口**\n2. **外部化依赖**\n\n先谈第一点 “暴露接口”。业务项目中，我们的整个项目通过webpack或其他打包工具打包成一个或多个bundle文件，这些文件被浏览器载入后就会直接运行。但是一个类库项目往往都不是单独运行的，而是通过暴露一个 “入口”，然我在业务项目中去调用它。 在webpack配置文件里，可以通过定义 `output` 中的 `library` 和 `libraryTarget` 来控制我们要暴露的一个 “入口变量” ，以及我们要构建的目标代码。\n\n这一点可以详细参考webpack官方文档: https://webpack.js.org/configuration/output/#outputlibrarytarget\n\n```javascript\nmodule.exports = {\n  // other config\n\toutput: {\n    library: \"MyLibName\",\n    libraryTarget: \"umd\",\n    umdNamedDefine: true\n  }\n}\n```\n\n再说一下 “外部化依赖”，我们做一个vue组件库项目的时候，我们的组件都是依赖于vue的，当我们组件库项目中的某个地方引入了vue，那么打包的时候vue的运行时也是会被一块儿打包进入最终的组件库bundle文件的。这样的问题在于，我们的vue组件库是被vue项目使用的，那么项目中已经有运行时了，我们就没必要在组件库中加入运行时，这样会多增加组件库bundle的体积。使用webpack的 `externals`可以将vue依赖 \"外部化\"。\n\n```javascript\nmodule.exports = {\n\t// other config\n\texternals: {\n    vue: {\n      root: 'Vue',\n      commonjs: 'vue',\n      commonjs2: 'vue',\n      amd: 'vue'\n    }\n  }\n}\n```\n\n\n\n### 按需加载\n\n组件库的按需加载功能还是很实用的， 这样可以避免我们在使用组件库的过程中把所有的用到和没用到的内容都打包到业务代码中去，导致最后的bundle文件过大影响用户体验。\n\n在业务项目中我们的按需加载都是把需要按需加载的地方单独生成为一个chunk，然后浏览器运行我们的打包代码的时候发现我们需要这一块儿资源了，再发起请求获取到对应的所需代码。\n\n在组件库里边，我们就需要改变一下引入的方式，比如一开始我们引入一个组件库的时候是直接将组件库和样式全部引入的。如下面这样\n\n```javascript\nimport LimeUI from 'lime-ui' // 引入组件库\nimport 'lime-ui/styles/index.css' // 引入整个组件库的样式文件\n\nVue.use(LimeUI)\n```\n\n那么，换成手动的按需加载的方式就是\n\n```javascript\nimport { Button } from 'lime-ui' // 引入button组件\nimport 'lime-ui/styles/button.css' // 引入button的样式\n\nVue.component('l-button', Button) // 注册组件\n```\n\n这种方式的确是按需引入的，但也一个不舒服的地方就是每次我们引入的时候都需要手动的引入组件和样式。一般来说一个项目里面用到的组件少说也有十多个，这就比较麻烦了。组件库是怎么解决这个问题的呢？\n\n通过babel插件的方式，将引入组件库和组件样式的模式自动化，比如antd、antd-mobile、material-ui都在使用的`babel-plugin-import`、还有ElementUI使用的 `babel-plugin-component`。在业务项目中配置好babel插件之后，它内部就可以给你做一个这样的转换（这里以 babel-plugin-component）\n\n```javascript\n// 原始代码\nimport { Button } from 'components'\n \n\n// 转换代码\nvar button = require('components/lib/button')\nrequire('components/lib/button/style.css')\n```\n\nOK，那既然代码可以做这样的转换的话，其实我们所要做的一点就是在我们打造组件库的时候，把我们的组件库的打包代码放到对应的文件目录结构之下就可以了。使用者可以选择手动载入组件，也可以使用babel插件的方式优化这一步骤。\n\n\n\nbabel-plugin-component 文档： https://www.npmjs.com/package/babel-plugin-component\n\nbabel-pluigin-import 文档: https://www.npmjs.com/package/babel-plugin-import\n\n\n\n## 组件：比起日常的组件设计，做组件库你还需要知道些什么？\n\n做组件库中的组件的技巧和在项目中用到的还是有一些区别的，这一小节就是告诉大家，组件库中的组件设计，我们还应该知道哪些必要的知识内容。\n\n### 组件通信：除了上下级之间进行数据通信，还有什么？\t\n\n我们常规用到的组件通信的方法就是通过 `props` 和 `$emit` 来进行父组件和子组件之间的数据传递，如下面的示意图中展示的那样：父组件通过 `props` 将数据给子组件、子组件通过 `$emit ` 将数据传递给父组件，顶多通过`eventBus`或`Vuex`来达到任意组件之间数据的相互通信。这些方法在常规的业务开发过程中是比较有效的，但是在组件库的开发过程中就显得有点力不从心了，主要的问题在于： <u>**如何处理跨级组件之间的数据通信呢？**</u>\n\n![IMG](https://blog-1257601889.cos.ap-shanghai.myqcloud.com/vue/attrs/vue.png?ynotemdtimestamp=1551245782807)\n\n如果在日常项目中，我们当然可以使用像 `vuex` 这样的将组件数据直接 ”外包“ 出去的方式来实现数据的跨级访问，但是`vuex` 始终是一个外部依赖项，组件库的设计肯定是不能让这种强依赖存在的。下面我们就来说说两个在组件库项目中我们会用到的数据通信方式。\n\n#### 内置的provide/inject\n\n**<u>provide/inject 是vue自带的可以跨级从子组件中获取父级组件数据的一套方案。</u>** 这一对东西类似于react里面的 `Context` ，都是为了处理跨级组件数据传递的问题。\n\n使用的时候，在子组件中的 inject 处声明需要注入的数据，然后在父级组件中的某个含有对应数据的地方，提供子级组件所需要的数据。不管他们之间跨越了多少个组件，子级组件都能获取到对应的数据。(参考下面的伪代码例子)\n\n```javascript\n// 引用关系 CompA --> CompB --> CompC --> ... --> ChildComp\n\n// CompA.vue\nexport default {\n  provide: {\n    theme: 'dark'\n  }\n}\n\n// CompB.vue\n// CompC.vue\n// ... \n\n// ChildComp.vue\nexport default {\n  inject: ['theme'],\n\tmounted() {\n    console.log(this.theme) // 打印结果: dark\n  }\n}\n```\n\n不过provide/inject的方式主要是子组件从父级组件中跨级获取到它的状态，却不能完美的解决以下问题：\n\n1. 子级组件跨级传递数据到父级组件\n2. 父级组件跨级传递数据到子级组件\n\n\n\n#### 派发和广播: 自制dispatch和broadcast功能\n\n**<u>dispatch和broadcast可以用来做父子级组件之间跨级通信</u>**。在vue1.x里面是有dispatch和broadcast功能的，不过在vue2.x中被取消掉了。这里可以参考一下下面链接给出的v1.x中的内容。\n\n> dispatch文档（v1.x）：https://v1.vuejs.org/api/#vm-dispatch\n>\n> broadcast文档（v1.x）：https://v1.vuejs.org/api/#vm-broadcast\n\n根据文档，我们得知\n\n- dispatch会派发一个事件，这个事件首先在自己这个组件实例上去触发，然后会沿着父级链一级一级的往上冒泡，直到触发了某个父级中声明的对这个事件的监听器后就停止，除非是这个监听器返回了true。当然监听器也是可以通过回调函数获取到事件派发的时候传递的所有参数的。这一点很像我们在DOM中的事件冒泡机制，应该不难理解。\n\n- 而broadcast就是会将事件广播到自己的所有子组件实例上，一层一层的往下走，因为组件树的原因，往下走的过程会遇到 “分叉”，也就可以看成是一条条的多个路径。事件沿着每一个子路径向下冒泡，每个路径上触发了监听器就停止，如果监听器返回的是true那就继续向下再传播。\n\n简单总结一下。<u>**dispatch派发事件往上冒泡，broadcast广播事件往下散播，遇到处理对应事件的监听器就处理，监听器没有返回true就停止**</u>\n\n需要注意的是，这里的派发和广播事件都是 **跨层级的** , 而且可以携带参数，那也就意味着可以**跨层级进行数据通信**。\n\n![IMG](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzkx.png)\n\n由于dispatch和broadcast在vue2.x中取消了，所以我们这里可以自己写一个，然后通过mixin的方式混入到需要使用到跨级组件通信的组件中。\n\n方法内容其实很简单，这里就直接列代码\n\n```javascript\n// 参考自iview的实现\nfunction broadcast(componentName, eventName, params) {\n  this.$children.forEach(child => {\n    const name = child.$options.name;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}\nexport default {\n  methods: {\n    dispatch(componentName, eventName, params) {\n      let parent = this.$parent || this.$root;\n      let name = parent.$options.name;\n\n      while (parent && (!name || name !== componentName)) {\n        parent = parent.$parent;\n\n        if (parent) {\n          name = parent.$options.name;\n        }\n      }\n      if (parent) {\n        parent.$emit.apply(parent, [eventName].concat(params));\n      }\n    },\n    broadcast(componentName, eventName, params) {\n      broadcast.call(this, componentName, eventName, params);\n    }\n  }\n};\n\n```\n\n其实这里的实现和vue1.x中的实现还是有一定的区别的：\n\n1. **dispatch没有事件冒泡。找到哪个就直接执行**\n2. **设定了一个name参数，只针对特定name的组件触发事件**\n\n其实看懂了这里的代码，你就应该可以举一反三想出 **找寻任何一个组件的方法了，不管是向上还是向下找，无非就是循环遍历和迭代处理，直到目标组件出现，然后调用它。** 派发和广播无非就是找到之后利用vue自带的事件机制来发布事件，然后在具体组件中监听该事件并处理。\n\n\n\n### 渲染函数：它可以释放javascript的能力\n\n首先我们回顾一下一个组件是如何从写代码到被转换成界面的。我们写vue单文件组件的时候一般会有template、script和style三部分，在打包的时候，vue-loader会将其中的template模板部分先编译成Vue实例中render选项所需要的构建视图的代码。在具体运行的时候，vue运行时会使用` $mount` 进行渲染，渲染好之后将其挂载到你提供的DOM节点下。\n\n整个过程里面我们只日常关注最多的当然就是template的部分，但是template其实只是vue提供的一个语法糖，只是让我们写代码写起来跟写html一样轻松，降低刚入手vue的小伙伴的学习成本。React就没有提供template的语法糖，而是使用的JSX来降低写组件的复杂度。(vue能在react和angular两大框架的压力下异军突起，简洁易懂的模板语法是有一定促进作用的，毕竟看起来更简单)\n\n通过上面我们回顾的内容，其实我们也发现了，**我们写的template，最终都是javascript**。这里template被编译之后，给到了 render这个渲染函数，在执行渲染的时候vue就会执行render中的操作来渲染我们的组件。\n\n所以template是好，但 **如果你想要使用全部的javascript的能力，那就可以使用渲染函数**。\n\n> 渲染函数&JSX (官方文档)：https://cn.vuejs.org/v2/guide/render-function.html \n\n日常写业务组件，我们用template就挺OK的，不过当遇到一些复杂情况，用 `写组件 --> 引入使用 --> 注册组件 --> 使用组件` 的方式就不好处理了，比如下面两种情况：\n\n1. 通过代码动态渲染组件\n2. 将组件渲染到其他位置\n\n第一种情况是通过代码动态渲染组件，比如运营常常使用的活动h5页面，每个活动都不一样，每次要么都重新做一份，要么在原有的基础上修改。但是这种修改的页面结构调整是很大的，每次都会是破坏性的，和重做其实没区别。这样的话，每次活动无论内容如何，前端都要上手去写代码。但其实只需要在管理后台做一个活动编辑器，编辑器的内容直接转化为render函数的代码，然后通过配置下发到某个页面上，承载页拿到数据给到render函数执行渲染。这样就可以动态的根据管理后台配置的方式来渲染组件内容，每次的活动页，运营也可以通过编辑器自行生成。\n\n第二种情况是要将组件渲染到不同位置。我们日常写业务组件基本就是写一个组件，在需要的拿来使用。如果你只是在template中把组件写进去，那你的组件的内容就都会作为当前组件的子组件进行渲染，所生成的DOM结构也是在当前的DOM结构之下的。知道render之后，其实我们可以新建vue实例，动态渲染之后，手动挂载到任意的DOM位置上去。\n\n```javascript\nimport CompA from './CompA.vue'\n\nlet Instance = new Vue({\n  render(h) {\n    return h(CompA)\n  }\n})\n\nlet component = Instance.$mount() // 执行渲染\ndocument.body.appendChild(component.$el) // 挂载到body元素下\n\n```\n\n我们使用的element里面的 `this.$message` 就用到了动态渲染，然后手动挂载到指定位置。\n\n\n\n\n# 实践：做一遍你就会了\n\n这里先贴上我们的github地址，各位可以在做的过程中对照着看。https://github.com/arronKler/lime-ui\n\n## 建立一个工程化的项目\n\n### 第一步，建立工程化结构\n\n这里就不废话了，直接贴目录结构和解释\n\n```bash\n|- assets/   # 存放一些额外的资源文件，图片之类的\n|- build/  # webpack打包配置\n|- docs/  # 存放文档\n\t|- .vuepress  # vuepress配置目录\n\t|- component # 组件相关的文档放这里\n\t|- README.md # 静态首页\n|- lib/  # 打包生成的文件放这里\n\t|- styles/ # 打包后的样式文件\n|- src/ # 在这里写代码\n\t|- mixins/ # mixin文件\n\t|- packages/ # 各个组件，每个组件是一个子目录\n\t|- styles/ # 样式文件\n\t\t|- common/ # 公用的样式内容\n\t\t|- mixins/ # 复用的mixin\n\t|- utils  # 工具目录\n\t|- index.js  # 打包入口，组件的导出\n|- test/  # 测试文件夹\n\t|- specs/  # 存放所有的测试用例\n|- .npmignore\n|- .gitignore\n|- .babelrc\n|- README.md\n|- package.json\n```\n\n这里比较重要的目录就是我们的src目录，下面存放了我们的各个单一的组件和一套样式库，另外还有一些辅助的东西。我们写文档就是在 docs目录下去写。项目目录最外层都是些常规的配置内容，比如 `.npmignore` 和 `.gitignore` 这样的文件我们都是很常见的，所以我就不具体细说这一部分了，要是有一定疑惑可以直接参见github上的源码对照着看。\n\n这里我们把需要使用到的类库文件也先建立好\n\n在 src/mixins 下创建一个 emitter.js，写入如下内容，也就是我们的dispatch和broadcast的方法，之后的组件设计中会用到\n\n```javascript\nfunction broadcast(componentName, eventName, params) {\n  this.$children.forEach(child => {\n    const name = child.$options.name;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}\nexport default {\n  methods: {\n    dispatch(componentName, eventName, params) {\n      let parent = this.$parent || this.$root;\n      let name = parent.$options.name;\n\n      while (parent && (!name || name !== componentName)) {\n        parent = parent.$parent;\n\n        if (parent) {\n          name = parent.$options.name;\n        }\n      }\n      if (parent) {\n        parent.$emit.apply(parent, [eventName].concat(params));\n      }\n    },\n    broadcast(componentName, eventName, params) {\n      broadcast.call(this, componentName, eventName, params);\n    }\n  }\n};\n```\n\n然后在 src/utils 下新建一个 assist.js 文件，写下辅助性的函数\n\n```javascript\nexport function oneOf(value, validList) {\n  for (let i = 0; i < validList.length; i++) {\n    if (value === validList[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n这两个地方都是之后会使用到的，如果你需要其他的辅助内容，也可以在这两个文件所在的目录下去建立。\n\n\n\n###  第二步， 完善打包流程\n\n目录建好了，那就该填充血肉了，要打包一个组件库项目，肯定是要先配置好我们的webpack，不然写了源码也没法跑起来。所以我们先定位到 build目录下，在build目录下先建立三个文件\n\n- webpack.base.js 。存放基本的一些rules配置\n\n- webpack.prod.js 。整个组件库的打包配置\n- gen-style.js 。单独对样式进行打包\n\n以下是具体的配置内容\n\n```javascript\n/* webpack.base.js */\nconst path = require('path');\nconst webpack = require('webpack');\nconst pkg = require('../package.json');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin')\n\nfunction resolve(dir) {\n  return path.join(__dirname, '..', dir);\n}\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          loaders: {\n            css: [\n              'vue-style-loader',\n              {\n                loader: 'css-loader',\n                options: {\n                  sourceMap: true,\n                },\n              },\n            ],\n            less: [\n              'vue-style-loader',\n              {\n                loader: 'css-loader',\n                options: {\n                  sourceMap: true,\n                },\n              },\n              {\n                loader: 'less-loader',\n                options: {\n                  sourceMap: true,\n                },\n              },\n            ],\n          },\n          postLoaders: {\n            html: 'babel-loader?sourceMap'\n          },\n          sourceMap: true,\n        }\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        options: {\n          sourceMap: true,\n        },\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.css$/,\n        loaders: [\n          {\n            loader: 'style-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true,\n            },\n          }\n        ]\n      },\n      {\n        test: /\\.less$/,\n        loaders: [\n          {\n            loader: 'style-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'less-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n        ]\n      },\n      {\n        test: /\\.scss$/,\n        loaders: [\n          {\n            loader: 'style-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'sass-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n        ]\n      },\n      {\n        test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,\n        loader: 'url-loader?limit=8192'\n      }\n    ]\n  },\n  resolve: {\n    extensions: ['.js', '.vue'],\n    alias: {\n      'vue': 'vue/dist/vue.esm.js',\n      '@': resolve('src')\n    }\n  },\n  plugins: [\n    new webpack.optimize.ModuleConcatenationPlugin(),\n    new webpack.DefinePlugin({\n      'process.env.VERSION': `'${pkg.version}'`\n    }),\n    new VueLoaderPlugin()\n  ]\n};\n```\n\n```javascript\n/*  webpack.prod.js */\nconst path = require('path');\nconst webpack = require('webpack');\nconst merge = require('webpack-merge');\nconst webpackBaseConfig = require('./webpack.base.js');\n\nprocess.env.NODE_ENV = 'production';\n\nmodule.exports = merge(webpackBaseConfig, {\n  devtool: 'source-map',\n  mode: \"production\",\n  entry: {\n    main: path.resolve(__dirname, '../src/index.js')  // 将src下的index.js 作为入口点\n  },\n  output: {\n    path: path.resolve(__dirname, '../lib'),\n    publicPath: '/lib/',\n    filename: 'lime-ui.min.js',  // 改成自己的类库名\n    library: 'lime-ui', // 类库导出\n    libraryTarget: 'umd',\n    umdNamedDefine: true\n  },\n  externals: { // 外部化对vue的依赖\n    vue: {\n      root: 'Vue',\n      commonjs: 'vue',\n      commonjs2: 'vue',\n      amd: 'vue'\n    }\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': '\"production\"'\n    })\n  ]\n});\n```\n\n```javascript\n/* gen-style.js */\nconst gulp = require('gulp');\nconst cleanCSS = require('gulp-clean-css');\nconst sass = require('gulp-sass');\nconst rename = require('gulp-rename');\nconst autoprefixer = require('gulp-autoprefixer');\nconst components = require('./components.json')\n\nfunction buildCss(cb) {\n  gulp.src('../src/styles/index.scss')\n    .pipe(sass())\n    .pipe(autoprefixer())\n    .pipe(cleanCSS())\n    .pipe(rename('lime-ui.css'))\n    .pipe(gulp.dest('../lib/styles'));\n  cb()\n}\n\nexports.default = gulp.series(buildCss)\n```\n\nOK，这里我们的webpack配置基本设置好了，webpack.base.js 中的配置就主要是一些loader和插件的配置，具体的出入口都是在 webpack.prod.js 中配置的。这里webpack.prod.js 合并了 webpack.base.js 中的配置项。关于 output.libary 和 externals ，阅读了之前 “准备” 阶段的内容的应该不会陌生了。\n\n另外还有 gen-style.js 这个文件是单独使用了 gulp 来对样式文件进行打包操作的，我们这里选用的是 scss的语法，如果你想用less或其他的预处理器，也可以自行修改这里的文件和相关依赖。\n\n不过这个配置肯定还没有结束，首先我们需要安装好这里的配置里使用到的各种loader和plugin。为了不漏掉安装项和保持一致性，可以直接复制下面的配置内容放到 package.json 下，通过 `npm install` 来进行安装。需要注意的是，这里的安装完成之后，其实后面的一些内容的依赖也都一并安装好了。\n\n```json\n\"dependencies\": {\n  \"async-validator\": \"^3.0.4\",\n  \"core-js\": \"2.6.9\",\n  \"webpack\": \"^4.39.2\",\n  \"webpack-cli\": \"^3.3.7\"\n},\n\"devDependencies\": {\n  \"@babel/core\": \"^7.5.5\",\n  \"@babel/plugin-transform-runtime\": \"^7.5.5\",\n  \"@babel/preset-env\": \"^7.5.5\",\n  \"@vue/test-utils\": \"^1.0.0-beta.29\",\n  \"babel-loader\": \"^8.0.6\",\n  \"chai\": \"^4.2.0\",\n  \"cross-env\": \"^5.2.0\",\n  \"css-loader\": \"2.1.1\",\n  \"file-loader\": \"^4.2.0\",\n  \"gh-pages\": \"^2.1.1\",\n  \"gulp\": \"^4.0.2\",\n  \"gulp-autoprefixer\": \"^7.0.0\",\n  \"gulp-clean-css\": \"^4.2.0\",\n  \"gulp-rename\": \"^1.4.0\",\n  \"gulp-sass\": \"^4.0.2\",\n  \"karma\": \"^4.2.0\",\n  \"karma-chai\": \"^0.1.0\",\n  \"karma-chrome-launcher\": \"^3.1.0\",\n  \"karma-coverage\": \"^2.0.1\",\n  \"karma-mocha\": \"^1.3.0\",\n  \"karma-sinon-chai\": \"^2.0.2\",\n  \"karma-sourcemap-loader\": \"^0.3.7\",\n  \"karma-spec-reporter\": \"^0.0.32\",\n  \"karma-webpack\": \"^4.0.2\",\n  \"less\": \"^3.10.2\",\n  \"less-loader\": \"^5.0.0\",\n  \"mocha\": \"^6.2.0\",\n  \"node-sass\": \"^4.12.0\",\n  \"rimraf\": \"^3.0.0\",\n  \"sass-loader\": \"^7.3.1\",\n  \"sinon\": \"^7.4.1\",\n  \"sinon-chai\": \"^3.3.0\",\n  \"style-loader\": \"^1.0.0\",\n  \"url-loader\": \"^2.1.0\",\n  \"vue-loader\": \"^15.7.1\",\n  \"vue-style-loader\": \"^4.1.2\",\n  \"vuepress\": \"^1.0.3\"\n},\n```\n\n另外，由于我们使用了babel，所以需要在项目的根目录下设置一下 `.babelrc` 文件，内容如下：\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"loose\": false,\n        \"modules\": \"commonjs\",\n        \"spec\": true,\n        \"useBuiltIns\": \"usage\",\n        \"corejs\": \"2.6.9\"\n      }\n    ]\n  ],\n  \"plugins\": [\n    \"@babel/plugin-transform-runtime\",\n  ]\n}\n```\n\n当然也不要忘记在package.json文件中写上scripts简化手动输入命令的过程\n\n```json\n{\n\t\"scripts\": {\n    \"build:style\": \"gulp --gulpfile build/gen-style.js\",\n    \"build:prod\": \"webpack --config build/webpack.prod.js\",\n  }\n}\n```\n\n\n\n### 第三步，建立文档化工具\n\n如果在上一步中未安装了 vuepress ，可以通过 `npm install vuepress --save-dev` 来安装，\n\n然后在 package.json 中加入脚本，快速启动\n\n```json\n{\n  \"scripts\": {\n    // ...\n    \"docs:dev\": \"vuepress dev docs\",\n    \"docs:build\": \"vuepress build docs\"\n  }\n}\n```\n\n这个时候你可以在你的 docs/README.md 文件里写点内容，然后运行 `npm run docs:dev` 就可以看到本地的文档内容了。需要打包的时候使用 `npm run docs:build ` 就可以了。\n\n如果我们的项目是要放到github上的，那么其实也可以一并将我们的文档生成之后也放到github上去，利用github的pages功能让这个本地的文档在线运行。（github pages托管我们的静态页面和资源）\n\n可以运行 `npm install gh-pages --save-dev` 安装 `gh-pages` 这个可以帮我们一键部署github pages文档的工具。它的工作原理就是将对应的某个文件夹下的资源迁移到我们的当前项目的gh-pages分支上，然后这个分支在push给了github之后，github就会将该分支内的内容服务起来。为了更好的使用它，我们可以在package.json中添加scripts\n\n```json\n{\n  \"scripts\": {\n    // ...\n  \t\"deploy\": \"gh-pages -d docs/.vuepress/dist\",\n    \"deploy:build\": \"npm run docs:build && npm run deploy\",\n  }\n}\n```\n\n这样你就可以使用 `npm run deploy` 直接部署你的vuepress生成的静态站点，不过务必在部署之前运行一下文档的构建程序。因此我们也添加了一条 `npm run deploy:build` 命令，使用这条命令就可以直接把文档的构建和部署直接一起解决。是不是很简单呢？\n\n不过为了我们能够直接使用自己写的组件，还需要对vuepress做一点点配置。在 docs/.vuepress目录下新建一个 enhanceApp.js 文件，写入如下内容，将我们的组件库的入口和样式注入进去\n\n```javascript\nimport LimeUI from '../../src/index.js'\nimport \"../../src/styles/index.scss\"\n\nexport default ({\n  Vue,\n  options,\n  router\n}) => {\n  Vue.use(LimeUI)\n}\n```\n\n这个时候我们之后写的组件就可以直接在文档中使用了。\n\n\n\n### 第四步，样式构建\n\n先需要说明的是这里我们所使用的样式预处理器的语法是scss。那么在“完善打包流程”这一小节中已经将用gulp进行打包的代码给出了，不过有必要说明一下，我们又是如何去整合样式内容的。\n\n首先，为了之后便于做按需加载，对于每个组件的样式都是一个单独的scss文件，写样式的时候，为了避免太多的层级嵌套，使用了BEM风格的方式去书写。\n\n我们需要先在 src/styles目录执行如下命令生成一个基本的样式文件\n\n```bash\ncd src/styles\nmkdir common\nmkdir mixins\ntouch common/var.scss  # 样式变量文件\ntouch common/mixins.scss\ntouch index.scss  # 引入所有样式\n```\n\n然后将对应的 var.scss 和 mixins.scss 文件填充上一些基础内容\n\n```scss\n/* common/var.scss */\n\n$--color-primary: #ff6b00 !default;\n$--color-white: #FFFFFF !default;\n$--color-info: #409EFF !default;\n$--color-success: #67C23A !default;\n$--color-warning: #E6A23C !default;\n$--color-danger: #F56C6C !default;\n```\n\n```scss\n/* mixins/mixins.scss */\n$namespace: 'lime';  /* 组件库的样式前缀 */\n\n/* BEM\n -------------------------- */\n@mixin b($block) {\n  $B: $namespace+'-'+$block !global;\n\n  .#{$B} {\n    @content;\n  }\n}\n```\n\n在mixins文件中我们声明了一个mixin，用于帮助我们更好的去构建样式文件。\n\n\n\n## 组件打造案例\n\n上面的内容设置好了， 咱们就可以开始具体去做一个组件试试了\n\n### 简单的button组件\n\n这是做好之后的大致效果\n\n![2.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzc0.png)\n\nOK，那我们建立基本的button组件相关的文件\n\n```bash\ncd src/packages\nmkdir button && cd button\ntouch index.js\ntouch button.vue\n```\n\n写入button.vue的内容\n\n```javascript\n<template>\n  <button class=\"lime-button\" :class=\"{[`lime-button-${type}`]: true}\" type=\"button\">\n    <slot></slot>\n  </button>\n</template>\n\n<script>\nimport { oneOf } from '../../utils/assist';\n\nexport default {\n  name: 'Button',\n  props: {\n    type: {\n      validator (value) {\n          return oneOf(value, ['default', 'primary', 'info', 'success', 'warning', 'error']);\n      },\n      type: String,\n      default: 'default'\n    }\n  }\n}\n</script>\n```\n\n这里我们需要在 index.js 中导出这个组件\n\n```javascript\nimport Button from './button.vue'\nexport default Button\n```\n\n这样单个的一个组件就完成了，之后你可以再多做几个组件试试，不过有一点就是这些组件需要一个统一的打包入口，我们再webpack中已经配置过了，那就是 src/index.js 这个文件，我们需要在这个文件里面将我们刚才写的button组件以及你自己写的其他组件都引入进来，然后统一导出给webpack打包使用，具体代码见下\n\n```javascript\nimport Button from './packages/button'\n\nconst components = {\n  lButton: Button,\n}\n\nconst install = function (Vue, options = {}) {\n\n  Object.keys(components).forEach(key => {\n    Vue.component(key, components[key]);\n  });\n}\n\nexport default install\n```\n\n可以看到的是index.js中我们最终导出的是一个叫install的函数，这个函数其实就是Vue插件的一种写法，便于我们在实际项目中引入的时候可以使用 `Vue.use` 的方式来自动安装我们的整个组件库。install接受两个参数，一个是Vue，我们把它用来注册一个个的组件。还有一个是options，便于我们可以在注册组件的时候传入一些初始化参数，比如默认的按钮大小、主题等信息，都可以通过参数的方式来设定。\n\n然后我们可以在 src/styles目录下新建一个button.scss 文件，写入我们button对应的样式\n\n```scss\n/* button.scss */\n@charset \"UTF-8\";\n@import \"common/var\";\n@import \"mixins/mixins\";\n\n@include b(button) {\n  min-width: 60px;\n  height: 36px;\n  font-size: 14px;\n  color: #333;\n  background-color: #fff;\n  border-width: 1px;\n  border-radius: 4px;\n  outline: none;\n  border: 1px solid transparent;\n  padding: 0 10px;\n\n  &:active,\n  &:focus {\n    outline: none;\n  }\n\n  &-default {\n    color: #333;\n    border-color: #555;\n\n    &:active,\n    &:focus,\n    &:hover {\n      background-color: rgba($--color-primary, 0.3);\n    }\n  }\n  &-primary {\n    color: #fff;\n    background-color: $--color-primary;\n\n    &:active,\n    &:focus,\n    &:hover {\n      background-color: mix($--color-primary, #ccc);\n    }\n  }\n\n  &-info {\n    color: #fff;\n    background-color: $--color-info;\n\n    &:active,\n    &:focus,\n    &:hover {\n      background-color: mix($--color-info, #ccc);\n    }\n  }\n   &-success {\n    color: #fff;\n    background-color: $--color-success;\n\n    &:active,\n    &:focus,\n    &:hover {\n      background-color: mix($--color-success, #ccc);\n    }\n  }\n}\n```\n\n最后我们还需要在 src/styles/index.scss 文件中将button的样式引入进去\n\n```scss\n@import \"button\";\n```\n\n为了简单的实验，你可以直接在 docs/README.md 文件下写两个button组件试试看\n\n```javascript\n<template>\n\t<l-button type=\"primary\">Click me</l-button>\n</template>\n```\n\n如果你想要得到和我在 https://arronkler.github.io/lime-ui/ 上一样的效果，可以参考 https://github.com/arronKler/lime-ui 项目中的 docs 目录下的配置。如果想要更个性化的配置，可以查阅vuepress的官方文档。\n\n\n\n### Notice提示组件\n\n这个组件就要用到我们的动态渲染的相关的东西了。具体最后的使用方式是这样的\n\n```javascript\nthis.$notice({\n  title: '提示',\n  content: this.content || '内容',\n  duration: 3\n})\n```\n\n效果类似于这样\n\n![4.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzAx.png)\n\nOK，我们先来写一下这个组件的一个基本源码\n\n在 src/packages 目录下新建notice文件夹，然后新建一个 notice.vue 文件\n\n```javascript\n<template>\n  <div class=\"lime-notice\">\n    <div class=\"lime-notice__main\" v-for=\"item in notices\" :key=\"item.id\">\n      <div class=\"lime-notice__title\">{{item.title}}</div>\n      <div class=\"lime-notice__content\">{{item.content}}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      notices: []\n    }\n  },\n  methods: {\n    add(notice) {\n      let id = +new Date()\n      notice.id = id\n      this.notices.push(notice)\n\n      const duration = notice.duration\n      setTimeout(() => {\n        this.remove(id)\n      }, duration * 1000)\n    },\n    remove(id) {\n      for(let i = 0; i < this.notices.length; i++) {\n        if (this.notices[i].id === id) {\n          this.notices.splice(i, 1)\n          break;\n        }\n      }\n    }\n  }\n}\n</script>\n\n```\n\n代码很简单，其实就是声明了一个容器，然后在其中通过控制 notices 的数据来展示和隐藏，接着我们在同一个目录下新建一个notice.js 文件来做动态渲染\n\n```javascript\nimport Vue from 'vue'\nimport Notice from './notice.vue'\n\nNotice.newInstance = (properties) => {\n  let props = properties || {}\n  const Instance = new Vue({\n    render(h) {\n      return h(Notice, {\n        props\n      })\n    }\n  })\n\n  const component = Instance.$mount()\n  document.body.appendChild(component.$el)\n\n  const notice = component.$children[0]\n\n  return {\n    add(_notice) {\n      notice.add(_notice)\n    }, \n    remove(id) {\n\n    }\n  }\n}\n\nlet noticeInstance\n\n\nexport default (_notice) => {\n  noticeInstance = noticeInstance || Notice.newInstance()\n  noticeInstance.add(_notice)\n}\n```\n\n这里我们我们通过动态渲染的方式让我们的组件可以直接挂在到body下面，而非归属于根挂载点之下。\n\n然后在 src/styles 目录下新建 notice.scss 文件，写上我们的样式文件\n\n```scss\n/* notice.scss */\n@charset \"UTF-8\";\n@import \"common/var\";\n@import \"mixins/mixins\";\n\n@include b(notice) {\n  position: fixed;\n  right: 20px;\n  top: 60px;\n  z-index: 1000;\n\n  &__main {\n    min-width: 100px;\n    padding: 10px 20px;\n    box-shadow: 0 0 4px #aaa;\n    margin-bottom: 10px;\n    border-radius: 4px;\n  }\n\n  &__title {\n    font-size: 16px;\n  }\n  &__content {\n    font-size: 14px;\n    color: #777;\n  }\n}\n```\n\n最后同样的，也需要在 src/index.js 这个入口文件中对 notice做处理。完整代码是这样的。\n\n```javascript\nimport Button from './packages/button'\nimport Notice from './packages/notice/notice.js'\n\nconst components = {\n  lButton: Button\n}\n\nconst install = function (Vue, options = {}) {\n\n  Object.keys(components).forEach(key => {\n    Vue.component(key, components[key]);\n  });\n\n  Vue.prototype.$notice = Notice;\n}\n\nexport default install\n```\n\n我们可以看到我们再Vue的原型上挂上了我们的 `$notice` 方法，这个方法调用的时候就会触发我们在 notice.js 文件中动态渲染组件的一套流程。这个时候我们就可以在 docs/README.md 文档中测试着用了。\n\n```javascript\n<script>\nexport default() {\n  mounted() {\n    this.$notice({\n        title: '提示',\n        content: this.content,\n        duration: 3\n    })\n  }\n}\n<script>\n```\n\n\n\n\n\n\n## 单独打包样式和组件\n\n为了能支持按需加载的功能，我们除了将整个组件库打包之外，还需要对样式和组件单独打包成单个的文件。这里我们需要做两件事儿\n\n1. 打包单独的css文件\n2. 打包单独的组件内容\n\n对于第一点，我们需要对 build/gen-style.js 文件做一下改造，加上buildSeperateCss任务，完整代码如下\n\n```javascript\n// 其他之前的代码...\n\nfunction buildSeperateCss(cb) {\n  Object.keys(components).forEach(compName => {\n    gulp.src(`../src/styles/${compName}.scss`)\n      .pipe(sass())\n      .pipe(autoprefixer())\n      .pipe(cleanCSS())\n      .pipe(rename(`${compName}.css`))\n      .pipe(gulp.dest('../lib/styles'));\n  })\n\n  cb()\n}\n\nexports.default = gulp.series(buildCss, buildSeperateCss) // 加上 buildSeperateCss\n```\n\n对于第二点，我们可以用一个新的webpack配置来处理，新建一个 build/webpack.component.js 文件，写入\n\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst merge = require('webpack-merge');\nconst webpackBaseConfig = require('./webpack.base.js');\nconst components = require('./components.json')\nprocess.env.NODE_ENV = 'production';\n\nconst basePath = path.resolve(__dirname, '../')\nlet entries = {}\nObject.keys(components).forEach(key => {\n  entries[key] = path.join(basePath, 'src', components[key])\n})\n\nmodule.exports = merge(webpackBaseConfig, {\n  devtool: 'source-map',\n  mode: \"production\",\n  entry: entries,\n  output: {\n    path: path.resolve(__dirname, '../lib'),\n    publicPath: '/lib/',\n    filename: '[name].js',\n    chunkFilename: '[id].js',\n    // library: 'lime-ui',\n    libraryTarget: 'umd',\n    umdNamedDefine: true\n  },\n  externals: {\n    vue: {\n      root: 'Vue',\n      commonjs: 'vue',\n      commonjs2: 'vue',\n      amd: 'vue'\n    }\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': '\"production\"'\n    })\n  ]\n});\n\n```\n\n这里我们引用了build文件夹下的一个叫做 component.json 的文件，该文件是我自定义用来标识我们的组件和组件路径的，实际上你也可以通过脚本直接遍历 src/packages目录自动获得这样一些信息。这里只是简单演示， build/component.json 的代码如下\n\n```json\n{\n  \"button\": \"packages/button/index.js\",\n  \"notice\": \"packages/notice/notice.js\"\n}\n```\n\n所有的单独打包流程配置好以后，我们就可以在 package.json 文件中再加上 scripts 命令\n\n```json\n{\n\t\"scripts\": {\n    // ...\n\t\t\"build:components\": \"webpack --config build/webpack.component.js\",\n    \"dist\": \"npm run build:style && npm run build:prod && npm run build:components\",\n\t}\n}\n```\n\nOK，现在只需要运行 `npm run dist` 命令，它就会自动去构建完整的样式内容和各个组件单独的样式内容，然后会打包一个完整的组件包和各个组件的单独的包。\n\n这里需要注意的一点就是你的package.json 文件中的这几个字段需要做一下调整\n\n```json\n{\n\t\"name\": \"lime-ui\",\n  \"version\": \"1.0.0\",\n  \"main\": \"lib/lime-ui.min.js\",\n  //...\n}\n```\n\n其中name表示别人使用了你的包的时候的包名，main字段很重要，表示别人直接引入你包的时候，入口文件是哪一个。这里因为我们webpack打包后的文件是 lib/lime-ui.min.js 所以我们这样去设置。\n\n一切就绪后，你就可以运行 `npm run dist` 打包你的组件库，然后 `npm publish` 去发布你的组件库了（发布前需要 `npm login` 登陆）\n\n\n\n## 使用自己的组件库\n\n### 直接使用\n\n我们可以用vue-cli 或其他工具另外生成一个demo项目，用这个项目去引入我们的组件库。如果你的包还没有发布出去，可以在你的组件库项目目录下 用 `npm link` 或者 `yarn link`的命令创建一个link（推荐使用yarn）\n\n然后在你的demo目录下使用 `npm link package_name` 或者 `yarn link package_name` 这里的package_name就是你的组件库的包名，然后在你的demo项目的入口文件里\n\n```javascript\nimport Vue from vue\nimport LimeUI from 'lime-ui'\nimport 'lime-ui/lib/styles/lime-ui.css'\n// 其他代码 ...\n\nVue.use(LimeUI)\n```\n\n这样设置好之后，我们创建的组件就可以在这个项目里使用了\n\n\n\n### 按需加载\n\n上面我们谈的是全局载入的一种使用方法，那如何按需加载呢？其实我们之前也说过那么一点\n\n先通过npm安装好 `babel-plugin-component` 包，然后在你的demo项目的 `.babelrc` 文件中写上这部分内容\n\n```json\n{\n    \"plugins\": [\n        [\"component\", {\n            \"libraryName\": \"lime-ui\",\n            \"libDir\": \"lib\",\n            \"styleLibrary\": {\n                \"name\": \"styles\",\n                \"base\": false, // no base.css file\n                \"path\": \"[module].css\"\n            }\n        }]\n    ]\n}\n```\n\n这里的配置是要符合我们的lime-ui 的一个目录结构的，有了这个配置我们就可以进行按需加载了，你可以像这样做加载一个Button\n\n```javascript\nimport Vue from 'vue'\nimport { Button } from 'lime-ui'\n\nVue.component('a-button', Button)\n```\n\n可以看到的是，我们并没有在这个位置加载任何样式，因为 `babel-plugin-component` 已经帮我们做了，不过因为我们只在组件库的入口点里面设置了 install 方法用来注册组件，所以这里我们按需引入的时候，就需要自己手动注册了。\n\n\n\n### 主题定制\n\n前面的内容做好之后，主题定制就比较简单了，我们先在DEMO项目的入口文件同级目录下创建一个 global.scss 文件，然后在其中写入类似下面这样的代码。\n\n```scss\n$--color-primary: red;\n@import \"~lime-ui/src/styles/index.scss\";\n```\n\n然后在入口文件中把引入组件库的方式改变一下\n\n```javascript\nimport Vue from vue\nimport LimeUI from 'lime-ui'\nimport './global.scss'\n// 其他代码 ...\n\nVue.use(LimeUI)\n```\n\n我们在入口文件中把对组件库的样式引入，改成引入我们自定义的global.scss文件。\n\n其实这里就是覆盖了我们在组件库项目里 var.scss 里的变量的值，然后其余的组件基础样式还是使用了各自的样式内容，这样就可以达到主题定制了。\n\n\n\n# 结语\n\n本文通过对组件库的一些特性的介绍和一个实际的操作案例，阐述了打造一套组件库的一些基础的东西。希望能通过这样的一次分享，让我们不只是去使用组件库，而是能知道组件库的诞生过程和了解组件库的一些内部特性，帮助我们在日常使用的过程中能“心中有数”，当出现问题或组件库需求可能不满足的时候有一个新的思考入手点，那就足够了。\n\n\n\n# 引用参考\n\n\n\n1. Vue` $dispatch `和` $broadcast `详解: https://juejin.im/post/5c7fd345f265da2da771f4cd\n2. Component Tests with Vue.js - Matt O'Connell : https://www.youtube.com/watch?v=OIpfWTThrK8\n3. 掘金小册：Vue.js 组件精讲\n4. ElementUI ：https://github.com/ElemeFE/element\n5. iView ：https://github.com/iview/iview","source":"_posts/FE/build-a-vue-component.md","raw":"title: 如何打造一套Vue组件库\ndate: 2019-08-26\nauthor: zouyawei\ntoc: true\nthumbnail: https://piccdn.luojilab.com/fe-oss/default/MTU2NzM5MjkwMTYy.jpeg\ntag: \n  - 前端\ncategories: \n  - 前端\n\n---\n\n# 开篇\n\n组件库能帮我们节省开发精力，无需所有东西都从头开始去做，通过一个个小组件拼接起来，就得到了我们想要的最终页面。在日常开发中如果没有特定的一些业务需求，使用组件库进行开发无疑是更便捷高效，而且质量也相对更高的方案。\n\n目前的开源组件库有很多，不管是react还是vue的体系里都有很多非常优秀的组件库，比如我经常使用的就有elementui和iview。当然也还有其他的一些组件库，他们的本质其实都是为了节省重复造基础组件这一轮子的过程。也有的公司可能会对自己公司的产品有特别的需求，不太愿意使用开源的组件库的样式，或者自己有一些公司内部的业务项目需要用到，但开源项目无法满足的组件需要沉淀下来的时候，自建一套组件库就成为了一个作为业务驱动所需要的项目。\n\n<!-- more -->\n\n本文会从 ”准备“ 和 ”实践“ 两个阶段来阐述，一步步完成一个组件库的打造。大致内容如下：\n\n1. **准备**：主要讲了搭建组件库之前我们需要先提及一下一些基础知识，为实践阶段做铺垫。\n2. **实践**：有了一些基本概念，咱们就直接通过一个实践案例来动手搭建一套基础的组件库。从做的过程中去感受组件库的设计。\n\n希望通过本文的分享以及包含的一个简单的 **实际操作案例**，能让你从组件库使用者的角色向组件库创造者的角色迈进那么一小步，在日常使用组件库的时候心里有个底，那我的目的也就达到了。\n\n我们的案例地址是：https://arronkler.github.io/lime-ui/ \n\n对应的 repo也就是：https://github.com/arronKler/lime-ui\n\n# 准备 ：打造组件库之前你应该知道些什么？\n\n这一个章节主要是想先解析清楚一些在组件库的建立中会用到的一些平时在业务概念中很少去关注的概念。我会分为工程和组件两个方面来阐述，把我所知道的一些其中的技巧和坑点都交付出来，以帮助我们在实际去做的过程中可以有所准备。\n\n\n\n## 项目：做一个组件库项目有哪些额外需要考虑的事？\n\n做组件库项目和常规业务项目肯定还是有一些事情是我们业务项目不怎么需要，但是类库项目一般都会考虑的事，这一小节就是介绍说明一下，那些我们在做组件库的过程中需要额外考虑的事。\n\n\n\n### 组件测试\n\n很多开发者平时业务项目都比较赶，然后就是一般业务项目中都不怎么写测试脚本。但在做一个组件库项目的过程中，最好还是有对应的组件测试的脚本。至少有两点好处：\n\n1. 自动化测试你写的组件的功能特性\n2. 改动代码不用担心会影响之前的使用者。（测试脚本会告诉你有没有出现未预料到的影响）\n\n对于类库型项目，我觉得第二点好处还是很重要的，这才能保证你在不断推进项目升级迭代的过程中，确保不会出现影响已经在用你所创造的类库的那些人，毕竟你要是升级一次让他的项目出现大问题，那可真保不准别人饭碗都能丢。（就像之前的antd的圣诞节雪花事件一样）\n\n由于我们是要写vue的组件库，这里推荐的测试工具集是 `vue-test-utils` 这套工具，https://vue-test-utils.vuejs.org/zh/ 。其中提供的各种测试函数和方法都能很好的满足我们的测试需要。具体的安装使用可以参见它的文档。\n\n我们这里主要想提的是 **组件测试到底要测什么？**\n\n我们这里给到一张很直观的图，看到这张图其实你应该也清楚了这个问题的答案\n\n![IMG](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzNDE2.png)\n\n这张图来自视频 https://www.youtube.com/watch?v=OIpfWTThrK8 ，也是vue-test-util推荐的一个非常棒的演讲，想要具体了解可以进去看一下。\n\n所以回过头来，组件测试，实际需要我们不仅仅作为创造者的角度对组件的功能特性进行测试。更要从使用者的角度来看，把组件当做一个“黑盒子”，我们能给到它的是用户的交互行为、props数据等，这个“黑盒子”也会对应的反馈出一定的事件和渲染的视图可以被使用者所捕获和观察。通过对这些位置的检查，我们就能获知一个组件的行为是否如我们所愿的去进行着，确保它的行为一定是一致不出幺蛾子的。\n\n另外还想提的一点偏的话题就是 **契约精神**。作为组件的使用者，我使用你的组件，等于咱们签订一个契约，这个组件的所有行为应该是和你描述的是一致的，不会出现第三种意料之外的可能。毕竟对于企业项目来说，我们不喜欢surprise。antd的彩蛋事件也是给各位都提个醒，咱们搞技术可以这么玩也挺有创意，但是这种公用类库，特别是企业使用的也比较多的，还是把创意收一收，讲究契约，不讲surprise。就算是自家企业内部使用的组件库，除非是业务上的人都是认可的，否则也不要做这种危险试探。\n\n好的组件测试也是能够帮助我们识别出那些我们有意或无意创造的surprise，有意的咱就不说了，就怕是那种无意中出现的surprise那就比较要命了，所以写好组件测试还是挺有必要的。\n\n\n\n### 文档生成\n\n一般来说，我们做一个类库项目都会有对应的说明文档的，有的项目一个README.md 的文档就够了，有的可能需要在来几个 Markdown的文档。对于组件库这一类的项目来说，我们可以用文档工具来辅助直接生成文档。这里推荐 vuepress ，可以快速帮我们完成组件库文档的建设。(https://vuepress.vuejs.org/zh/guide/)\n\nvuepress是一个文档生成工具，默认的样式和vue官方文档几乎是一致的，因为创造它的初衷就是想为vue和相关的子项目提供文档支持。它内置了 Markdown的扩展，写文档的时候就是用 markdown来写，最让人省心的是<u>你可以直接在 Markdown 文件中使用Vue组件</u>，意味着我们的组件库中写的一个个组件，可以直接放到文档里去用，展示组件的实际运行效果。 我们的案例网站也就是通过vuepress来写的，生成静态网站后，用 `gh-pages` 直接部署到github上。\n\nvuepress更好的一点在于你可以自定义其webpack配置和主题，意味着你可以让你自己的文档站点在开发阶段有更多的功能特性的支持，同时可以把站点风格改成自己的一套主题风格。这就无需我们重头开始去做一套了，对于咱们想要快速完成组件库文档建设这一需求来说，还是挺有效的。\n\n不过这只是咱们要做的事情的一个辅助性的东西，所以具体的使用咱们在实践阶段再说明，这里就不赘述了。\n\n\n\n### 自定义主题\n\n自定义主题的功能对于一个开源类库来说肯定还是挺有好处的，这样使用者就可以自己使用组件库的功能而在界面设计上使用自己的设计风格。其实大部分组件库的功能设计都是挺好挺完善的，所以一般来说中小型公司即使想要实现自己的一套组件风格的东西，直接使用开源类库如 element、iview或者基于react的Antd 所提供的功能和交互逻辑，然后在其上进行主题定制基本就满足需求了（除非你家设计师很有想法。。。）。\n\n自定义主题的功能一般的使用方式是这样的\n\n1. 通过主题生成工具。（制作者需要单独做一个工具）\n2. 引入关键主题文件，覆盖主题变量。(这种方式一般都需要适配制作者所使用的css预处理器）\n\n对于第一种方式往往都是组件库的制作者通过把生成组件样式的那一套东西做成一个工具，然后提供给使用者去根据自己的需要来调整，最后生成一套特定的样式文件，引入使用。\n\n第二种方式，**作为使用者来说，你主要做的其实是覆盖了组件库中的一些主题变量**，因为具体的组件的样式文件不是写死的固定样式值，而是使用了定义好的变量，所以你的自定义主题就生效了。但是这也会引入一个小问题就是你必须适配组件库的创造者所使用的样式预处理器，比如你用iview，那你的项目就要能解析Less文件，你用ElementUI，你的项目就必须可以解析SCSS。\n\n其实对于第一种方式也主要是以调整主题变量为主。所以当咱们自己要做一套组件库的时候，不难看出，一个核心点就是需要**把主题变量文件和样式文件拆开来**，后面的就简单了。\n\n\n\n### webpack打包\n\n类库项目的构建这里提两点：\n\n1. **暴露入口**\n2. **外部化依赖**\n\n先谈第一点 “暴露接口”。业务项目中，我们的整个项目通过webpack或其他打包工具打包成一个或多个bundle文件，这些文件被浏览器载入后就会直接运行。但是一个类库项目往往都不是单独运行的，而是通过暴露一个 “入口”，然我在业务项目中去调用它。 在webpack配置文件里，可以通过定义 `output` 中的 `library` 和 `libraryTarget` 来控制我们要暴露的一个 “入口变量” ，以及我们要构建的目标代码。\n\n这一点可以详细参考webpack官方文档: https://webpack.js.org/configuration/output/#outputlibrarytarget\n\n```javascript\nmodule.exports = {\n  // other config\n\toutput: {\n    library: \"MyLibName\",\n    libraryTarget: \"umd\",\n    umdNamedDefine: true\n  }\n}\n```\n\n再说一下 “外部化依赖”，我们做一个vue组件库项目的时候，我们的组件都是依赖于vue的，当我们组件库项目中的某个地方引入了vue，那么打包的时候vue的运行时也是会被一块儿打包进入最终的组件库bundle文件的。这样的问题在于，我们的vue组件库是被vue项目使用的，那么项目中已经有运行时了，我们就没必要在组件库中加入运行时，这样会多增加组件库bundle的体积。使用webpack的 `externals`可以将vue依赖 \"外部化\"。\n\n```javascript\nmodule.exports = {\n\t// other config\n\texternals: {\n    vue: {\n      root: 'Vue',\n      commonjs: 'vue',\n      commonjs2: 'vue',\n      amd: 'vue'\n    }\n  }\n}\n```\n\n\n\n### 按需加载\n\n组件库的按需加载功能还是很实用的， 这样可以避免我们在使用组件库的过程中把所有的用到和没用到的内容都打包到业务代码中去，导致最后的bundle文件过大影响用户体验。\n\n在业务项目中我们的按需加载都是把需要按需加载的地方单独生成为一个chunk，然后浏览器运行我们的打包代码的时候发现我们需要这一块儿资源了，再发起请求获取到对应的所需代码。\n\n在组件库里边，我们就需要改变一下引入的方式，比如一开始我们引入一个组件库的时候是直接将组件库和样式全部引入的。如下面这样\n\n```javascript\nimport LimeUI from 'lime-ui' // 引入组件库\nimport 'lime-ui/styles/index.css' // 引入整个组件库的样式文件\n\nVue.use(LimeUI)\n```\n\n那么，换成手动的按需加载的方式就是\n\n```javascript\nimport { Button } from 'lime-ui' // 引入button组件\nimport 'lime-ui/styles/button.css' // 引入button的样式\n\nVue.component('l-button', Button) // 注册组件\n```\n\n这种方式的确是按需引入的，但也一个不舒服的地方就是每次我们引入的时候都需要手动的引入组件和样式。一般来说一个项目里面用到的组件少说也有十多个，这就比较麻烦了。组件库是怎么解决这个问题的呢？\n\n通过babel插件的方式，将引入组件库和组件样式的模式自动化，比如antd、antd-mobile、material-ui都在使用的`babel-plugin-import`、还有ElementUI使用的 `babel-plugin-component`。在业务项目中配置好babel插件之后，它内部就可以给你做一个这样的转换（这里以 babel-plugin-component）\n\n```javascript\n// 原始代码\nimport { Button } from 'components'\n \n\n// 转换代码\nvar button = require('components/lib/button')\nrequire('components/lib/button/style.css')\n```\n\nOK，那既然代码可以做这样的转换的话，其实我们所要做的一点就是在我们打造组件库的时候，把我们的组件库的打包代码放到对应的文件目录结构之下就可以了。使用者可以选择手动载入组件，也可以使用babel插件的方式优化这一步骤。\n\n\n\nbabel-plugin-component 文档： https://www.npmjs.com/package/babel-plugin-component\n\nbabel-pluigin-import 文档: https://www.npmjs.com/package/babel-plugin-import\n\n\n\n## 组件：比起日常的组件设计，做组件库你还需要知道些什么？\n\n做组件库中的组件的技巧和在项目中用到的还是有一些区别的，这一小节就是告诉大家，组件库中的组件设计，我们还应该知道哪些必要的知识内容。\n\n### 组件通信：除了上下级之间进行数据通信，还有什么？\t\n\n我们常规用到的组件通信的方法就是通过 `props` 和 `$emit` 来进行父组件和子组件之间的数据传递，如下面的示意图中展示的那样：父组件通过 `props` 将数据给子组件、子组件通过 `$emit ` 将数据传递给父组件，顶多通过`eventBus`或`Vuex`来达到任意组件之间数据的相互通信。这些方法在常规的业务开发过程中是比较有效的，但是在组件库的开发过程中就显得有点力不从心了，主要的问题在于： <u>**如何处理跨级组件之间的数据通信呢？**</u>\n\n![IMG](https://blog-1257601889.cos.ap-shanghai.myqcloud.com/vue/attrs/vue.png?ynotemdtimestamp=1551245782807)\n\n如果在日常项目中，我们当然可以使用像 `vuex` 这样的将组件数据直接 ”外包“ 出去的方式来实现数据的跨级访问，但是`vuex` 始终是一个外部依赖项，组件库的设计肯定是不能让这种强依赖存在的。下面我们就来说说两个在组件库项目中我们会用到的数据通信方式。\n\n#### 内置的provide/inject\n\n**<u>provide/inject 是vue自带的可以跨级从子组件中获取父级组件数据的一套方案。</u>** 这一对东西类似于react里面的 `Context` ，都是为了处理跨级组件数据传递的问题。\n\n使用的时候，在子组件中的 inject 处声明需要注入的数据，然后在父级组件中的某个含有对应数据的地方，提供子级组件所需要的数据。不管他们之间跨越了多少个组件，子级组件都能获取到对应的数据。(参考下面的伪代码例子)\n\n```javascript\n// 引用关系 CompA --> CompB --> CompC --> ... --> ChildComp\n\n// CompA.vue\nexport default {\n  provide: {\n    theme: 'dark'\n  }\n}\n\n// CompB.vue\n// CompC.vue\n// ... \n\n// ChildComp.vue\nexport default {\n  inject: ['theme'],\n\tmounted() {\n    console.log(this.theme) // 打印结果: dark\n  }\n}\n```\n\n不过provide/inject的方式主要是子组件从父级组件中跨级获取到它的状态，却不能完美的解决以下问题：\n\n1. 子级组件跨级传递数据到父级组件\n2. 父级组件跨级传递数据到子级组件\n\n\n\n#### 派发和广播: 自制dispatch和broadcast功能\n\n**<u>dispatch和broadcast可以用来做父子级组件之间跨级通信</u>**。在vue1.x里面是有dispatch和broadcast功能的，不过在vue2.x中被取消掉了。这里可以参考一下下面链接给出的v1.x中的内容。\n\n> dispatch文档（v1.x）：https://v1.vuejs.org/api/#vm-dispatch\n>\n> broadcast文档（v1.x）：https://v1.vuejs.org/api/#vm-broadcast\n\n根据文档，我们得知\n\n- dispatch会派发一个事件，这个事件首先在自己这个组件实例上去触发，然后会沿着父级链一级一级的往上冒泡，直到触发了某个父级中声明的对这个事件的监听器后就停止，除非是这个监听器返回了true。当然监听器也是可以通过回调函数获取到事件派发的时候传递的所有参数的。这一点很像我们在DOM中的事件冒泡机制，应该不难理解。\n\n- 而broadcast就是会将事件广播到自己的所有子组件实例上，一层一层的往下走，因为组件树的原因，往下走的过程会遇到 “分叉”，也就可以看成是一条条的多个路径。事件沿着每一个子路径向下冒泡，每个路径上触发了监听器就停止，如果监听器返回的是true那就继续向下再传播。\n\n简单总结一下。<u>**dispatch派发事件往上冒泡，broadcast广播事件往下散播，遇到处理对应事件的监听器就处理，监听器没有返回true就停止**</u>\n\n需要注意的是，这里的派发和广播事件都是 **跨层级的** , 而且可以携带参数，那也就意味着可以**跨层级进行数据通信**。\n\n![IMG](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzkx.png)\n\n由于dispatch和broadcast在vue2.x中取消了，所以我们这里可以自己写一个，然后通过mixin的方式混入到需要使用到跨级组件通信的组件中。\n\n方法内容其实很简单，这里就直接列代码\n\n```javascript\n// 参考自iview的实现\nfunction broadcast(componentName, eventName, params) {\n  this.$children.forEach(child => {\n    const name = child.$options.name;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}\nexport default {\n  methods: {\n    dispatch(componentName, eventName, params) {\n      let parent = this.$parent || this.$root;\n      let name = parent.$options.name;\n\n      while (parent && (!name || name !== componentName)) {\n        parent = parent.$parent;\n\n        if (parent) {\n          name = parent.$options.name;\n        }\n      }\n      if (parent) {\n        parent.$emit.apply(parent, [eventName].concat(params));\n      }\n    },\n    broadcast(componentName, eventName, params) {\n      broadcast.call(this, componentName, eventName, params);\n    }\n  }\n};\n\n```\n\n其实这里的实现和vue1.x中的实现还是有一定的区别的：\n\n1. **dispatch没有事件冒泡。找到哪个就直接执行**\n2. **设定了一个name参数，只针对特定name的组件触发事件**\n\n其实看懂了这里的代码，你就应该可以举一反三想出 **找寻任何一个组件的方法了，不管是向上还是向下找，无非就是循环遍历和迭代处理，直到目标组件出现，然后调用它。** 派发和广播无非就是找到之后利用vue自带的事件机制来发布事件，然后在具体组件中监听该事件并处理。\n\n\n\n### 渲染函数：它可以释放javascript的能力\n\n首先我们回顾一下一个组件是如何从写代码到被转换成界面的。我们写vue单文件组件的时候一般会有template、script和style三部分，在打包的时候，vue-loader会将其中的template模板部分先编译成Vue实例中render选项所需要的构建视图的代码。在具体运行的时候，vue运行时会使用` $mount` 进行渲染，渲染好之后将其挂载到你提供的DOM节点下。\n\n整个过程里面我们只日常关注最多的当然就是template的部分，但是template其实只是vue提供的一个语法糖，只是让我们写代码写起来跟写html一样轻松，降低刚入手vue的小伙伴的学习成本。React就没有提供template的语法糖，而是使用的JSX来降低写组件的复杂度。(vue能在react和angular两大框架的压力下异军突起，简洁易懂的模板语法是有一定促进作用的，毕竟看起来更简单)\n\n通过上面我们回顾的内容，其实我们也发现了，**我们写的template，最终都是javascript**。这里template被编译之后，给到了 render这个渲染函数，在执行渲染的时候vue就会执行render中的操作来渲染我们的组件。\n\n所以template是好，但 **如果你想要使用全部的javascript的能力，那就可以使用渲染函数**。\n\n> 渲染函数&JSX (官方文档)：https://cn.vuejs.org/v2/guide/render-function.html \n\n日常写业务组件，我们用template就挺OK的，不过当遇到一些复杂情况，用 `写组件 --> 引入使用 --> 注册组件 --> 使用组件` 的方式就不好处理了，比如下面两种情况：\n\n1. 通过代码动态渲染组件\n2. 将组件渲染到其他位置\n\n第一种情况是通过代码动态渲染组件，比如运营常常使用的活动h5页面，每个活动都不一样，每次要么都重新做一份，要么在原有的基础上修改。但是这种修改的页面结构调整是很大的，每次都会是破坏性的，和重做其实没区别。这样的话，每次活动无论内容如何，前端都要上手去写代码。但其实只需要在管理后台做一个活动编辑器，编辑器的内容直接转化为render函数的代码，然后通过配置下发到某个页面上，承载页拿到数据给到render函数执行渲染。这样就可以动态的根据管理后台配置的方式来渲染组件内容，每次的活动页，运营也可以通过编辑器自行生成。\n\n第二种情况是要将组件渲染到不同位置。我们日常写业务组件基本就是写一个组件，在需要的拿来使用。如果你只是在template中把组件写进去，那你的组件的内容就都会作为当前组件的子组件进行渲染，所生成的DOM结构也是在当前的DOM结构之下的。知道render之后，其实我们可以新建vue实例，动态渲染之后，手动挂载到任意的DOM位置上去。\n\n```javascript\nimport CompA from './CompA.vue'\n\nlet Instance = new Vue({\n  render(h) {\n    return h(CompA)\n  }\n})\n\nlet component = Instance.$mount() // 执行渲染\ndocument.body.appendChild(component.$el) // 挂载到body元素下\n\n```\n\n我们使用的element里面的 `this.$message` 就用到了动态渲染，然后手动挂载到指定位置。\n\n\n\n\n# 实践：做一遍你就会了\n\n这里先贴上我们的github地址，各位可以在做的过程中对照着看。https://github.com/arronKler/lime-ui\n\n## 建立一个工程化的项目\n\n### 第一步，建立工程化结构\n\n这里就不废话了，直接贴目录结构和解释\n\n```bash\n|- assets/   # 存放一些额外的资源文件，图片之类的\n|- build/  # webpack打包配置\n|- docs/  # 存放文档\n\t|- .vuepress  # vuepress配置目录\n\t|- component # 组件相关的文档放这里\n\t|- README.md # 静态首页\n|- lib/  # 打包生成的文件放这里\n\t|- styles/ # 打包后的样式文件\n|- src/ # 在这里写代码\n\t|- mixins/ # mixin文件\n\t|- packages/ # 各个组件，每个组件是一个子目录\n\t|- styles/ # 样式文件\n\t\t|- common/ # 公用的样式内容\n\t\t|- mixins/ # 复用的mixin\n\t|- utils  # 工具目录\n\t|- index.js  # 打包入口，组件的导出\n|- test/  # 测试文件夹\n\t|- specs/  # 存放所有的测试用例\n|- .npmignore\n|- .gitignore\n|- .babelrc\n|- README.md\n|- package.json\n```\n\n这里比较重要的目录就是我们的src目录，下面存放了我们的各个单一的组件和一套样式库，另外还有一些辅助的东西。我们写文档就是在 docs目录下去写。项目目录最外层都是些常规的配置内容，比如 `.npmignore` 和 `.gitignore` 这样的文件我们都是很常见的，所以我就不具体细说这一部分了，要是有一定疑惑可以直接参见github上的源码对照着看。\n\n这里我们把需要使用到的类库文件也先建立好\n\n在 src/mixins 下创建一个 emitter.js，写入如下内容，也就是我们的dispatch和broadcast的方法，之后的组件设计中会用到\n\n```javascript\nfunction broadcast(componentName, eventName, params) {\n  this.$children.forEach(child => {\n    const name = child.$options.name;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}\nexport default {\n  methods: {\n    dispatch(componentName, eventName, params) {\n      let parent = this.$parent || this.$root;\n      let name = parent.$options.name;\n\n      while (parent && (!name || name !== componentName)) {\n        parent = parent.$parent;\n\n        if (parent) {\n          name = parent.$options.name;\n        }\n      }\n      if (parent) {\n        parent.$emit.apply(parent, [eventName].concat(params));\n      }\n    },\n    broadcast(componentName, eventName, params) {\n      broadcast.call(this, componentName, eventName, params);\n    }\n  }\n};\n```\n\n然后在 src/utils 下新建一个 assist.js 文件，写下辅助性的函数\n\n```javascript\nexport function oneOf(value, validList) {\n  for (let i = 0; i < validList.length; i++) {\n    if (value === validList[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n这两个地方都是之后会使用到的，如果你需要其他的辅助内容，也可以在这两个文件所在的目录下去建立。\n\n\n\n###  第二步， 完善打包流程\n\n目录建好了，那就该填充血肉了，要打包一个组件库项目，肯定是要先配置好我们的webpack，不然写了源码也没法跑起来。所以我们先定位到 build目录下，在build目录下先建立三个文件\n\n- webpack.base.js 。存放基本的一些rules配置\n\n- webpack.prod.js 。整个组件库的打包配置\n- gen-style.js 。单独对样式进行打包\n\n以下是具体的配置内容\n\n```javascript\n/* webpack.base.js */\nconst path = require('path');\nconst webpack = require('webpack');\nconst pkg = require('../package.json');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin')\n\nfunction resolve(dir) {\n  return path.join(__dirname, '..', dir);\n}\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          loaders: {\n            css: [\n              'vue-style-loader',\n              {\n                loader: 'css-loader',\n                options: {\n                  sourceMap: true,\n                },\n              },\n            ],\n            less: [\n              'vue-style-loader',\n              {\n                loader: 'css-loader',\n                options: {\n                  sourceMap: true,\n                },\n              },\n              {\n                loader: 'less-loader',\n                options: {\n                  sourceMap: true,\n                },\n              },\n            ],\n          },\n          postLoaders: {\n            html: 'babel-loader?sourceMap'\n          },\n          sourceMap: true,\n        }\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        options: {\n          sourceMap: true,\n        },\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.css$/,\n        loaders: [\n          {\n            loader: 'style-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true,\n            },\n          }\n        ]\n      },\n      {\n        test: /\\.less$/,\n        loaders: [\n          {\n            loader: 'style-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'less-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n        ]\n      },\n      {\n        test: /\\.scss$/,\n        loaders: [\n          {\n            loader: 'style-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'sass-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n        ]\n      },\n      {\n        test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,\n        loader: 'url-loader?limit=8192'\n      }\n    ]\n  },\n  resolve: {\n    extensions: ['.js', '.vue'],\n    alias: {\n      'vue': 'vue/dist/vue.esm.js',\n      '@': resolve('src')\n    }\n  },\n  plugins: [\n    new webpack.optimize.ModuleConcatenationPlugin(),\n    new webpack.DefinePlugin({\n      'process.env.VERSION': `'${pkg.version}'`\n    }),\n    new VueLoaderPlugin()\n  ]\n};\n```\n\n```javascript\n/*  webpack.prod.js */\nconst path = require('path');\nconst webpack = require('webpack');\nconst merge = require('webpack-merge');\nconst webpackBaseConfig = require('./webpack.base.js');\n\nprocess.env.NODE_ENV = 'production';\n\nmodule.exports = merge(webpackBaseConfig, {\n  devtool: 'source-map',\n  mode: \"production\",\n  entry: {\n    main: path.resolve(__dirname, '../src/index.js')  // 将src下的index.js 作为入口点\n  },\n  output: {\n    path: path.resolve(__dirname, '../lib'),\n    publicPath: '/lib/',\n    filename: 'lime-ui.min.js',  // 改成自己的类库名\n    library: 'lime-ui', // 类库导出\n    libraryTarget: 'umd',\n    umdNamedDefine: true\n  },\n  externals: { // 外部化对vue的依赖\n    vue: {\n      root: 'Vue',\n      commonjs: 'vue',\n      commonjs2: 'vue',\n      amd: 'vue'\n    }\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': '\"production\"'\n    })\n  ]\n});\n```\n\n```javascript\n/* gen-style.js */\nconst gulp = require('gulp');\nconst cleanCSS = require('gulp-clean-css');\nconst sass = require('gulp-sass');\nconst rename = require('gulp-rename');\nconst autoprefixer = require('gulp-autoprefixer');\nconst components = require('./components.json')\n\nfunction buildCss(cb) {\n  gulp.src('../src/styles/index.scss')\n    .pipe(sass())\n    .pipe(autoprefixer())\n    .pipe(cleanCSS())\n    .pipe(rename('lime-ui.css'))\n    .pipe(gulp.dest('../lib/styles'));\n  cb()\n}\n\nexports.default = gulp.series(buildCss)\n```\n\nOK，这里我们的webpack配置基本设置好了，webpack.base.js 中的配置就主要是一些loader和插件的配置，具体的出入口都是在 webpack.prod.js 中配置的。这里webpack.prod.js 合并了 webpack.base.js 中的配置项。关于 output.libary 和 externals ，阅读了之前 “准备” 阶段的内容的应该不会陌生了。\n\n另外还有 gen-style.js 这个文件是单独使用了 gulp 来对样式文件进行打包操作的，我们这里选用的是 scss的语法，如果你想用less或其他的预处理器，也可以自行修改这里的文件和相关依赖。\n\n不过这个配置肯定还没有结束，首先我们需要安装好这里的配置里使用到的各种loader和plugin。为了不漏掉安装项和保持一致性，可以直接复制下面的配置内容放到 package.json 下，通过 `npm install` 来进行安装。需要注意的是，这里的安装完成之后，其实后面的一些内容的依赖也都一并安装好了。\n\n```json\n\"dependencies\": {\n  \"async-validator\": \"^3.0.4\",\n  \"core-js\": \"2.6.9\",\n  \"webpack\": \"^4.39.2\",\n  \"webpack-cli\": \"^3.3.7\"\n},\n\"devDependencies\": {\n  \"@babel/core\": \"^7.5.5\",\n  \"@babel/plugin-transform-runtime\": \"^7.5.5\",\n  \"@babel/preset-env\": \"^7.5.5\",\n  \"@vue/test-utils\": \"^1.0.0-beta.29\",\n  \"babel-loader\": \"^8.0.6\",\n  \"chai\": \"^4.2.0\",\n  \"cross-env\": \"^5.2.0\",\n  \"css-loader\": \"2.1.1\",\n  \"file-loader\": \"^4.2.0\",\n  \"gh-pages\": \"^2.1.1\",\n  \"gulp\": \"^4.0.2\",\n  \"gulp-autoprefixer\": \"^7.0.0\",\n  \"gulp-clean-css\": \"^4.2.0\",\n  \"gulp-rename\": \"^1.4.0\",\n  \"gulp-sass\": \"^4.0.2\",\n  \"karma\": \"^4.2.0\",\n  \"karma-chai\": \"^0.1.0\",\n  \"karma-chrome-launcher\": \"^3.1.0\",\n  \"karma-coverage\": \"^2.0.1\",\n  \"karma-mocha\": \"^1.3.0\",\n  \"karma-sinon-chai\": \"^2.0.2\",\n  \"karma-sourcemap-loader\": \"^0.3.7\",\n  \"karma-spec-reporter\": \"^0.0.32\",\n  \"karma-webpack\": \"^4.0.2\",\n  \"less\": \"^3.10.2\",\n  \"less-loader\": \"^5.0.0\",\n  \"mocha\": \"^6.2.0\",\n  \"node-sass\": \"^4.12.0\",\n  \"rimraf\": \"^3.0.0\",\n  \"sass-loader\": \"^7.3.1\",\n  \"sinon\": \"^7.4.1\",\n  \"sinon-chai\": \"^3.3.0\",\n  \"style-loader\": \"^1.0.0\",\n  \"url-loader\": \"^2.1.0\",\n  \"vue-loader\": \"^15.7.1\",\n  \"vue-style-loader\": \"^4.1.2\",\n  \"vuepress\": \"^1.0.3\"\n},\n```\n\n另外，由于我们使用了babel，所以需要在项目的根目录下设置一下 `.babelrc` 文件，内容如下：\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"loose\": false,\n        \"modules\": \"commonjs\",\n        \"spec\": true,\n        \"useBuiltIns\": \"usage\",\n        \"corejs\": \"2.6.9\"\n      }\n    ]\n  ],\n  \"plugins\": [\n    \"@babel/plugin-transform-runtime\",\n  ]\n}\n```\n\n当然也不要忘记在package.json文件中写上scripts简化手动输入命令的过程\n\n```json\n{\n\t\"scripts\": {\n    \"build:style\": \"gulp --gulpfile build/gen-style.js\",\n    \"build:prod\": \"webpack --config build/webpack.prod.js\",\n  }\n}\n```\n\n\n\n### 第三步，建立文档化工具\n\n如果在上一步中未安装了 vuepress ，可以通过 `npm install vuepress --save-dev` 来安装，\n\n然后在 package.json 中加入脚本，快速启动\n\n```json\n{\n  \"scripts\": {\n    // ...\n    \"docs:dev\": \"vuepress dev docs\",\n    \"docs:build\": \"vuepress build docs\"\n  }\n}\n```\n\n这个时候你可以在你的 docs/README.md 文件里写点内容，然后运行 `npm run docs:dev` 就可以看到本地的文档内容了。需要打包的时候使用 `npm run docs:build ` 就可以了。\n\n如果我们的项目是要放到github上的，那么其实也可以一并将我们的文档生成之后也放到github上去，利用github的pages功能让这个本地的文档在线运行。（github pages托管我们的静态页面和资源）\n\n可以运行 `npm install gh-pages --save-dev` 安装 `gh-pages` 这个可以帮我们一键部署github pages文档的工具。它的工作原理就是将对应的某个文件夹下的资源迁移到我们的当前项目的gh-pages分支上，然后这个分支在push给了github之后，github就会将该分支内的内容服务起来。为了更好的使用它，我们可以在package.json中添加scripts\n\n```json\n{\n  \"scripts\": {\n    // ...\n  \t\"deploy\": \"gh-pages -d docs/.vuepress/dist\",\n    \"deploy:build\": \"npm run docs:build && npm run deploy\",\n  }\n}\n```\n\n这样你就可以使用 `npm run deploy` 直接部署你的vuepress生成的静态站点，不过务必在部署之前运行一下文档的构建程序。因此我们也添加了一条 `npm run deploy:build` 命令，使用这条命令就可以直接把文档的构建和部署直接一起解决。是不是很简单呢？\n\n不过为了我们能够直接使用自己写的组件，还需要对vuepress做一点点配置。在 docs/.vuepress目录下新建一个 enhanceApp.js 文件，写入如下内容，将我们的组件库的入口和样式注入进去\n\n```javascript\nimport LimeUI from '../../src/index.js'\nimport \"../../src/styles/index.scss\"\n\nexport default ({\n  Vue,\n  options,\n  router\n}) => {\n  Vue.use(LimeUI)\n}\n```\n\n这个时候我们之后写的组件就可以直接在文档中使用了。\n\n\n\n### 第四步，样式构建\n\n先需要说明的是这里我们所使用的样式预处理器的语法是scss。那么在“完善打包流程”这一小节中已经将用gulp进行打包的代码给出了，不过有必要说明一下，我们又是如何去整合样式内容的。\n\n首先，为了之后便于做按需加载，对于每个组件的样式都是一个单独的scss文件，写样式的时候，为了避免太多的层级嵌套，使用了BEM风格的方式去书写。\n\n我们需要先在 src/styles目录执行如下命令生成一个基本的样式文件\n\n```bash\ncd src/styles\nmkdir common\nmkdir mixins\ntouch common/var.scss  # 样式变量文件\ntouch common/mixins.scss\ntouch index.scss  # 引入所有样式\n```\n\n然后将对应的 var.scss 和 mixins.scss 文件填充上一些基础内容\n\n```scss\n/* common/var.scss */\n\n$--color-primary: #ff6b00 !default;\n$--color-white: #FFFFFF !default;\n$--color-info: #409EFF !default;\n$--color-success: #67C23A !default;\n$--color-warning: #E6A23C !default;\n$--color-danger: #F56C6C !default;\n```\n\n```scss\n/* mixins/mixins.scss */\n$namespace: 'lime';  /* 组件库的样式前缀 */\n\n/* BEM\n -------------------------- */\n@mixin b($block) {\n  $B: $namespace+'-'+$block !global;\n\n  .#{$B} {\n    @content;\n  }\n}\n```\n\n在mixins文件中我们声明了一个mixin，用于帮助我们更好的去构建样式文件。\n\n\n\n## 组件打造案例\n\n上面的内容设置好了， 咱们就可以开始具体去做一个组件试试了\n\n### 简单的button组件\n\n这是做好之后的大致效果\n\n![2.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzc0.png)\n\nOK，那我们建立基本的button组件相关的文件\n\n```bash\ncd src/packages\nmkdir button && cd button\ntouch index.js\ntouch button.vue\n```\n\n写入button.vue的内容\n\n```javascript\n<template>\n  <button class=\"lime-button\" :class=\"{[`lime-button-${type}`]: true}\" type=\"button\">\n    <slot></slot>\n  </button>\n</template>\n\n<script>\nimport { oneOf } from '../../utils/assist';\n\nexport default {\n  name: 'Button',\n  props: {\n    type: {\n      validator (value) {\n          return oneOf(value, ['default', 'primary', 'info', 'success', 'warning', 'error']);\n      },\n      type: String,\n      default: 'default'\n    }\n  }\n}\n</script>\n```\n\n这里我们需要在 index.js 中导出这个组件\n\n```javascript\nimport Button from './button.vue'\nexport default Button\n```\n\n这样单个的一个组件就完成了，之后你可以再多做几个组件试试，不过有一点就是这些组件需要一个统一的打包入口，我们再webpack中已经配置过了，那就是 src/index.js 这个文件，我们需要在这个文件里面将我们刚才写的button组件以及你自己写的其他组件都引入进来，然后统一导出给webpack打包使用，具体代码见下\n\n```javascript\nimport Button from './packages/button'\n\nconst components = {\n  lButton: Button,\n}\n\nconst install = function (Vue, options = {}) {\n\n  Object.keys(components).forEach(key => {\n    Vue.component(key, components[key]);\n  });\n}\n\nexport default install\n```\n\n可以看到的是index.js中我们最终导出的是一个叫install的函数，这个函数其实就是Vue插件的一种写法，便于我们在实际项目中引入的时候可以使用 `Vue.use` 的方式来自动安装我们的整个组件库。install接受两个参数，一个是Vue，我们把它用来注册一个个的组件。还有一个是options，便于我们可以在注册组件的时候传入一些初始化参数，比如默认的按钮大小、主题等信息，都可以通过参数的方式来设定。\n\n然后我们可以在 src/styles目录下新建一个button.scss 文件，写入我们button对应的样式\n\n```scss\n/* button.scss */\n@charset \"UTF-8\";\n@import \"common/var\";\n@import \"mixins/mixins\";\n\n@include b(button) {\n  min-width: 60px;\n  height: 36px;\n  font-size: 14px;\n  color: #333;\n  background-color: #fff;\n  border-width: 1px;\n  border-radius: 4px;\n  outline: none;\n  border: 1px solid transparent;\n  padding: 0 10px;\n\n  &:active,\n  &:focus {\n    outline: none;\n  }\n\n  &-default {\n    color: #333;\n    border-color: #555;\n\n    &:active,\n    &:focus,\n    &:hover {\n      background-color: rgba($--color-primary, 0.3);\n    }\n  }\n  &-primary {\n    color: #fff;\n    background-color: $--color-primary;\n\n    &:active,\n    &:focus,\n    &:hover {\n      background-color: mix($--color-primary, #ccc);\n    }\n  }\n\n  &-info {\n    color: #fff;\n    background-color: $--color-info;\n\n    &:active,\n    &:focus,\n    &:hover {\n      background-color: mix($--color-info, #ccc);\n    }\n  }\n   &-success {\n    color: #fff;\n    background-color: $--color-success;\n\n    &:active,\n    &:focus,\n    &:hover {\n      background-color: mix($--color-success, #ccc);\n    }\n  }\n}\n```\n\n最后我们还需要在 src/styles/index.scss 文件中将button的样式引入进去\n\n```scss\n@import \"button\";\n```\n\n为了简单的实验，你可以直接在 docs/README.md 文件下写两个button组件试试看\n\n```javascript\n<template>\n\t<l-button type=\"primary\">Click me</l-button>\n</template>\n```\n\n如果你想要得到和我在 https://arronkler.github.io/lime-ui/ 上一样的效果，可以参考 https://github.com/arronKler/lime-ui 项目中的 docs 目录下的配置。如果想要更个性化的配置，可以查阅vuepress的官方文档。\n\n\n\n### Notice提示组件\n\n这个组件就要用到我们的动态渲染的相关的东西了。具体最后的使用方式是这样的\n\n```javascript\nthis.$notice({\n  title: '提示',\n  content: this.content || '内容',\n  duration: 3\n})\n```\n\n效果类似于这样\n\n![4.png](https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzAx.png)\n\nOK，我们先来写一下这个组件的一个基本源码\n\n在 src/packages 目录下新建notice文件夹，然后新建一个 notice.vue 文件\n\n```javascript\n<template>\n  <div class=\"lime-notice\">\n    <div class=\"lime-notice__main\" v-for=\"item in notices\" :key=\"item.id\">\n      <div class=\"lime-notice__title\">{{item.title}}</div>\n      <div class=\"lime-notice__content\">{{item.content}}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      notices: []\n    }\n  },\n  methods: {\n    add(notice) {\n      let id = +new Date()\n      notice.id = id\n      this.notices.push(notice)\n\n      const duration = notice.duration\n      setTimeout(() => {\n        this.remove(id)\n      }, duration * 1000)\n    },\n    remove(id) {\n      for(let i = 0; i < this.notices.length; i++) {\n        if (this.notices[i].id === id) {\n          this.notices.splice(i, 1)\n          break;\n        }\n      }\n    }\n  }\n}\n</script>\n\n```\n\n代码很简单，其实就是声明了一个容器，然后在其中通过控制 notices 的数据来展示和隐藏，接着我们在同一个目录下新建一个notice.js 文件来做动态渲染\n\n```javascript\nimport Vue from 'vue'\nimport Notice from './notice.vue'\n\nNotice.newInstance = (properties) => {\n  let props = properties || {}\n  const Instance = new Vue({\n    render(h) {\n      return h(Notice, {\n        props\n      })\n    }\n  })\n\n  const component = Instance.$mount()\n  document.body.appendChild(component.$el)\n\n  const notice = component.$children[0]\n\n  return {\n    add(_notice) {\n      notice.add(_notice)\n    }, \n    remove(id) {\n\n    }\n  }\n}\n\nlet noticeInstance\n\n\nexport default (_notice) => {\n  noticeInstance = noticeInstance || Notice.newInstance()\n  noticeInstance.add(_notice)\n}\n```\n\n这里我们我们通过动态渲染的方式让我们的组件可以直接挂在到body下面，而非归属于根挂载点之下。\n\n然后在 src/styles 目录下新建 notice.scss 文件，写上我们的样式文件\n\n```scss\n/* notice.scss */\n@charset \"UTF-8\";\n@import \"common/var\";\n@import \"mixins/mixins\";\n\n@include b(notice) {\n  position: fixed;\n  right: 20px;\n  top: 60px;\n  z-index: 1000;\n\n  &__main {\n    min-width: 100px;\n    padding: 10px 20px;\n    box-shadow: 0 0 4px #aaa;\n    margin-bottom: 10px;\n    border-radius: 4px;\n  }\n\n  &__title {\n    font-size: 16px;\n  }\n  &__content {\n    font-size: 14px;\n    color: #777;\n  }\n}\n```\n\n最后同样的，也需要在 src/index.js 这个入口文件中对 notice做处理。完整代码是这样的。\n\n```javascript\nimport Button from './packages/button'\nimport Notice from './packages/notice/notice.js'\n\nconst components = {\n  lButton: Button\n}\n\nconst install = function (Vue, options = {}) {\n\n  Object.keys(components).forEach(key => {\n    Vue.component(key, components[key]);\n  });\n\n  Vue.prototype.$notice = Notice;\n}\n\nexport default install\n```\n\n我们可以看到我们再Vue的原型上挂上了我们的 `$notice` 方法，这个方法调用的时候就会触发我们在 notice.js 文件中动态渲染组件的一套流程。这个时候我们就可以在 docs/README.md 文档中测试着用了。\n\n```javascript\n<script>\nexport default() {\n  mounted() {\n    this.$notice({\n        title: '提示',\n        content: this.content,\n        duration: 3\n    })\n  }\n}\n<script>\n```\n\n\n\n\n\n\n## 单独打包样式和组件\n\n为了能支持按需加载的功能，我们除了将整个组件库打包之外，还需要对样式和组件单独打包成单个的文件。这里我们需要做两件事儿\n\n1. 打包单独的css文件\n2. 打包单独的组件内容\n\n对于第一点，我们需要对 build/gen-style.js 文件做一下改造，加上buildSeperateCss任务，完整代码如下\n\n```javascript\n// 其他之前的代码...\n\nfunction buildSeperateCss(cb) {\n  Object.keys(components).forEach(compName => {\n    gulp.src(`../src/styles/${compName}.scss`)\n      .pipe(sass())\n      .pipe(autoprefixer())\n      .pipe(cleanCSS())\n      .pipe(rename(`${compName}.css`))\n      .pipe(gulp.dest('../lib/styles'));\n  })\n\n  cb()\n}\n\nexports.default = gulp.series(buildCss, buildSeperateCss) // 加上 buildSeperateCss\n```\n\n对于第二点，我们可以用一个新的webpack配置来处理，新建一个 build/webpack.component.js 文件，写入\n\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst merge = require('webpack-merge');\nconst webpackBaseConfig = require('./webpack.base.js');\nconst components = require('./components.json')\nprocess.env.NODE_ENV = 'production';\n\nconst basePath = path.resolve(__dirname, '../')\nlet entries = {}\nObject.keys(components).forEach(key => {\n  entries[key] = path.join(basePath, 'src', components[key])\n})\n\nmodule.exports = merge(webpackBaseConfig, {\n  devtool: 'source-map',\n  mode: \"production\",\n  entry: entries,\n  output: {\n    path: path.resolve(__dirname, '../lib'),\n    publicPath: '/lib/',\n    filename: '[name].js',\n    chunkFilename: '[id].js',\n    // library: 'lime-ui',\n    libraryTarget: 'umd',\n    umdNamedDefine: true\n  },\n  externals: {\n    vue: {\n      root: 'Vue',\n      commonjs: 'vue',\n      commonjs2: 'vue',\n      amd: 'vue'\n    }\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': '\"production\"'\n    })\n  ]\n});\n\n```\n\n这里我们引用了build文件夹下的一个叫做 component.json 的文件，该文件是我自定义用来标识我们的组件和组件路径的，实际上你也可以通过脚本直接遍历 src/packages目录自动获得这样一些信息。这里只是简单演示， build/component.json 的代码如下\n\n```json\n{\n  \"button\": \"packages/button/index.js\",\n  \"notice\": \"packages/notice/notice.js\"\n}\n```\n\n所有的单独打包流程配置好以后，我们就可以在 package.json 文件中再加上 scripts 命令\n\n```json\n{\n\t\"scripts\": {\n    // ...\n\t\t\"build:components\": \"webpack --config build/webpack.component.js\",\n    \"dist\": \"npm run build:style && npm run build:prod && npm run build:components\",\n\t}\n}\n```\n\nOK，现在只需要运行 `npm run dist` 命令，它就会自动去构建完整的样式内容和各个组件单独的样式内容，然后会打包一个完整的组件包和各个组件的单独的包。\n\n这里需要注意的一点就是你的package.json 文件中的这几个字段需要做一下调整\n\n```json\n{\n\t\"name\": \"lime-ui\",\n  \"version\": \"1.0.0\",\n  \"main\": \"lib/lime-ui.min.js\",\n  //...\n}\n```\n\n其中name表示别人使用了你的包的时候的包名，main字段很重要，表示别人直接引入你包的时候，入口文件是哪一个。这里因为我们webpack打包后的文件是 lib/lime-ui.min.js 所以我们这样去设置。\n\n一切就绪后，你就可以运行 `npm run dist` 打包你的组件库，然后 `npm publish` 去发布你的组件库了（发布前需要 `npm login` 登陆）\n\n\n\n## 使用自己的组件库\n\n### 直接使用\n\n我们可以用vue-cli 或其他工具另外生成一个demo项目，用这个项目去引入我们的组件库。如果你的包还没有发布出去，可以在你的组件库项目目录下 用 `npm link` 或者 `yarn link`的命令创建一个link（推荐使用yarn）\n\n然后在你的demo目录下使用 `npm link package_name` 或者 `yarn link package_name` 这里的package_name就是你的组件库的包名，然后在你的demo项目的入口文件里\n\n```javascript\nimport Vue from vue\nimport LimeUI from 'lime-ui'\nimport 'lime-ui/lib/styles/lime-ui.css'\n// 其他代码 ...\n\nVue.use(LimeUI)\n```\n\n这样设置好之后，我们创建的组件就可以在这个项目里使用了\n\n\n\n### 按需加载\n\n上面我们谈的是全局载入的一种使用方法，那如何按需加载呢？其实我们之前也说过那么一点\n\n先通过npm安装好 `babel-plugin-component` 包，然后在你的demo项目的 `.babelrc` 文件中写上这部分内容\n\n```json\n{\n    \"plugins\": [\n        [\"component\", {\n            \"libraryName\": \"lime-ui\",\n            \"libDir\": \"lib\",\n            \"styleLibrary\": {\n                \"name\": \"styles\",\n                \"base\": false, // no base.css file\n                \"path\": \"[module].css\"\n            }\n        }]\n    ]\n}\n```\n\n这里的配置是要符合我们的lime-ui 的一个目录结构的，有了这个配置我们就可以进行按需加载了，你可以像这样做加载一个Button\n\n```javascript\nimport Vue from 'vue'\nimport { Button } from 'lime-ui'\n\nVue.component('a-button', Button)\n```\n\n可以看到的是，我们并没有在这个位置加载任何样式，因为 `babel-plugin-component` 已经帮我们做了，不过因为我们只在组件库的入口点里面设置了 install 方法用来注册组件，所以这里我们按需引入的时候，就需要自己手动注册了。\n\n\n\n### 主题定制\n\n前面的内容做好之后，主题定制就比较简单了，我们先在DEMO项目的入口文件同级目录下创建一个 global.scss 文件，然后在其中写入类似下面这样的代码。\n\n```scss\n$--color-primary: red;\n@import \"~lime-ui/src/styles/index.scss\";\n```\n\n然后在入口文件中把引入组件库的方式改变一下\n\n```javascript\nimport Vue from vue\nimport LimeUI from 'lime-ui'\nimport './global.scss'\n// 其他代码 ...\n\nVue.use(LimeUI)\n```\n\n我们在入口文件中把对组件库的样式引入，改成引入我们自定义的global.scss文件。\n\n其实这里就是覆盖了我们在组件库项目里 var.scss 里的变量的值，然后其余的组件基础样式还是使用了各自的样式内容，这样就可以达到主题定制了。\n\n\n\n# 结语\n\n本文通过对组件库的一些特性的介绍和一个实际的操作案例，阐述了打造一套组件库的一些基础的东西。希望能通过这样的一次分享，让我们不只是去使用组件库，而是能知道组件库的诞生过程和了解组件库的一些内部特性，帮助我们在日常使用的过程中能“心中有数”，当出现问题或组件库需求可能不满足的时候有一个新的思考入手点，那就足够了。\n\n\n\n# 引用参考\n\n\n\n1. Vue` $dispatch `和` $broadcast `详解: https://juejin.im/post/5c7fd345f265da2da771f4cd\n2. Component Tests with Vue.js - Matt O'Connell : https://www.youtube.com/watch?v=OIpfWTThrK8\n3. 掘金小册：Vue.js 组件精讲\n4. ElementUI ：https://github.com/ElemeFE/element\n5. iView ：https://github.com/iview/iview","slug":"FE/build-a-vue-component","published":1,"updated":"2019-12-05T11:52:26.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3so5ka300194efyeoor1x7w","content":"<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><p>组件库能帮我们节省开发精力，无需所有东西都从头开始去做，通过一个个小组件拼接起来，就得到了我们想要的最终页面。在日常开发中如果没有特定的一些业务需求，使用组件库进行开发无疑是更便捷高效，而且质量也相对更高的方案。</p>\n<p>目前的开源组件库有很多，不管是react还是vue的体系里都有很多非常优秀的组件库，比如我经常使用的就有elementui和iview。当然也还有其他的一些组件库，他们的本质其实都是为了节省重复造基础组件这一轮子的过程。也有的公司可能会对自己公司的产品有特别的需求，不太愿意使用开源的组件库的样式，或者自己有一些公司内部的业务项目需要用到，但开源项目无法满足的组件需要沉淀下来的时候，自建一套组件库就成为了一个作为业务驱动所需要的项目。</p>\n<a id=\"more\"></a>\n\n<p>本文会从 ”准备“ 和 ”实践“ 两个阶段来阐述，一步步完成一个组件库的打造。大致内容如下：</p>\n<ol>\n<li><strong>准备</strong>：主要讲了搭建组件库之前我们需要先提及一下一些基础知识，为实践阶段做铺垫。</li>\n<li><strong>实践</strong>：有了一些基本概念，咱们就直接通过一个实践案例来动手搭建一套基础的组件库。从做的过程中去感受组件库的设计。</li>\n</ol>\n<p>希望通过本文的分享以及包含的一个简单的 <strong>实际操作案例</strong>，能让你从组件库使用者的角色向组件库创造者的角色迈进那么一小步，在日常使用组件库的时候心里有个底，那我的目的也就达到了。</p>\n<p>我们的案例地址是：<a href=\"https://arronkler.github.io/lime-ui/\" target=\"_blank\" rel=\"noopener\">https://arronkler.github.io/lime-ui/</a> </p>\n<p>对应的 repo也就是：<a href=\"https://github.com/arronKler/lime-ui\" target=\"_blank\" rel=\"noopener\">https://github.com/arronKler/lime-ui</a></p>\n<h1 id=\"准备-：打造组件库之前你应该知道些什么？\"><a href=\"#准备-：打造组件库之前你应该知道些什么？\" class=\"headerlink\" title=\"准备 ：打造组件库之前你应该知道些什么？\"></a>准备 ：打造组件库之前你应该知道些什么？</h1><p>这一个章节主要是想先解析清楚一些在组件库的建立中会用到的一些平时在业务概念中很少去关注的概念。我会分为工程和组件两个方面来阐述，把我所知道的一些其中的技巧和坑点都交付出来，以帮助我们在实际去做的过程中可以有所准备。</p>\n<h2 id=\"项目：做一个组件库项目有哪些额外需要考虑的事？\"><a href=\"#项目：做一个组件库项目有哪些额外需要考虑的事？\" class=\"headerlink\" title=\"项目：做一个组件库项目有哪些额外需要考虑的事？\"></a>项目：做一个组件库项目有哪些额外需要考虑的事？</h2><p>做组件库项目和常规业务项目肯定还是有一些事情是我们业务项目不怎么需要，但是类库项目一般都会考虑的事，这一小节就是介绍说明一下，那些我们在做组件库的过程中需要额外考虑的事。</p>\n<h3 id=\"组件测试\"><a href=\"#组件测试\" class=\"headerlink\" title=\"组件测试\"></a>组件测试</h3><p>很多开发者平时业务项目都比较赶，然后就是一般业务项目中都不怎么写测试脚本。但在做一个组件库项目的过程中，最好还是有对应的组件测试的脚本。至少有两点好处：</p>\n<ol>\n<li>自动化测试你写的组件的功能特性</li>\n<li>改动代码不用担心会影响之前的使用者。（测试脚本会告诉你有没有出现未预料到的影响）</li>\n</ol>\n<p>对于类库型项目，我觉得第二点好处还是很重要的，这才能保证你在不断推进项目升级迭代的过程中，确保不会出现影响已经在用你所创造的类库的那些人，毕竟你要是升级一次让他的项目出现大问题，那可真保不准别人饭碗都能丢。（就像之前的antd的圣诞节雪花事件一样）</p>\n<p>由于我们是要写vue的组件库，这里推荐的测试工具集是 <code>vue-test-utils</code> 这套工具，<a href=\"https://vue-test-utils.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://vue-test-utils.vuejs.org/zh/</a> 。其中提供的各种测试函数和方法都能很好的满足我们的测试需要。具体的安装使用可以参见它的文档。</p>\n<p>我们这里主要想提的是 <strong>组件测试到底要测什么？</strong></p>\n<p>我们这里给到一张很直观的图，看到这张图其实你应该也清楚了这个问题的答案</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzNDE2.png\" alt=\"IMG\"></p>\n<p>这张图来自视频 <a href=\"https://www.youtube.com/watch?v=OIpfWTThrK8\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=OIpfWTThrK8</a> ，也是vue-test-util推荐的一个非常棒的演讲，想要具体了解可以进去看一下。</p>\n<p>所以回过头来，组件测试，实际需要我们不仅仅作为创造者的角度对组件的功能特性进行测试。更要从使用者的角度来看，把组件当做一个“黑盒子”，我们能给到它的是用户的交互行为、props数据等，这个“黑盒子”也会对应的反馈出一定的事件和渲染的视图可以被使用者所捕获和观察。通过对这些位置的检查，我们就能获知一个组件的行为是否如我们所愿的去进行着，确保它的行为一定是一致不出幺蛾子的。</p>\n<p>另外还想提的一点偏的话题就是 <strong>契约精神</strong>。作为组件的使用者，我使用你的组件，等于咱们签订一个契约，这个组件的所有行为应该是和你描述的是一致的，不会出现第三种意料之外的可能。毕竟对于企业项目来说，我们不喜欢surprise。antd的彩蛋事件也是给各位都提个醒，咱们搞技术可以这么玩也挺有创意，但是这种公用类库，特别是企业使用的也比较多的，还是把创意收一收，讲究契约，不讲surprise。就算是自家企业内部使用的组件库，除非是业务上的人都是认可的，否则也不要做这种危险试探。</p>\n<p>好的组件测试也是能够帮助我们识别出那些我们有意或无意创造的surprise，有意的咱就不说了，就怕是那种无意中出现的surprise那就比较要命了，所以写好组件测试还是挺有必要的。</p>\n<h3 id=\"文档生成\"><a href=\"#文档生成\" class=\"headerlink\" title=\"文档生成\"></a>文档生成</h3><p>一般来说，我们做一个类库项目都会有对应的说明文档的，有的项目一个README.md 的文档就够了，有的可能需要在来几个 Markdown的文档。对于组件库这一类的项目来说，我们可以用文档工具来辅助直接生成文档。这里推荐 vuepress ，可以快速帮我们完成组件库文档的建设。(<a href=\"https://vuepress.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">https://vuepress.vuejs.org/zh/guide/</a>)</p>\n<p>vuepress是一个文档生成工具，默认的样式和vue官方文档几乎是一致的，因为创造它的初衷就是想为vue和相关的子项目提供文档支持。它内置了 Markdown的扩展，写文档的时候就是用 markdown来写，最让人省心的是<u>你可以直接在 Markdown 文件中使用Vue组件</u>，意味着我们的组件库中写的一个个组件，可以直接放到文档里去用，展示组件的实际运行效果。 我们的案例网站也就是通过vuepress来写的，生成静态网站后，用 <code>gh-pages</code> 直接部署到github上。</p>\n<p>vuepress更好的一点在于你可以自定义其webpack配置和主题，意味着你可以让你自己的文档站点在开发阶段有更多的功能特性的支持，同时可以把站点风格改成自己的一套主题风格。这就无需我们重头开始去做一套了，对于咱们想要快速完成组件库文档建设这一需求来说，还是挺有效的。</p>\n<p>不过这只是咱们要做的事情的一个辅助性的东西，所以具体的使用咱们在实践阶段再说明，这里就不赘述了。</p>\n<h3 id=\"自定义主题\"><a href=\"#自定义主题\" class=\"headerlink\" title=\"自定义主题\"></a>自定义主题</h3><p>自定义主题的功能对于一个开源类库来说肯定还是挺有好处的，这样使用者就可以自己使用组件库的功能而在界面设计上使用自己的设计风格。其实大部分组件库的功能设计都是挺好挺完善的，所以一般来说中小型公司即使想要实现自己的一套组件风格的东西，直接使用开源类库如 element、iview或者基于react的Antd 所提供的功能和交互逻辑，然后在其上进行主题定制基本就满足需求了（除非你家设计师很有想法。。。）。</p>\n<p>自定义主题的功能一般的使用方式是这样的</p>\n<ol>\n<li>通过主题生成工具。（制作者需要单独做一个工具）</li>\n<li>引入关键主题文件，覆盖主题变量。(这种方式一般都需要适配制作者所使用的css预处理器）</li>\n</ol>\n<p>对于第一种方式往往都是组件库的制作者通过把生成组件样式的那一套东西做成一个工具，然后提供给使用者去根据自己的需要来调整，最后生成一套特定的样式文件，引入使用。</p>\n<p>第二种方式，<strong>作为使用者来说，你主要做的其实是覆盖了组件库中的一些主题变量</strong>，因为具体的组件的样式文件不是写死的固定样式值，而是使用了定义好的变量，所以你的自定义主题就生效了。但是这也会引入一个小问题就是你必须适配组件库的创造者所使用的样式预处理器，比如你用iview，那你的项目就要能解析Less文件，你用ElementUI，你的项目就必须可以解析SCSS。</p>\n<p>其实对于第一种方式也主要是以调整主题变量为主。所以当咱们自己要做一套组件库的时候，不难看出，一个核心点就是需要<strong>把主题变量文件和样式文件拆开来</strong>，后面的就简单了。</p>\n<h3 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h3><p>类库项目的构建这里提两点：</p>\n<ol>\n<li><strong>暴露入口</strong></li>\n<li><strong>外部化依赖</strong></li>\n</ol>\n<p>先谈第一点 “暴露接口”。业务项目中，我们的整个项目通过webpack或其他打包工具打包成一个或多个bundle文件，这些文件被浏览器载入后就会直接运行。但是一个类库项目往往都不是单独运行的，而是通过暴露一个 “入口”，然我在业务项目中去调用它。 在webpack配置文件里，可以通过定义 <code>output</code> 中的 <code>library</code> 和 <code>libraryTarget</code> 来控制我们要暴露的一个 “入口变量” ，以及我们要构建的目标代码。</p>\n<p>这一点可以详细参考webpack官方文档: <a href=\"https://webpack.js.org/configuration/output/#outputlibrarytarget\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/configuration/output/#outputlibrarytarget</a></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// other config</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\toutput: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    library: <span class=\"hljs-string\">\"MyLibName\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    libraryTarget: <span class=\"hljs-string\">\"umd\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    umdNamedDefine: <span class=\"hljs-literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>再说一下 “外部化依赖”，我们做一个vue组件库项目的时候，我们的组件都是依赖于vue的，当我们组件库项目中的某个地方引入了vue，那么打包的时候vue的运行时也是会被一块儿打包进入最终的组件库bundle文件的。这样的问题在于，我们的vue组件库是被vue项目使用的，那么项目中已经有运行时了，我们就没必要在组件库中加入运行时，这样会多增加组件库bundle的体积。使用webpack的 <code>externals</code>可以将vue依赖 “外部化”。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"hljs-comment\">// other config</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\texternals: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    vue: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      root: <span class=\"hljs-string\">'Vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs: <span class=\"hljs-string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs2: <span class=\"hljs-string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      amd: <span class=\"hljs-string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"按需加载\"><a href=\"#按需加载\" class=\"headerlink\" title=\"按需加载\"></a>按需加载</h3><p>组件库的按需加载功能还是很实用的， 这样可以避免我们在使用组件库的过程中把所有的用到和没用到的内容都打包到业务代码中去，导致最后的bundle文件过大影响用户体验。</p>\n<p>在业务项目中我们的按需加载都是把需要按需加载的地方单独生成为一个chunk，然后浏览器运行我们的打包代码的时候发现我们需要这一块儿资源了，再发起请求获取到对应的所需代码。</p>\n<p>在组件库里边，我们就需要改变一下引入的方式，比如一开始我们引入一个组件库的时候是直接将组件库和样式全部引入的。如下面这样</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> LimeUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lime-ui'</span> <span class=\"hljs-comment\">// 引入组件库</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'lime-ui/styles/index.css'</span> <span class=\"hljs-comment\">// 引入整个组件库的样式文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(LimeUI)</span></pre></td></tr></table></figure>\n\n<p>那么，换成手动的按需加载的方式就是</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; Button &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lime-ui'</span> <span class=\"hljs-comment\">// 引入button组件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'lime-ui/styles/button.css'</span> <span class=\"hljs-comment\">// 引入button的样式</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"hljs-string\">'l-button'</span>, Button) <span class=\"hljs-comment\">// 注册组件</span></span></pre></td></tr></table></figure>\n\n<p>这种方式的确是按需引入的，但也一个不舒服的地方就是每次我们引入的时候都需要手动的引入组件和样式。一般来说一个项目里面用到的组件少说也有十多个，这就比较麻烦了。组件库是怎么解决这个问题的呢？</p>\n<p>通过babel插件的方式，将引入组件库和组件样式的模式自动化，比如antd、antd-mobile、material-ui都在使用的<code>babel-plugin-import</code>、还有ElementUI使用的 <code>babel-plugin-component</code>。在业务项目中配置好babel插件之后，它内部就可以给你做一个这样的转换（这里以 babel-plugin-component）</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 原始代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; Button &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'components'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 转换代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> button = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'components/lib/button'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'components/lib/button/style.css'</span>)</span></pre></td></tr></table></figure>\n\n<p>OK，那既然代码可以做这样的转换的话，其实我们所要做的一点就是在我们打造组件库的时候，把我们的组件库的打包代码放到对应的文件目录结构之下就可以了。使用者可以选择手动载入组件，也可以使用babel插件的方式优化这一步骤。</p>\n<p>babel-plugin-component 文档： <a href=\"https://www.npmjs.com/package/babel-plugin-component\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/babel-plugin-component</a></p>\n<p>babel-pluigin-import 文档: <a href=\"https://www.npmjs.com/package/babel-plugin-import\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/babel-plugin-import</a></p>\n<h2 id=\"组件：比起日常的组件设计，做组件库你还需要知道些什么？\"><a href=\"#组件：比起日常的组件设计，做组件库你还需要知道些什么？\" class=\"headerlink\" title=\"组件：比起日常的组件设计，做组件库你还需要知道些什么？\"></a>组件：比起日常的组件设计，做组件库你还需要知道些什么？</h2><p>做组件库中的组件的技巧和在项目中用到的还是有一些区别的，这一小节就是告诉大家，组件库中的组件设计，我们还应该知道哪些必要的知识内容。</p>\n<h3 id=\"组件通信：除了上下级之间进行数据通信，还有什么？\"><a href=\"#组件通信：除了上下级之间进行数据通信，还有什么？\" class=\"headerlink\" title=\"组件通信：除了上下级之间进行数据通信，还有什么？\"></a>组件通信：除了上下级之间进行数据通信，还有什么？</h3><p>我们常规用到的组件通信的方法就是通过 <code>props</code> 和 <code>$emit</code> 来进行父组件和子组件之间的数据传递，如下面的示意图中展示的那样：父组件通过 <code>props</code> 将数据给子组件、子组件通过 <code>$emit</code> 将数据传递给父组件，顶多通过<code>eventBus</code>或<code>Vuex</code>来达到任意组件之间数据的相互通信。这些方法在常规的业务开发过程中是比较有效的，但是在组件库的开发过程中就显得有点力不从心了，主要的问题在于： <u><strong>如何处理跨级组件之间的数据通信呢？</strong></u></p>\n<p><img src=\"https://blog-1257601889.cos.ap-shanghai.myqcloud.com/vue/attrs/vue.png?ynotemdtimestamp=1551245782807\" alt=\"IMG\"></p>\n<p>如果在日常项目中，我们当然可以使用像 <code>vuex</code> 这样的将组件数据直接 ”外包“ 出去的方式来实现数据的跨级访问，但是<code>vuex</code> 始终是一个外部依赖项，组件库的设计肯定是不能让这种强依赖存在的。下面我们就来说说两个在组件库项目中我们会用到的数据通信方式。</p>\n<h4 id=\"内置的provide-inject\"><a href=\"#内置的provide-inject\" class=\"headerlink\" title=\"内置的provide/inject\"></a>内置的provide/inject</h4><p><strong><u>provide/inject 是vue自带的可以跨级从子组件中获取父级组件数据的一套方案。</u></strong> 这一对东西类似于react里面的 <code>Context</code> ，都是为了处理跨级组件数据传递的问题。</p>\n<p>使用的时候，在子组件中的 inject 处声明需要注入的数据，然后在父级组件中的某个含有对应数据的地方，提供子级组件所需要的数据。不管他们之间跨越了多少个组件，子级组件都能获取到对应的数据。(参考下面的伪代码例子)</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 引用关系 CompA --&gt; CompB --&gt; CompC --&gt; ... --&gt; ChildComp</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// CompA.vue</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  provide: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    theme: <span class=\"hljs-string\">'dark'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// CompB.vue</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// CompC.vue</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// ... </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// ChildComp.vue</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  inject: [<span class=\"hljs-string\">'theme'</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tmounted() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.theme) <span class=\"hljs-comment\">// 打印结果: dark</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>不过provide/inject的方式主要是子组件从父级组件中跨级获取到它的状态，却不能完美的解决以下问题：</p>\n<ol>\n<li>子级组件跨级传递数据到父级组件</li>\n<li>父级组件跨级传递数据到子级组件</li>\n</ol>\n<h4 id=\"派发和广播-自制dispatch和broadcast功能\"><a href=\"#派发和广播-自制dispatch和broadcast功能\" class=\"headerlink\" title=\"派发和广播: 自制dispatch和broadcast功能\"></a>派发和广播: 自制dispatch和broadcast功能</h4><p><strong><u>dispatch和broadcast可以用来做父子级组件之间跨级通信</u></strong>。在vue1.x里面是有dispatch和broadcast功能的，不过在vue2.x中被取消掉了。这里可以参考一下下面链接给出的v1.x中的内容。</p>\n<blockquote>\n<p>dispatch文档（v1.x）：<a href=\"https://v1.vuejs.org/api/#vm-dispatch\" target=\"_blank\" rel=\"noopener\">https://v1.vuejs.org/api/#vm-dispatch</a></p>\n<p>broadcast文档（v1.x）：<a href=\"https://v1.vuejs.org/api/#vm-broadcast\" target=\"_blank\" rel=\"noopener\">https://v1.vuejs.org/api/#vm-broadcast</a></p>\n</blockquote>\n<p>根据文档，我们得知</p>\n<ul>\n<li><p>dispatch会派发一个事件，这个事件首先在自己这个组件实例上去触发，然后会沿着父级链一级一级的往上冒泡，直到触发了某个父级中声明的对这个事件的监听器后就停止，除非是这个监听器返回了true。当然监听器也是可以通过回调函数获取到事件派发的时候传递的所有参数的。这一点很像我们在DOM中的事件冒泡机制，应该不难理解。</p>\n</li>\n<li><p>而broadcast就是会将事件广播到自己的所有子组件实例上，一层一层的往下走，因为组件树的原因，往下走的过程会遇到 “分叉”，也就可以看成是一条条的多个路径。事件沿着每一个子路径向下冒泡，每个路径上触发了监听器就停止，如果监听器返回的是true那就继续向下再传播。</p>\n</li>\n</ul>\n<p>简单总结一下。<u><strong>dispatch派发事件往上冒泡，broadcast广播事件往下散播，遇到处理对应事件的监听器就处理，监听器没有返回true就停止</strong></u></p>\n<p>需要注意的是，这里的派发和广播事件都是 <strong>跨层级的</strong> , 而且可以携带参数，那也就意味着可以<strong>跨层级进行数据通信</strong>。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzkx.png\" alt=\"IMG\"></p>\n<p>由于dispatch和broadcast在vue2.x中取消了，所以我们这里可以自己写一个，然后通过mixin的方式混入到需要使用到跨级组件通信的组件中。</p>\n<p>方法内容其实很简单，这里就直接列代码</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 参考自iview的实现</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">broadcast</span>(<span class=\"hljs-params\">componentName, eventName, params</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">this</span>.$children.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">child</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> name = child.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (name === componentName) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      child.$emit.apply(child, [eventName].concat(params));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      broadcast.apply(child, [componentName, eventName].concat([params]));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  methods: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    dispatch(componentName, eventName, params) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">let</span> parent = <span class=\"hljs-keyword\">this</span>.$parent || <span class=\"hljs-keyword\">this</span>.$root;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">let</span> name = parent.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parent = parent.$parent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (parent) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">          name = parent.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (parent) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parent.$emit.apply(parent, [eventName].concat(params));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    broadcast(componentName, eventName, params) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      broadcast.call(<span class=\"hljs-keyword\">this</span>, componentName, eventName, params);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<p>其实这里的实现和vue1.x中的实现还是有一定的区别的：</p>\n<ol>\n<li><strong>dispatch没有事件冒泡。找到哪个就直接执行</strong></li>\n<li><strong>设定了一个name参数，只针对特定name的组件触发事件</strong></li>\n</ol>\n<p>其实看懂了这里的代码，你就应该可以举一反三想出 <strong>找寻任何一个组件的方法了，不管是向上还是向下找，无非就是循环遍历和迭代处理，直到目标组件出现，然后调用它。</strong> 派发和广播无非就是找到之后利用vue自带的事件机制来发布事件，然后在具体组件中监听该事件并处理。</p>\n<h3 id=\"渲染函数：它可以释放javascript的能力\"><a href=\"#渲染函数：它可以释放javascript的能力\" class=\"headerlink\" title=\"渲染函数：它可以释放javascript的能力\"></a>渲染函数：它可以释放javascript的能力</h3><p>首先我们回顾一下一个组件是如何从写代码到被转换成界面的。我们写vue单文件组件的时候一般会有template、script和style三部分，在打包的时候，vue-loader会将其中的template模板部分先编译成Vue实例中render选项所需要的构建视图的代码。在具体运行的时候，vue运行时会使用<code>$mount</code> 进行渲染，渲染好之后将其挂载到你提供的DOM节点下。</p>\n<p>整个过程里面我们只日常关注最多的当然就是template的部分，但是template其实只是vue提供的一个语法糖，只是让我们写代码写起来跟写html一样轻松，降低刚入手vue的小伙伴的学习成本。React就没有提供template的语法糖，而是使用的JSX来降低写组件的复杂度。(vue能在react和angular两大框架的压力下异军突起，简洁易懂的模板语法是有一定促进作用的，毕竟看起来更简单)</p>\n<p>通过上面我们回顾的内容，其实我们也发现了，<strong>我们写的template，最终都是javascript</strong>。这里template被编译之后，给到了 render这个渲染函数，在执行渲染的时候vue就会执行render中的操作来渲染我们的组件。</p>\n<p>所以template是好，但 <strong>如果你想要使用全部的javascript的能力，那就可以使用渲染函数</strong>。</p>\n<blockquote>\n<p>渲染函数&amp;JSX (官方文档)：<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/render-function.html</a> </p>\n</blockquote>\n<p>日常写业务组件，我们用template就挺OK的，不过当遇到一些复杂情况，用 <code>写组件 --&gt; 引入使用 --&gt; 注册组件 --&gt; 使用组件</code> 的方式就不好处理了，比如下面两种情况：</p>\n<ol>\n<li>通过代码动态渲染组件</li>\n<li>将组件渲染到其他位置</li>\n</ol>\n<p>第一种情况是通过代码动态渲染组件，比如运营常常使用的活动h5页面，每个活动都不一样，每次要么都重新做一份，要么在原有的基础上修改。但是这种修改的页面结构调整是很大的，每次都会是破坏性的，和重做其实没区别。这样的话，每次活动无论内容如何，前端都要上手去写代码。但其实只需要在管理后台做一个活动编辑器，编辑器的内容直接转化为render函数的代码，然后通过配置下发到某个页面上，承载页拿到数据给到render函数执行渲染。这样就可以动态的根据管理后台配置的方式来渲染组件内容，每次的活动页，运营也可以通过编辑器自行生成。</p>\n<p>第二种情况是要将组件渲染到不同位置。我们日常写业务组件基本就是写一个组件，在需要的拿来使用。如果你只是在template中把组件写进去，那你的组件的内容就都会作为当前组件的子组件进行渲染，所生成的DOM结构也是在当前的DOM结构之下的。知道render之后，其实我们可以新建vue实例，动态渲染之后，手动挂载到任意的DOM位置上去。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> CompA <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./CompA.vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> Instance = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render(h) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> h(CompA)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> component = Instance.$mount() <span class=\"hljs-comment\">// 执行渲染</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">document</span>.body.appendChild(component.$el) <span class=\"hljs-comment\">// 挂载到body元素下</span></span></pre></td></tr></table></figure>\n\n<p>我们使用的element里面的 <code>this.$message</code> 就用到了动态渲染，然后手动挂载到指定位置。</p>\n<h1 id=\"实践：做一遍你就会了\"><a href=\"#实践：做一遍你就会了\" class=\"headerlink\" title=\"实践：做一遍你就会了\"></a>实践：做一遍你就会了</h1><p>这里先贴上我们的github地址，各位可以在做的过程中对照着看。<a href=\"https://github.com/arronKler/lime-ui\" target=\"_blank\" rel=\"noopener\">https://github.com/arronKler/lime-ui</a></p>\n<h2 id=\"建立一个工程化的项目\"><a href=\"#建立一个工程化的项目\" class=\"headerlink\" title=\"建立一个工程化的项目\"></a>建立一个工程化的项目</h2><h3 id=\"第一步，建立工程化结构\"><a href=\"#第一步，建立工程化结构\" class=\"headerlink\" title=\"第一步，建立工程化结构\"></a>第一步，建立工程化结构</h3><p>这里就不废话了，直接贴目录结构和解释</p>\n<figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- assets/   <span class=\"hljs-comment\"># 存放一些额外的资源文件，图片之类的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- build/  <span class=\"hljs-comment\"># webpack打包配置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- docs/  <span class=\"hljs-comment\"># 存放文档</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- .vuepress  <span class=\"hljs-comment\"># vuepress配置目录</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- component <span class=\"hljs-comment\"># 组件相关的文档放这里</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- README.md <span class=\"hljs-comment\"># 静态首页</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- lib/  <span class=\"hljs-comment\"># 打包生成的文件放这里</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- styles/ <span class=\"hljs-comment\"># 打包后的样式文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- src/ <span class=\"hljs-comment\"># 在这里写代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- mixins/ <span class=\"hljs-comment\"># mixin文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- packages/ <span class=\"hljs-comment\"># 各个组件，每个组件是一个子目录</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- styles/ <span class=\"hljs-comment\"># 样式文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t|- common/ <span class=\"hljs-comment\"># 公用的样式内容</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t|- mixins/ <span class=\"hljs-comment\"># 复用的mixin</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- utils  <span class=\"hljs-comment\"># 工具目录</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- index.js  <span class=\"hljs-comment\"># 打包入口，组件的导出</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- <span class=\"hljs-built_in\">test</span>/  <span class=\"hljs-comment\"># 测试文件夹</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- specs/  <span class=\"hljs-comment\"># 存放所有的测试用例</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- .npmignore</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- .gitignore</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- .babelrc</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- README.md</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- package.json</span></pre></td></tr></table></figure>\n\n<p>这里比较重要的目录就是我们的src目录，下面存放了我们的各个单一的组件和一套样式库，另外还有一些辅助的东西。我们写文档就是在 docs目录下去写。项目目录最外层都是些常规的配置内容，比如 <code>.npmignore</code> 和 <code>.gitignore</code> 这样的文件我们都是很常见的，所以我就不具体细说这一部分了，要是有一定疑惑可以直接参见github上的源码对照着看。</p>\n<p>这里我们把需要使用到的类库文件也先建立好</p>\n<p>在 src/mixins 下创建一个 emitter.js，写入如下内容，也就是我们的dispatch和broadcast的方法，之后的组件设计中会用到</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">broadcast</span>(<span class=\"hljs-params\">componentName, eventName, params</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">this</span>.$children.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">child</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> name = child.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (name === componentName) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      child.$emit.apply(child, [eventName].concat(params));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      broadcast.apply(child, [componentName, eventName].concat([params]));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  methods: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    dispatch(componentName, eventName, params) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">let</span> parent = <span class=\"hljs-keyword\">this</span>.$parent || <span class=\"hljs-keyword\">this</span>.$root;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">let</span> name = parent.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parent = parent.$parent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (parent) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">          name = parent.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (parent) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parent.$emit.apply(parent, [eventName].concat(params));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    broadcast(componentName, eventName, params) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      broadcast.call(<span class=\"hljs-keyword\">this</span>, componentName, eventName, params);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<p>然后在 src/utils 下新建一个 assist.js 文件，写下辅助性的函数</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">oneOf</span>(<span class=\"hljs-params\">value, validList</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; validList.length; i++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (value === validList[i]) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这两个地方都是之后会使用到的，如果你需要其他的辅助内容，也可以在这两个文件所在的目录下去建立。</p>\n<h3 id=\"第二步，-完善打包流程\"><a href=\"#第二步，-完善打包流程\" class=\"headerlink\" title=\"第二步， 完善打包流程\"></a>第二步， 完善打包流程</h3><p>目录建好了，那就该填充血肉了，要打包一个组件库项目，肯定是要先配置好我们的webpack，不然写了源码也没法跑起来。所以我们先定位到 build目录下，在build目录下先建立三个文件</p>\n<ul>\n<li><p>webpack.base.js 。存放基本的一些rules配置</p>\n</li>\n<li><p>webpack.prod.js 。整个组件库的打包配置</p>\n</li>\n<li><p>gen-style.js 。单独对样式进行打包</p>\n</li>\n</ul>\n<p>以下是具体的配置内容</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* webpack.base.js */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> pkg = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../package.json'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> VueLoaderPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'vue-loader/lib/plugin'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">dir</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> path.join(__dirname, <span class=\"hljs-string\">'..'</span>, dir);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">module</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rules: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.vue$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loader: <span class=\"hljs-string\">'vue-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">          loaders: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">            css: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-string\">'vue-style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">                loader: <span class=\"hljs-string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">                options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">            ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">            less: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-string\">'vue-style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">                loader: <span class=\"hljs-string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">                options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">                loader: <span class=\"hljs-string\">'less-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">                options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">            ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">          postLoaders: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">            html: <span class=\"hljs-string\">'babel-loader?sourceMap'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">          sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.js$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loader: <span class=\"hljs-string\">'babel-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">          sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">        exclude: <span class=\"hljs-regexp\">/node_modules/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.css$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loaders: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"hljs-string\">'style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"hljs-string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.less$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loaders: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"hljs-string\">'style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"hljs-string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">91</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"hljs-string\">'less-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">92</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">93</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">94</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">95</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">96</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">97</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">98</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">99</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.scss$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">100</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loaders: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">101</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">102</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"hljs-string\">'style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">103</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">104</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">105</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">106</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">107</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">108</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"hljs-string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">109</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">110</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">111</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">112</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">113</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">114</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"hljs-string\">'sass-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">115</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">116</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">117</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">118</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">119</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">120</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">121</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">122</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">123</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loader: <span class=\"hljs-string\">'url-loader?limit=8192'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">124</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">125</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">126</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">127</span></pre></td><td class=\"code\"><pre><span class=\"line\">  resolve: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">128</span></pre></td><td class=\"code\"><pre><span class=\"line\">    extensions: [<span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.vue'</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">129</span></pre></td><td class=\"code\"><pre><span class=\"line\">    alias: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">130</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">'vue'</span>: <span class=\"hljs-string\">'vue/dist/vue.esm.js'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">131</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">'@'</span>: resolve(<span class=\"hljs-string\">'src'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">132</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">133</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">134</span></pre></td><td class=\"code\"><pre><span class=\"line\">  plugins: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">135</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">136</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">new</span> webpack.DefinePlugin(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">137</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">'process.env.VERSION'</span>: <span class=\"hljs-string\">`'<span class=\"hljs-subst\">$&#123;pkg.version&#125;</span>'`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">138</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">139</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">new</span> VueLoaderPlugin()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">140</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">141</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/*  webpack.prod.js */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack-merge'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> webpackBaseConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./webpack.base.js'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">process.env.NODE_ENV = <span class=\"hljs-string\">'production'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = merge(webpackBaseConfig, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  devtool: <span class=\"hljs-string\">'source-map'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  mode: <span class=\"hljs-string\">\"production\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  entry: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    main: path.resolve(__dirname, <span class=\"hljs-string\">'../src/index.js'</span>)  <span class=\"hljs-comment\">// 将src下的index.js 作为入口点</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  output: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    path: path.resolve(__dirname, <span class=\"hljs-string\">'../lib'</span>),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    publicPath: <span class=\"hljs-string\">'/lib/'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    filename: <span class=\"hljs-string\">'lime-ui.min.js'</span>,  <span class=\"hljs-comment\">// 改成自己的类库名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    library: <span class=\"hljs-string\">'lime-ui'</span>, <span class=\"hljs-comment\">// 类库导出</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    libraryTarget: <span class=\"hljs-string\">'umd'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    umdNamedDefine: <span class=\"hljs-literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  externals: &#123; <span class=\"hljs-comment\">// 外部化对vue的依赖</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    vue: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      root: <span class=\"hljs-string\">'Vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs: <span class=\"hljs-string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs2: <span class=\"hljs-string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      amd: <span class=\"hljs-string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  plugins: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">new</span> webpack.DefinePlugin(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">'process.env.NODE_ENV'</span>: <span class=\"hljs-string\">'\"production\"'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* gen-style.js */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> cleanCSS = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp-clean-css'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> sass = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp-sass'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> rename = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp-rename'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> autoprefixer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp-autoprefixer'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> components = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./components.json'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildCss</span>(<span class=\"hljs-params\">cb</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  gulp.src(<span class=\"hljs-string\">'../src/styles/index.scss'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(sass())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(autoprefixer())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(cleanCSS())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(rename(<span class=\"hljs-string\">'lime-ui.css'</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(gulp.dest(<span class=\"hljs-string\">'../lib/styles'</span>));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  cb()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">exports.default = gulp.series(buildCss)</span></pre></td></tr></table></figure>\n\n<p>OK，这里我们的webpack配置基本设置好了，webpack.base.js 中的配置就主要是一些loader和插件的配置，具体的出入口都是在 webpack.prod.js 中配置的。这里webpack.prod.js 合并了 webpack.base.js 中的配置项。关于 output.libary 和 externals ，阅读了之前 “准备” 阶段的内容的应该不会陌生了。</p>\n<p>另外还有 gen-style.js 这个文件是单独使用了 gulp 来对样式文件进行打包操作的，我们这里选用的是 scss的语法，如果你想用less或其他的预处理器，也可以自行修改这里的文件和相关依赖。</p>\n<p>不过这个配置肯定还没有结束，首先我们需要安装好这里的配置里使用到的各种loader和plugin。为了不漏掉安装项和保持一致性，可以直接复制下面的配置内容放到 package.json 下，通过 <code>npm install</code> 来进行安装。需要注意的是，这里的安装完成之后，其实后面的一些内容的依赖也都一并安装好了。</p>\n<figure class=\"highlight hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"async-validator\": \"^3.0.4\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"core-js\": \"2.6.9\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"webpack\": \"^4.39.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"webpack-cli\": \"^3.3.7\"</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\"devDependencies\": &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"@babel/core\": \"^7.5.5\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"@babel/plugin-transform-runtime\": \"^7.5.5\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"@babel/preset-env\": \"^7.5.5\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"@vue/test-utils\": \"^1.0.0-beta.29\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"babel-loader\": \"^8.0.6\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"chai\": \"^4.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"cross-env\": \"^5.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"css-loader\": \"2.1.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"file-loader\": \"^4.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gh-pages\": \"^2.1.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp\": \"^4.0.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp-autoprefixer\": \"^7.0.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp-clean-css\": \"^4.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp-rename\": \"^1.4.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp-sass\": \"^4.0.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma\": \"^4.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-chai\": \"^0.1.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-chrome-launcher\": \"^3.1.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-coverage\": \"^2.0.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-mocha\": \"^1.3.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-sinon-chai\": \"^2.0.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-sourcemap-loader\": \"^0.3.7\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-spec-reporter\": \"^0.0.32\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-webpack\": \"^4.0.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"less\": \"^3.10.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"less-loader\": \"^5.0.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"mocha\": \"^6.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"node-sass\": \"^4.12.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"rimraf\": \"^3.0.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"sass-loader\": \"^7.3.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"sinon\": \"^7.4.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"sinon-chai\": \"^3.3.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"style-loader\": \"^1.0.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"url-loader\": \"^2.1.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"vue-loader\": \"^15.7.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"vue-style-loader\": \"^4.1.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"vuepress\": \"^1.0.3\"</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;,</span></pre></td></tr></table></figure>\n\n<p>另外，由于我们使用了babel，所以需要在项目的根目录下设置一下 <code>.babelrc</code> 文件，内容如下：</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"presets\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">\"@babel/preset-env\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"loose\"</span>: <span class=\"hljs-literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"modules\"</span>: <span class=\"hljs-string\">\"commonjs\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"spec\"</span>: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"useBuiltIns\"</span>: <span class=\"hljs-string\">\"usage\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"corejs\"</span>: <span class=\"hljs-string\">\"2.6.9\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"plugins\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-string\">\"@babel/plugin-transform-runtime\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>当然也不要忘记在package.json文件中写上scripts简化手动输入命令的过程</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"hljs-attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"build:style\"</span>: <span class=\"hljs-string\">\"gulp --gulpfile build/gen-style.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"build:prod\"</span>: <span class=\"hljs-string\">\"webpack --config build/webpack.prod.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"第三步，建立文档化工具\"><a href=\"#第三步，建立文档化工具\" class=\"headerlink\" title=\"第三步，建立文档化工具\"></a>第三步，建立文档化工具</h3><p>如果在上一步中未安装了 vuepress ，可以通过 <code>npm install vuepress --save-dev</code> 来安装，</p>\n<p>然后在 package.json 中加入脚本，快速启动</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"docs:dev\"</span>: <span class=\"hljs-string\">\"vuepress dev docs\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"docs:build\"</span>: <span class=\"hljs-string\">\"vuepress build docs\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这个时候你可以在你的 docs/README.md 文件里写点内容，然后运行 <code>npm run docs:dev</code> 就可以看到本地的文档内容了。需要打包的时候使用 <code>npm run docs:build</code> 就可以了。</p>\n<p>如果我们的项目是要放到github上的，那么其实也可以一并将我们的文档生成之后也放到github上去，利用github的pages功能让这个本地的文档在线运行。（github pages托管我们的静态页面和资源）</p>\n<p>可以运行 <code>npm install gh-pages --save-dev</code> 安装 <code>gh-pages</code> 这个可以帮我们一键部署github pages文档的工具。它的工作原理就是将对应的某个文件夹下的资源迁移到我们的当前项目的gh-pages分支上，然后这个分支在push给了github之后，github就会将该分支内的内容服务起来。为了更好的使用它，我们可以在package.json中添加scripts</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \t<span class=\"hljs-attr\">\"deploy\"</span>: <span class=\"hljs-string\">\"gh-pages -d docs/.vuepress/dist\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"deploy:build\"</span>: <span class=\"hljs-string\">\"npm run docs:build &amp;&amp; npm run deploy\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这样你就可以使用 <code>npm run deploy</code> 直接部署你的vuepress生成的静态站点，不过务必在部署之前运行一下文档的构建程序。因此我们也添加了一条 <code>npm run deploy:build</code> 命令，使用这条命令就可以直接把文档的构建和部署直接一起解决。是不是很简单呢？</p>\n<p>不过为了我们能够直接使用自己写的组件，还需要对vuepress做一点点配置。在 docs/.vuepress目录下新建一个 enhanceApp.js 文件，写入如下内容，将我们的组件库的入口和样式注入进去</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> LimeUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../src/index.js'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"../../src/styles/index.scss\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Vue,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  options,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  router</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;) =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Vue.use(LimeUI)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这个时候我们之后写的组件就可以直接在文档中使用了。</p>\n<h3 id=\"第四步，样式构建\"><a href=\"#第四步，样式构建\" class=\"headerlink\" title=\"第四步，样式构建\"></a>第四步，样式构建</h3><p>先需要说明的是这里我们所使用的样式预处理器的语法是scss。那么在“完善打包流程”这一小节中已经将用gulp进行打包的代码给出了，不过有必要说明一下，我们又是如何去整合样式内容的。</p>\n<p>首先，为了之后便于做按需加载，对于每个组件的样式都是一个单独的scss文件，写样式的时候，为了避免太多的层级嵌套，使用了BEM风格的方式去书写。</p>\n<p>我们需要先在 src/styles目录执行如下命令生成一个基本的样式文件</p>\n<figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">cd</span> src/styles</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir common</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir mixins</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch common/var.scss  <span class=\"hljs-comment\"># 样式变量文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch common/mixins.scss</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch index.scss  <span class=\"hljs-comment\"># 引入所有样式</span></span></pre></td></tr></table></figure>\n\n<p>然后将对应的 var.scss 和 mixins.scss 文件填充上一些基础内容</p>\n<figure class=\"highlight scss hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* common/var.scss */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$--color-primary</span>: <span class=\"hljs-number\">#ff6b00</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$--color-white</span>: <span class=\"hljs-number\">#FFFFFF</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$--color-info</span>: <span class=\"hljs-number\">#409EFF</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$--color-success</span>: <span class=\"hljs-number\">#67C23A</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$--color-warning</span>: <span class=\"hljs-number\">#E6A23C</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$--color-danger</span>: <span class=\"hljs-number\">#F56C6C</span> !default;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* mixins/mixins.scss */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$namespace</span>: <span class=\"hljs-string\">'lime'</span>;  <span class=\"hljs-comment\">/* 组件库的样式前缀 */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* BEM</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"> -------------------------- */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">mixin</span> b(<span class=\"hljs-variable\">$block</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-variable\">$B</span>: <span class=\"hljs-variable\">$namespace</span>+<span class=\"hljs-string\">'-'</span>+<span class=\"hljs-variable\">$block</span> !global;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .#&#123;<span class=\"hljs-variable\">$B</span>&#125; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @<span class=\"hljs-keyword\">content</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>在mixins文件中我们声明了一个mixin，用于帮助我们更好的去构建样式文件。</p>\n<h2 id=\"组件打造案例\"><a href=\"#组件打造案例\" class=\"headerlink\" title=\"组件打造案例\"></a>组件打造案例</h2><p>上面的内容设置好了， 咱们就可以开始具体去做一个组件试试了</p>\n<h3 id=\"简单的button组件\"><a href=\"#简单的button组件\" class=\"headerlink\" title=\"简单的button组件\"></a>简单的button组件</h3><p>这是做好之后的大致效果</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzc0.png\" alt=\"2.png\"></p>\n<p>OK，那我们建立基本的button组件相关的文件</p>\n<figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">cd</span> src/packages</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir button &amp;&amp; <span class=\"hljs-built_in\">cd</span> button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch index.js</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch button.vue</span></pre></td></tr></table></figure>\n\n<p>写入button.vue的内容</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"lime-button\"</span> :<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"&#123;[`lime-button-$&#123;type&#125;`]: true&#125;\"</span> type=<span class=\"hljs-string\">\"button\"</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;slot&gt;<span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;<span class=\"hljs-regexp\">/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&lt;/</span>template&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; oneOf &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../utils/assist'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  name: <span class=\"hljs-string\">'Button'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  props: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    type: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      validator (value) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-keyword\">return</span> oneOf(value, [<span class=\"hljs-string\">'default'</span>, <span class=\"hljs-string\">'primary'</span>, <span class=\"hljs-string\">'info'</span>, <span class=\"hljs-string\">'success'</span>, <span class=\"hljs-string\">'warning'</span>, <span class=\"hljs-string\">'error'</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      type: <span class=\"hljs-built_in\">String</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-string\">'default'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"hljs-regexp\">/script&gt;</span></span></pre></td></tr></table></figure>\n\n<p>这里我们需要在 index.js 中导出这个组件</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Button <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./button.vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Button</span></pre></td></tr></table></figure>\n\n<p>这样单个的一个组件就完成了，之后你可以再多做几个组件试试，不过有一点就是这些组件需要一个统一的打包入口，我们再webpack中已经配置过了，那就是 src/index.js 这个文件，我们需要在这个文件里面将我们刚才写的button组件以及你自己写的其他组件都引入进来，然后统一导出给webpack打包使用，具体代码见下</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Button <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./packages/button'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> components = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  lButton: Button,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> install = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Vue, options = &#123;&#125;</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">Object</span>.keys(components).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Vue.component(key, components[key]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> install</span></pre></td></tr></table></figure>\n\n<p>可以看到的是index.js中我们最终导出的是一个叫install的函数，这个函数其实就是Vue插件的一种写法，便于我们在实际项目中引入的时候可以使用 <code>Vue.use</code> 的方式来自动安装我们的整个组件库。install接受两个参数，一个是Vue，我们把它用来注册一个个的组件。还有一个是options，便于我们可以在注册组件的时候传入一些初始化参数，比如默认的按钮大小、主题等信息，都可以通过参数的方式来设定。</p>\n<p>然后我们可以在 src/styles目录下新建一个button.scss 文件，写入我们button对应的样式</p>\n<figure class=\"highlight scss hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* button.scss */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">charset</span> <span class=\"hljs-string\">\"UTF-8\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"common/var\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"mixins/mixins\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">include</span> b(button) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">60px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">36px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">1px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">outline</span>: none;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid transparent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;:focus &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">outline</span>: none;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;-default &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#555</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:focus,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:hover &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attribute\">background-color</span>: rgba(<span class=\"hljs-variable\">$--color-primary</span>, <span class=\"hljs-number\">0.3</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;-primary &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-variable\">$--color-primary</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:focus,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:hover &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attribute\">background-color</span>: mix(<span class=\"hljs-variable\">$--color-primary</span>, <span class=\"hljs-number\">#ccc</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;-info &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-variable\">$--color-info</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:focus,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:hover &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attribute\">background-color</span>: mix(<span class=\"hljs-variable\">$--color-info</span>, <span class=\"hljs-number\">#ccc</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">   &amp;-success &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-variable\">$--color-success</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:focus,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:hover &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attribute\">background-color</span>: mix(<span class=\"hljs-variable\">$--color-success</span>, <span class=\"hljs-number\">#ccc</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>最后我们还需要在 src/styles/index.scss 文件中将button的样式引入进去</p>\n<figure class=\"highlight scss hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"button\"</span>;</span></pre></td></tr></table></figure>\n\n<p>为了简单的实验，你可以直接在 docs/README.md 文件下写两个button组件试试看</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;l-button type=<span class=\"hljs-string\">\"primary\"</span>&gt;Click me&lt;<span class=\"hljs-regexp\">/l-button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&lt;/</span>template&gt;</span></pre></td></tr></table></figure>\n\n<p>如果你想要得到和我在 <a href=\"https://arronkler.github.io/lime-ui/\" target=\"_blank\" rel=\"noopener\">https://arronkler.github.io/lime-ui/</a> 上一样的效果，可以参考 <a href=\"https://github.com/arronKler/lime-ui\" target=\"_blank\" rel=\"noopener\">https://github.com/arronKler/lime-ui</a> 项目中的 docs 目录下的配置。如果想要更个性化的配置，可以查阅vuepress的官方文档。</p>\n<h3 id=\"Notice提示组件\"><a href=\"#Notice提示组件\" class=\"headerlink\" title=\"Notice提示组件\"></a>Notice提示组件</h3><p>这个组件就要用到我们的动态渲染的相关的东西了。具体最后的使用方式是这样的</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">this</span>.$notice(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  title: <span class=\"hljs-string\">'提示'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  content: <span class=\"hljs-keyword\">this</span>.content || <span class=\"hljs-string\">'内容'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  duration: <span class=\"hljs-number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>效果类似于这样</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzAx.png\" alt=\"4.png\"></p>\n<p>OK，我们先来写一下这个组件的一个基本源码</p>\n<p>在 src/packages 目录下新建notice文件夹，然后新建一个 notice.vue 文件</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"lime-notice\"</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"lime-notice__main\"</span> v-<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"item in notices\"</span> :key=<span class=\"hljs-string\">\"item.id\"</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"lime-notice__title\"</span>&gt;&#123;&#123;item.title&#125;&#125;&lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;div class=\"lime-notice__content\"&gt;&#123;&#123;item.content&#125;&#125;&lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"hljs-regexp\">/template&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&lt;script&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">export default &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  data() &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    return &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      notices: []</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  &#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  methods: &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    add(notice) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      let id = +new Date()</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      notice.id = id</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      this.notices.push(notice)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      const duration = notice.duration</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      setTimeout(() =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">        this.remove(id)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &#125;, duration * 1000)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    remove(id) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      for(let i = 0; i &lt; this.notices.length; i++) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">        if (this.notices[i].id === id) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">          this.notices.splice(i, 1)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">          break;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">        &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>\n\n<p>代码很简单，其实就是声明了一个容器，然后在其中通过控制 notices 的数据来展示和隐藏，接着我们在同一个目录下新建一个notice.js 文件来做动态渲染</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Notice <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./notice.vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Notice.newInstance = <span class=\"hljs-function\">(<span class=\"hljs-params\">properties</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> props = properties || &#123;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> Instance = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    render(h) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> h(Notice, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        props</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> component = Instance.$mount()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">document</span>.body.appendChild(component.$el)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> notice = component.$children[<span class=\"hljs-number\">0</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    add(_notice) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      notice.add(_notice)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;, </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    remove(id) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> noticeInstance</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (_notice) =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  noticeInstance = noticeInstance || Notice.newInstance()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  noticeInstance.add(_notice)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这里我们我们通过动态渲染的方式让我们的组件可以直接挂在到body下面，而非归属于根挂载点之下。</p>\n<p>然后在 src/styles 目录下新建 notice.scss 文件，写上我们的样式文件</p>\n<figure class=\"highlight scss hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* notice.scss */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">charset</span> <span class=\"hljs-string\">\"UTF-8\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"common/var\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"mixins/mixins\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">include</span> b(notice) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">position</span>: fixed;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">20px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">60px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">1000</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;__main &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">100px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">#aaa</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">10px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;__title &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;__content &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#777</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>最后同样的，也需要在 src/index.js 这个入口文件中对 notice做处理。完整代码是这样的。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Button <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./packages/button'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Notice <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./packages/notice/notice.js'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> components = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  lButton: Button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> install = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Vue, options = &#123;&#125;</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">Object</span>.keys(components).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Vue.component(key, components[key]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Vue.prototype.$notice = Notice;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> install</span></pre></td></tr></table></figure>\n\n<p>我们可以看到我们再Vue的原型上挂上了我们的 <code>$notice</code> 方法，这个方法调用的时候就会触发我们在 notice.js 文件中动态渲染组件的一套流程。这个时候我们就可以在 docs/README.md 文档中测试着用了。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  mounted() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.$notice(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        title: <span class=\"hljs-string\">'提示'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        content: <span class=\"hljs-keyword\">this</span>.content,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        duration: <span class=\"hljs-number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h2 id=\"单独打包样式和组件\"><a href=\"#单独打包样式和组件\" class=\"headerlink\" title=\"单独打包样式和组件\"></a>单独打包样式和组件</h2><p>为了能支持按需加载的功能，我们除了将整个组件库打包之外，还需要对样式和组件单独打包成单个的文件。这里我们需要做两件事儿</p>\n<ol>\n<li>打包单独的css文件</li>\n<li>打包单独的组件内容</li>\n</ol>\n<p>对于第一点，我们需要对 build/gen-style.js 文件做一下改造，加上buildSeperateCss任务，完整代码如下</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 其他之前的代码...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildSeperateCss</span>(<span class=\"hljs-params\">cb</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">Object</span>.keys(components).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">compName</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    gulp.src(<span class=\"hljs-string\">`../src/styles/<span class=\"hljs-subst\">$&#123;compName&#125;</span>.scss`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(sass())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(autoprefixer())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(cleanCSS())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(rename(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;compName&#125;</span>.css`</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(gulp.dest(<span class=\"hljs-string\">'../lib/styles'</span>));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  cb()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">exports.default = gulp.series(buildCss, buildSeperateCss) <span class=\"hljs-comment\">// 加上 buildSeperateCss</span></span></pre></td></tr></table></figure>\n\n<p>对于第二点，我们可以用一个新的webpack配置来处理，新建一个 build/webpack.component.js 文件，写入</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack-merge'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> webpackBaseConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./webpack.base.js'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> components = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./components.json'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">process.env.NODE_ENV = <span class=\"hljs-string\">'production'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> basePath = path.resolve(__dirname, <span class=\"hljs-string\">'../'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> entries = &#123;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">Object</span>.keys(components).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  entries[key] = path.join(basePath, <span class=\"hljs-string\">'src'</span>, components[key])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = merge(webpackBaseConfig, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  devtool: <span class=\"hljs-string\">'source-map'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  mode: <span class=\"hljs-string\">\"production\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  entry: entries,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  output: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    path: path.resolve(__dirname, <span class=\"hljs-string\">'../lib'</span>),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    publicPath: <span class=\"hljs-string\">'/lib/'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    filename: <span class=\"hljs-string\">'[name].js'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    chunkFilename: <span class=\"hljs-string\">'[id].js'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// library: 'lime-ui',</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    libraryTarget: <span class=\"hljs-string\">'umd'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    umdNamedDefine: <span class=\"hljs-literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  externals: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    vue: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      root: <span class=\"hljs-string\">'Vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs: <span class=\"hljs-string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs2: <span class=\"hljs-string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      amd: <span class=\"hljs-string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  plugins: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">new</span> webpack.DefinePlugin(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">'process.env.NODE_ENV'</span>: <span class=\"hljs-string\">'\"production\"'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>这里我们引用了build文件夹下的一个叫做 component.json 的文件，该文件是我自定义用来标识我们的组件和组件路径的，实际上你也可以通过脚本直接遍历 src/packages目录自动获得这样一些信息。这里只是简单演示， build/component.json 的代码如下</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"button\"</span>: <span class=\"hljs-string\">\"packages/button/index.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"notice\"</span>: <span class=\"hljs-string\">\"packages/notice/notice.js\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>所有的单独打包流程配置好以后，我们就可以在 package.json 文件中再加上 scripts 命令</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"hljs-attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"hljs-attr\">\"build:components\"</span>: <span class=\"hljs-string\">\"webpack --config build/webpack.component.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"dist\"</span>: <span class=\"hljs-string\">\"npm run build:style &amp;&amp; npm run build:prod &amp;&amp; npm run build:components\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>OK，现在只需要运行 <code>npm run dist</code> 命令，它就会自动去构建完整的样式内容和各个组件单独的样式内容，然后会打包一个完整的组件包和各个组件的单独的包。</p>\n<p>这里需要注意的一点就是你的package.json 文件中的这几个字段需要做一下调整</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"lime-ui\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"lib/lime-ui.min.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">//...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>其中name表示别人使用了你的包的时候的包名，main字段很重要，表示别人直接引入你包的时候，入口文件是哪一个。这里因为我们webpack打包后的文件是 lib/lime-ui.min.js 所以我们这样去设置。</p>\n<p>一切就绪后，你就可以运行 <code>npm run dist</code> 打包你的组件库，然后 <code>npm publish</code> 去发布你的组件库了（发布前需要 <code>npm login</code> 登陆）</p>\n<h2 id=\"使用自己的组件库\"><a href=\"#使用自己的组件库\" class=\"headerlink\" title=\"使用自己的组件库\"></a>使用自己的组件库</h2><h3 id=\"直接使用\"><a href=\"#直接使用\" class=\"headerlink\" title=\"直接使用\"></a>直接使用</h3><p>我们可以用vue-cli 或其他工具另外生成一个demo项目，用这个项目去引入我们的组件库。如果你的包还没有发布出去，可以在你的组件库项目目录下 用 <code>npm link</code> 或者 <code>yarn link</code>的命令创建一个link（推荐使用yarn）</p>\n<p>然后在你的demo目录下使用 <code>npm link package_name</code> 或者 <code>yarn link package_name</code> 这里的package_name就是你的组件库的包名，然后在你的demo项目的入口文件里</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> vue</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> LimeUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lime-ui'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'lime-ui/lib/styles/lime-ui.css'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 其他代码 ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(LimeUI)</span></pre></td></tr></table></figure>\n\n<p>这样设置好之后，我们创建的组件就可以在这个项目里使用了</p>\n<h3 id=\"按需加载-1\"><a href=\"#按需加载-1\" class=\"headerlink\" title=\"按需加载\"></a>按需加载</h3><p>上面我们谈的是全局载入的一种使用方法，那如何按需加载呢？其实我们之前也说过那么一点</p>\n<p>先通过npm安装好 <code>babel-plugin-component</code> 包，然后在你的demo项目的 <code>.babelrc</code> 文件中写上这部分内容</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"plugins\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        [<span class=\"hljs-string\">\"component\"</span>, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"libraryName\"</span>: <span class=\"hljs-string\">\"lime-ui\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"libDir\"</span>: <span class=\"hljs-string\">\"lib\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"styleLibrary\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"styles\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"base\"</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// no base.css file</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"path\"</span>: <span class=\"hljs-string\">\"[module].css\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这里的配置是要符合我们的lime-ui 的一个目录结构的，有了这个配置我们就可以进行按需加载了，你可以像这样做加载一个Button</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; Button &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lime-ui'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"hljs-string\">'a-button'</span>, Button)</span></pre></td></tr></table></figure>\n\n<p>可以看到的是，我们并没有在这个位置加载任何样式，因为 <code>babel-plugin-component</code> 已经帮我们做了，不过因为我们只在组件库的入口点里面设置了 install 方法用来注册组件，所以这里我们按需引入的时候，就需要自己手动注册了。</p>\n<h3 id=\"主题定制\"><a href=\"#主题定制\" class=\"headerlink\" title=\"主题定制\"></a>主题定制</h3><p>前面的内容做好之后，主题定制就比较简单了，我们先在DEMO项目的入口文件同级目录下创建一个 global.scss 文件，然后在其中写入类似下面这样的代码。</p>\n<figure class=\"highlight scss hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-variable\">$--color-primary</span>: red;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"~lime-ui/src/styles/index.scss\"</span>;</span></pre></td></tr></table></figure>\n\n<p>然后在入口文件中把引入组件库的方式改变一下</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> vue</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> LimeUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lime-ui'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./global.scss'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 其他代码 ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(LimeUI)</span></pre></td></tr></table></figure>\n\n<p>我们在入口文件中把对组件库的样式引入，改成引入我们自定义的global.scss文件。</p>\n<p>其实这里就是覆盖了我们在组件库项目里 var.scss 里的变量的值，然后其余的组件基础样式还是使用了各自的样式内容，这样就可以达到主题定制了。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>本文通过对组件库的一些特性的介绍和一个实际的操作案例，阐述了打造一套组件库的一些基础的东西。希望能通过这样的一次分享，让我们不只是去使用组件库，而是能知道组件库的诞生过程和了解组件库的一些内部特性，帮助我们在日常使用的过程中能“心中有数”，当出现问题或组件库需求可能不满足的时候有一个新的思考入手点，那就足够了。</p>\n<h1 id=\"引用参考\"><a href=\"#引用参考\" class=\"headerlink\" title=\"引用参考\"></a>引用参考</h1><ol>\n<li>Vue<code>$dispatch</code>和<code>$broadcast</code>详解: <a href=\"https://juejin.im/post/5c7fd345f265da2da771f4cd\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5c7fd345f265da2da771f4cd</a></li>\n<li>Component Tests with Vue.js - Matt O’Connell : <a href=\"https://www.youtube.com/watch?v=OIpfWTThrK8\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=OIpfWTThrK8</a></li>\n<li>掘金小册：Vue.js 组件精讲</li>\n<li>ElementUI ：<a href=\"https://github.com/ElemeFE/element\" target=\"_blank\" rel=\"noopener\">https://github.com/ElemeFE/element</a></li>\n<li>iView ：<a href=\"https://github.com/iview/iview\" target=\"_blank\" rel=\"noopener\">https://github.com/iview/iview</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><p>组件库能帮我们节省开发精力，无需所有东西都从头开始去做，通过一个个小组件拼接起来，就得到了我们想要的最终页面。在日常开发中如果没有特定的一些业务需求，使用组件库进行开发无疑是更便捷高效，而且质量也相对更高的方案。</p>\n<p>目前的开源组件库有很多，不管是react还是vue的体系里都有很多非常优秀的组件库，比如我经常使用的就有elementui和iview。当然也还有其他的一些组件库，他们的本质其实都是为了节省重复造基础组件这一轮子的过程。也有的公司可能会对自己公司的产品有特别的需求，不太愿意使用开源的组件库的样式，或者自己有一些公司内部的业务项目需要用到，但开源项目无法满足的组件需要沉淀下来的时候，自建一套组件库就成为了一个作为业务驱动所需要的项目。</p>","more":"<p>本文会从 ”准备“ 和 ”实践“ 两个阶段来阐述，一步步完成一个组件库的打造。大致内容如下：</p>\n<ol>\n<li><strong>准备</strong>：主要讲了搭建组件库之前我们需要先提及一下一些基础知识，为实践阶段做铺垫。</li>\n<li><strong>实践</strong>：有了一些基本概念，咱们就直接通过一个实践案例来动手搭建一套基础的组件库。从做的过程中去感受组件库的设计。</li>\n</ol>\n<p>希望通过本文的分享以及包含的一个简单的 <strong>实际操作案例</strong>，能让你从组件库使用者的角色向组件库创造者的角色迈进那么一小步，在日常使用组件库的时候心里有个底，那我的目的也就达到了。</p>\n<p>我们的案例地址是：<a href=\"https://arronkler.github.io/lime-ui/\" target=\"_blank\" rel=\"noopener\">https://arronkler.github.io/lime-ui/</a> </p>\n<p>对应的 repo也就是：<a href=\"https://github.com/arronKler/lime-ui\" target=\"_blank\" rel=\"noopener\">https://github.com/arronKler/lime-ui</a></p>\n<h1 id=\"准备-：打造组件库之前你应该知道些什么？\"><a href=\"#准备-：打造组件库之前你应该知道些什么？\" class=\"headerlink\" title=\"准备 ：打造组件库之前你应该知道些什么？\"></a>准备 ：打造组件库之前你应该知道些什么？</h1><p>这一个章节主要是想先解析清楚一些在组件库的建立中会用到的一些平时在业务概念中很少去关注的概念。我会分为工程和组件两个方面来阐述，把我所知道的一些其中的技巧和坑点都交付出来，以帮助我们在实际去做的过程中可以有所准备。</p>\n<h2 id=\"项目：做一个组件库项目有哪些额外需要考虑的事？\"><a href=\"#项目：做一个组件库项目有哪些额外需要考虑的事？\" class=\"headerlink\" title=\"项目：做一个组件库项目有哪些额外需要考虑的事？\"></a>项目：做一个组件库项目有哪些额外需要考虑的事？</h2><p>做组件库项目和常规业务项目肯定还是有一些事情是我们业务项目不怎么需要，但是类库项目一般都会考虑的事，这一小节就是介绍说明一下，那些我们在做组件库的过程中需要额外考虑的事。</p>\n<h3 id=\"组件测试\"><a href=\"#组件测试\" class=\"headerlink\" title=\"组件测试\"></a>组件测试</h3><p>很多开发者平时业务项目都比较赶，然后就是一般业务项目中都不怎么写测试脚本。但在做一个组件库项目的过程中，最好还是有对应的组件测试的脚本。至少有两点好处：</p>\n<ol>\n<li>自动化测试你写的组件的功能特性</li>\n<li>改动代码不用担心会影响之前的使用者。（测试脚本会告诉你有没有出现未预料到的影响）</li>\n</ol>\n<p>对于类库型项目，我觉得第二点好处还是很重要的，这才能保证你在不断推进项目升级迭代的过程中，确保不会出现影响已经在用你所创造的类库的那些人，毕竟你要是升级一次让他的项目出现大问题，那可真保不准别人饭碗都能丢。（就像之前的antd的圣诞节雪花事件一样）</p>\n<p>由于我们是要写vue的组件库，这里推荐的测试工具集是 <code>vue-test-utils</code> 这套工具，<a href=\"https://vue-test-utils.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://vue-test-utils.vuejs.org/zh/</a> 。其中提供的各种测试函数和方法都能很好的满足我们的测试需要。具体的安装使用可以参见它的文档。</p>\n<p>我们这里主要想提的是 <strong>组件测试到底要测什么？</strong></p>\n<p>我们这里给到一张很直观的图，看到这张图其实你应该也清楚了这个问题的答案</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzNDE2.png\" alt=\"IMG\"></p>\n<p>这张图来自视频 <a href=\"https://www.youtube.com/watch?v=OIpfWTThrK8\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=OIpfWTThrK8</a> ，也是vue-test-util推荐的一个非常棒的演讲，想要具体了解可以进去看一下。</p>\n<p>所以回过头来，组件测试，实际需要我们不仅仅作为创造者的角度对组件的功能特性进行测试。更要从使用者的角度来看，把组件当做一个“黑盒子”，我们能给到它的是用户的交互行为、props数据等，这个“黑盒子”也会对应的反馈出一定的事件和渲染的视图可以被使用者所捕获和观察。通过对这些位置的检查，我们就能获知一个组件的行为是否如我们所愿的去进行着，确保它的行为一定是一致不出幺蛾子的。</p>\n<p>另外还想提的一点偏的话题就是 <strong>契约精神</strong>。作为组件的使用者，我使用你的组件，等于咱们签订一个契约，这个组件的所有行为应该是和你描述的是一致的，不会出现第三种意料之外的可能。毕竟对于企业项目来说，我们不喜欢surprise。antd的彩蛋事件也是给各位都提个醒，咱们搞技术可以这么玩也挺有创意，但是这种公用类库，特别是企业使用的也比较多的，还是把创意收一收，讲究契约，不讲surprise。就算是自家企业内部使用的组件库，除非是业务上的人都是认可的，否则也不要做这种危险试探。</p>\n<p>好的组件测试也是能够帮助我们识别出那些我们有意或无意创造的surprise，有意的咱就不说了，就怕是那种无意中出现的surprise那就比较要命了，所以写好组件测试还是挺有必要的。</p>\n<h3 id=\"文档生成\"><a href=\"#文档生成\" class=\"headerlink\" title=\"文档生成\"></a>文档生成</h3><p>一般来说，我们做一个类库项目都会有对应的说明文档的，有的项目一个README.md 的文档就够了，有的可能需要在来几个 Markdown的文档。对于组件库这一类的项目来说，我们可以用文档工具来辅助直接生成文档。这里推荐 vuepress ，可以快速帮我们完成组件库文档的建设。(<a href=\"https://vuepress.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">https://vuepress.vuejs.org/zh/guide/</a>)</p>\n<p>vuepress是一个文档生成工具，默认的样式和vue官方文档几乎是一致的，因为创造它的初衷就是想为vue和相关的子项目提供文档支持。它内置了 Markdown的扩展，写文档的时候就是用 markdown来写，最让人省心的是<u>你可以直接在 Markdown 文件中使用Vue组件</u>，意味着我们的组件库中写的一个个组件，可以直接放到文档里去用，展示组件的实际运行效果。 我们的案例网站也就是通过vuepress来写的，生成静态网站后，用 <code>gh-pages</code> 直接部署到github上。</p>\n<p>vuepress更好的一点在于你可以自定义其webpack配置和主题，意味着你可以让你自己的文档站点在开发阶段有更多的功能特性的支持，同时可以把站点风格改成自己的一套主题风格。这就无需我们重头开始去做一套了，对于咱们想要快速完成组件库文档建设这一需求来说，还是挺有效的。</p>\n<p>不过这只是咱们要做的事情的一个辅助性的东西，所以具体的使用咱们在实践阶段再说明，这里就不赘述了。</p>\n<h3 id=\"自定义主题\"><a href=\"#自定义主题\" class=\"headerlink\" title=\"自定义主题\"></a>自定义主题</h3><p>自定义主题的功能对于一个开源类库来说肯定还是挺有好处的，这样使用者就可以自己使用组件库的功能而在界面设计上使用自己的设计风格。其实大部分组件库的功能设计都是挺好挺完善的，所以一般来说中小型公司即使想要实现自己的一套组件风格的东西，直接使用开源类库如 element、iview或者基于react的Antd 所提供的功能和交互逻辑，然后在其上进行主题定制基本就满足需求了（除非你家设计师很有想法。。。）。</p>\n<p>自定义主题的功能一般的使用方式是这样的</p>\n<ol>\n<li>通过主题生成工具。（制作者需要单独做一个工具）</li>\n<li>引入关键主题文件，覆盖主题变量。(这种方式一般都需要适配制作者所使用的css预处理器）</li>\n</ol>\n<p>对于第一种方式往往都是组件库的制作者通过把生成组件样式的那一套东西做成一个工具，然后提供给使用者去根据自己的需要来调整，最后生成一套特定的样式文件，引入使用。</p>\n<p>第二种方式，<strong>作为使用者来说，你主要做的其实是覆盖了组件库中的一些主题变量</strong>，因为具体的组件的样式文件不是写死的固定样式值，而是使用了定义好的变量，所以你的自定义主题就生效了。但是这也会引入一个小问题就是你必须适配组件库的创造者所使用的样式预处理器，比如你用iview，那你的项目就要能解析Less文件，你用ElementUI，你的项目就必须可以解析SCSS。</p>\n<p>其实对于第一种方式也主要是以调整主题变量为主。所以当咱们自己要做一套组件库的时候，不难看出，一个核心点就是需要<strong>把主题变量文件和样式文件拆开来</strong>，后面的就简单了。</p>\n<h3 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h3><p>类库项目的构建这里提两点：</p>\n<ol>\n<li><strong>暴露入口</strong></li>\n<li><strong>外部化依赖</strong></li>\n</ol>\n<p>先谈第一点 “暴露接口”。业务项目中，我们的整个项目通过webpack或其他打包工具打包成一个或多个bundle文件，这些文件被浏览器载入后就会直接运行。但是一个类库项目往往都不是单独运行的，而是通过暴露一个 “入口”，然我在业务项目中去调用它。 在webpack配置文件里，可以通过定义 <code>output</code> 中的 <code>library</code> 和 <code>libraryTarget</code> 来控制我们要暴露的一个 “入口变量” ，以及我们要构建的目标代码。</p>\n<p>这一点可以详细参考webpack官方文档: <a href=\"https://webpack.js.org/configuration/output/#outputlibrarytarget\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/configuration/output/#outputlibrarytarget</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// other config</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\toutput: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    library: <span class=\"string\">\"MyLibName\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    libraryTarget: <span class=\"string\">\"umd\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    umdNamedDefine: <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>再说一下 “外部化依赖”，我们做一个vue组件库项目的时候，我们的组件都是依赖于vue的，当我们组件库项目中的某个地方引入了vue，那么打包的时候vue的运行时也是会被一块儿打包进入最终的组件库bundle文件的。这样的问题在于，我们的vue组件库是被vue项目使用的，那么项目中已经有运行时了，我们就没必要在组件库中加入运行时，这样会多增加组件库bundle的体积。使用webpack的 <code>externals</code>可以将vue依赖 “外部化”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">// other config</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\texternals: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    vue: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      root: <span class=\"string\">'Vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs: <span class=\"string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs2: <span class=\"string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      amd: <span class=\"string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"按需加载\"><a href=\"#按需加载\" class=\"headerlink\" title=\"按需加载\"></a>按需加载</h3><p>组件库的按需加载功能还是很实用的， 这样可以避免我们在使用组件库的过程中把所有的用到和没用到的内容都打包到业务代码中去，导致最后的bundle文件过大影响用户体验。</p>\n<p>在业务项目中我们的按需加载都是把需要按需加载的地方单独生成为一个chunk，然后浏览器运行我们的打包代码的时候发现我们需要这一块儿资源了，再发起请求获取到对应的所需代码。</p>\n<p>在组件库里边，我们就需要改变一下引入的方式，比如一开始我们引入一个组件库的时候是直接将组件库和样式全部引入的。如下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> LimeUI <span class=\"keyword\">from</span> <span class=\"string\">'lime-ui'</span> <span class=\"comment\">// 引入组件库</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'lime-ui/styles/index.css'</span> <span class=\"comment\">// 引入整个组件库的样式文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(LimeUI)</span></pre></td></tr></table></figure>\n\n<p>那么，换成手动的按需加载的方式就是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">'lime-ui'</span> <span class=\"comment\">// 引入button组件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'lime-ui/styles/button.css'</span> <span class=\"comment\">// 引入button的样式</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'l-button'</span>, Button) <span class=\"comment\">// 注册组件</span></span></pre></td></tr></table></figure>\n\n<p>这种方式的确是按需引入的，但也一个不舒服的地方就是每次我们引入的时候都需要手动的引入组件和样式。一般来说一个项目里面用到的组件少说也有十多个，这就比较麻烦了。组件库是怎么解决这个问题的呢？</p>\n<p>通过babel插件的方式，将引入组件库和组件样式的模式自动化，比如antd、antd-mobile、material-ui都在使用的<code>babel-plugin-import</code>、还有ElementUI使用的 <code>babel-plugin-component</code>。在业务项目中配置好babel插件之后，它内部就可以给你做一个这样的转换（这里以 babel-plugin-component）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">'components'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转换代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">require</span>(<span class=\"string\">'components/lib/button'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'components/lib/button/style.css'</span>)</span></pre></td></tr></table></figure>\n\n<p>OK，那既然代码可以做这样的转换的话，其实我们所要做的一点就是在我们打造组件库的时候，把我们的组件库的打包代码放到对应的文件目录结构之下就可以了。使用者可以选择手动载入组件，也可以使用babel插件的方式优化这一步骤。</p>\n<p>babel-plugin-component 文档： <a href=\"https://www.npmjs.com/package/babel-plugin-component\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/babel-plugin-component</a></p>\n<p>babel-pluigin-import 文档: <a href=\"https://www.npmjs.com/package/babel-plugin-import\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/babel-plugin-import</a></p>\n<h2 id=\"组件：比起日常的组件设计，做组件库你还需要知道些什么？\"><a href=\"#组件：比起日常的组件设计，做组件库你还需要知道些什么？\" class=\"headerlink\" title=\"组件：比起日常的组件设计，做组件库你还需要知道些什么？\"></a>组件：比起日常的组件设计，做组件库你还需要知道些什么？</h2><p>做组件库中的组件的技巧和在项目中用到的还是有一些区别的，这一小节就是告诉大家，组件库中的组件设计，我们还应该知道哪些必要的知识内容。</p>\n<h3 id=\"组件通信：除了上下级之间进行数据通信，还有什么？\"><a href=\"#组件通信：除了上下级之间进行数据通信，还有什么？\" class=\"headerlink\" title=\"组件通信：除了上下级之间进行数据通信，还有什么？\"></a>组件通信：除了上下级之间进行数据通信，还有什么？</h3><p>我们常规用到的组件通信的方法就是通过 <code>props</code> 和 <code>$emit</code> 来进行父组件和子组件之间的数据传递，如下面的示意图中展示的那样：父组件通过 <code>props</code> 将数据给子组件、子组件通过 <code>$emit</code> 将数据传递给父组件，顶多通过<code>eventBus</code>或<code>Vuex</code>来达到任意组件之间数据的相互通信。这些方法在常规的业务开发过程中是比较有效的，但是在组件库的开发过程中就显得有点力不从心了，主要的问题在于： <u><strong>如何处理跨级组件之间的数据通信呢？</strong></u></p>\n<p><img src=\"https://blog-1257601889.cos.ap-shanghai.myqcloud.com/vue/attrs/vue.png?ynotemdtimestamp=1551245782807\" alt=\"IMG\"></p>\n<p>如果在日常项目中，我们当然可以使用像 <code>vuex</code> 这样的将组件数据直接 ”外包“ 出去的方式来实现数据的跨级访问，但是<code>vuex</code> 始终是一个外部依赖项，组件库的设计肯定是不能让这种强依赖存在的。下面我们就来说说两个在组件库项目中我们会用到的数据通信方式。</p>\n<h4 id=\"内置的provide-inject\"><a href=\"#内置的provide-inject\" class=\"headerlink\" title=\"内置的provide/inject\"></a>内置的provide/inject</h4><p><strong><u>provide/inject 是vue自带的可以跨级从子组件中获取父级组件数据的一套方案。</u></strong> 这一对东西类似于react里面的 <code>Context</code> ，都是为了处理跨级组件数据传递的问题。</p>\n<p>使用的时候，在子组件中的 inject 处声明需要注入的数据，然后在父级组件中的某个含有对应数据的地方，提供子级组件所需要的数据。不管他们之间跨越了多少个组件，子级组件都能获取到对应的数据。(参考下面的伪代码例子)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用关系 CompA --&gt; CompB --&gt; CompC --&gt; ... --&gt; ChildComp</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CompA.vue</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  provide: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    theme: <span class=\"string\">'dark'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CompB.vue</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CompC.vue</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ChildComp.vue</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  inject: [<span class=\"string\">'theme'</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tmounted() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.theme) <span class=\"comment\">// 打印结果: dark</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>不过provide/inject的方式主要是子组件从父级组件中跨级获取到它的状态，却不能完美的解决以下问题：</p>\n<ol>\n<li>子级组件跨级传递数据到父级组件</li>\n<li>父级组件跨级传递数据到子级组件</li>\n</ol>\n<h4 id=\"派发和广播-自制dispatch和broadcast功能\"><a href=\"#派发和广播-自制dispatch和broadcast功能\" class=\"headerlink\" title=\"派发和广播: 自制dispatch和broadcast功能\"></a>派发和广播: 自制dispatch和broadcast功能</h4><p><strong><u>dispatch和broadcast可以用来做父子级组件之间跨级通信</u></strong>。在vue1.x里面是有dispatch和broadcast功能的，不过在vue2.x中被取消掉了。这里可以参考一下下面链接给出的v1.x中的内容。</p>\n<blockquote>\n<p>dispatch文档（v1.x）：<a href=\"https://v1.vuejs.org/api/#vm-dispatch\" target=\"_blank\" rel=\"noopener\">https://v1.vuejs.org/api/#vm-dispatch</a></p>\n<p>broadcast文档（v1.x）：<a href=\"https://v1.vuejs.org/api/#vm-broadcast\" target=\"_blank\" rel=\"noopener\">https://v1.vuejs.org/api/#vm-broadcast</a></p>\n</blockquote>\n<p>根据文档，我们得知</p>\n<ul>\n<li><p>dispatch会派发一个事件，这个事件首先在自己这个组件实例上去触发，然后会沿着父级链一级一级的往上冒泡，直到触发了某个父级中声明的对这个事件的监听器后就停止，除非是这个监听器返回了true。当然监听器也是可以通过回调函数获取到事件派发的时候传递的所有参数的。这一点很像我们在DOM中的事件冒泡机制，应该不难理解。</p>\n</li>\n<li><p>而broadcast就是会将事件广播到自己的所有子组件实例上，一层一层的往下走，因为组件树的原因，往下走的过程会遇到 “分叉”，也就可以看成是一条条的多个路径。事件沿着每一个子路径向下冒泡，每个路径上触发了监听器就停止，如果监听器返回的是true那就继续向下再传播。</p>\n</li>\n</ul>\n<p>简单总结一下。<u><strong>dispatch派发事件往上冒泡，broadcast广播事件往下散播，遇到处理对应事件的监听器就处理，监听器没有返回true就停止</strong></u></p>\n<p>需要注意的是，这里的派发和广播事件都是 <strong>跨层级的</strong> , 而且可以携带参数，那也就意味着可以<strong>跨层级进行数据通信</strong>。</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzkx.png\" alt=\"IMG\"></p>\n<p>由于dispatch和broadcast在vue2.x中取消了，所以我们这里可以自己写一个，然后通过mixin的方式混入到需要使用到跨级组件通信的组件中。</p>\n<p>方法内容其实很简单，这里就直接列代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参考自iview的实现</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">broadcast</span>(<span class=\"params\">componentName, eventName, params</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">this</span>.$children.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> name = child.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (name === componentName) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      child.$emit.apply(child, [eventName].concat(params));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      broadcast.apply(child, [componentName, eventName].concat([params]));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  methods: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    dispatch(componentName, eventName, params) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">let</span> parent = <span class=\"keyword\">this</span>.$parent || <span class=\"keyword\">this</span>.$root;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">let</span> name = parent.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parent = parent.$parent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (parent) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">          name = parent.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (parent) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parent.$emit.apply(parent, [eventName].concat(params));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    broadcast(componentName, eventName, params) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      broadcast.call(<span class=\"keyword\">this</span>, componentName, eventName, params);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<p>其实这里的实现和vue1.x中的实现还是有一定的区别的：</p>\n<ol>\n<li><strong>dispatch没有事件冒泡。找到哪个就直接执行</strong></li>\n<li><strong>设定了一个name参数，只针对特定name的组件触发事件</strong></li>\n</ol>\n<p>其实看懂了这里的代码，你就应该可以举一反三想出 <strong>找寻任何一个组件的方法了，不管是向上还是向下找，无非就是循环遍历和迭代处理，直到目标组件出现，然后调用它。</strong> 派发和广播无非就是找到之后利用vue自带的事件机制来发布事件，然后在具体组件中监听该事件并处理。</p>\n<h3 id=\"渲染函数：它可以释放javascript的能力\"><a href=\"#渲染函数：它可以释放javascript的能力\" class=\"headerlink\" title=\"渲染函数：它可以释放javascript的能力\"></a>渲染函数：它可以释放javascript的能力</h3><p>首先我们回顾一下一个组件是如何从写代码到被转换成界面的。我们写vue单文件组件的时候一般会有template、script和style三部分，在打包的时候，vue-loader会将其中的template模板部分先编译成Vue实例中render选项所需要的构建视图的代码。在具体运行的时候，vue运行时会使用<code>$mount</code> 进行渲染，渲染好之后将其挂载到你提供的DOM节点下。</p>\n<p>整个过程里面我们只日常关注最多的当然就是template的部分，但是template其实只是vue提供的一个语法糖，只是让我们写代码写起来跟写html一样轻松，降低刚入手vue的小伙伴的学习成本。React就没有提供template的语法糖，而是使用的JSX来降低写组件的复杂度。(vue能在react和angular两大框架的压力下异军突起，简洁易懂的模板语法是有一定促进作用的，毕竟看起来更简单)</p>\n<p>通过上面我们回顾的内容，其实我们也发现了，<strong>我们写的template，最终都是javascript</strong>。这里template被编译之后，给到了 render这个渲染函数，在执行渲染的时候vue就会执行render中的操作来渲染我们的组件。</p>\n<p>所以template是好，但 <strong>如果你想要使用全部的javascript的能力，那就可以使用渲染函数</strong>。</p>\n<blockquote>\n<p>渲染函数&amp;JSX (官方文档)：<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/render-function.html</a> </p>\n</blockquote>\n<p>日常写业务组件，我们用template就挺OK的，不过当遇到一些复杂情况，用 <code>写组件 --&gt; 引入使用 --&gt; 注册组件 --&gt; 使用组件</code> 的方式就不好处理了，比如下面两种情况：</p>\n<ol>\n<li>通过代码动态渲染组件</li>\n<li>将组件渲染到其他位置</li>\n</ol>\n<p>第一种情况是通过代码动态渲染组件，比如运营常常使用的活动h5页面，每个活动都不一样，每次要么都重新做一份，要么在原有的基础上修改。但是这种修改的页面结构调整是很大的，每次都会是破坏性的，和重做其实没区别。这样的话，每次活动无论内容如何，前端都要上手去写代码。但其实只需要在管理后台做一个活动编辑器，编辑器的内容直接转化为render函数的代码，然后通过配置下发到某个页面上，承载页拿到数据给到render函数执行渲染。这样就可以动态的根据管理后台配置的方式来渲染组件内容，每次的活动页，运营也可以通过编辑器自行生成。</p>\n<p>第二种情况是要将组件渲染到不同位置。我们日常写业务组件基本就是写一个组件，在需要的拿来使用。如果你只是在template中把组件写进去，那你的组件的内容就都会作为当前组件的子组件进行渲染，所生成的DOM结构也是在当前的DOM结构之下的。知道render之后，其实我们可以新建vue实例，动态渲染之后，手动挂载到任意的DOM位置上去。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CompA <span class=\"keyword\">from</span> <span class=\"string\">'./CompA.vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Instance = <span class=\"keyword\">new</span> Vue(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render(h) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> h(CompA)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> component = Instance.$mount() <span class=\"comment\">// 执行渲染</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(component.$el) <span class=\"comment\">// 挂载到body元素下</span></span></pre></td></tr></table></figure>\n\n<p>我们使用的element里面的 <code>this.$message</code> 就用到了动态渲染，然后手动挂载到指定位置。</p>\n<h1 id=\"实践：做一遍你就会了\"><a href=\"#实践：做一遍你就会了\" class=\"headerlink\" title=\"实践：做一遍你就会了\"></a>实践：做一遍你就会了</h1><p>这里先贴上我们的github地址，各位可以在做的过程中对照着看。<a href=\"https://github.com/arronKler/lime-ui\" target=\"_blank\" rel=\"noopener\">https://github.com/arronKler/lime-ui</a></p>\n<h2 id=\"建立一个工程化的项目\"><a href=\"#建立一个工程化的项目\" class=\"headerlink\" title=\"建立一个工程化的项目\"></a>建立一个工程化的项目</h2><h3 id=\"第一步，建立工程化结构\"><a href=\"#第一步，建立工程化结构\" class=\"headerlink\" title=\"第一步，建立工程化结构\"></a>第一步，建立工程化结构</h3><p>这里就不废话了，直接贴目录结构和解释</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- assets/   <span class=\"comment\"># 存放一些额外的资源文件，图片之类的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- build/  <span class=\"comment\"># webpack打包配置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- docs/  <span class=\"comment\"># 存放文档</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- .vuepress  <span class=\"comment\"># vuepress配置目录</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- component <span class=\"comment\"># 组件相关的文档放这里</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- README.md <span class=\"comment\"># 静态首页</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- lib/  <span class=\"comment\"># 打包生成的文件放这里</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- styles/ <span class=\"comment\"># 打包后的样式文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- src/ <span class=\"comment\"># 在这里写代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- mixins/ <span class=\"comment\"># mixin文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- packages/ <span class=\"comment\"># 各个组件，每个组件是一个子目录</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- styles/ <span class=\"comment\"># 样式文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t|- common/ <span class=\"comment\"># 公用的样式内容</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t|- mixins/ <span class=\"comment\"># 复用的mixin</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- utils  <span class=\"comment\"># 工具目录</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- index.js  <span class=\"comment\"># 打包入口，组件的导出</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- <span class=\"built_in\">test</span>/  <span class=\"comment\"># 测试文件夹</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t|- specs/  <span class=\"comment\"># 存放所有的测试用例</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- .npmignore</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- .gitignore</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- .babelrc</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- README.md</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">|- package.json</span></pre></td></tr></table></figure>\n\n<p>这里比较重要的目录就是我们的src目录，下面存放了我们的各个单一的组件和一套样式库，另外还有一些辅助的东西。我们写文档就是在 docs目录下去写。项目目录最外层都是些常规的配置内容，比如 <code>.npmignore</code> 和 <code>.gitignore</code> 这样的文件我们都是很常见的，所以我就不具体细说这一部分了，要是有一定疑惑可以直接参见github上的源码对照着看。</p>\n<p>这里我们把需要使用到的类库文件也先建立好</p>\n<p>在 src/mixins 下创建一个 emitter.js，写入如下内容，也就是我们的dispatch和broadcast的方法，之后的组件设计中会用到</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">broadcast</span>(<span class=\"params\">componentName, eventName, params</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">this</span>.$children.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> name = child.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (name === componentName) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      child.$emit.apply(child, [eventName].concat(params));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      broadcast.apply(child, [componentName, eventName].concat([params]));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  methods: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    dispatch(componentName, eventName, params) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">let</span> parent = <span class=\"keyword\">this</span>.$parent || <span class=\"keyword\">this</span>.$root;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">let</span> name = parent.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parent = parent.$parent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (parent) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">          name = parent.$options.name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (parent) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parent.$emit.apply(parent, [eventName].concat(params));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    broadcast(componentName, eventName, params) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      broadcast.call(<span class=\"keyword\">this</span>, componentName, eventName, params);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<p>然后在 src/utils 下新建一个 assist.js 文件，写下辅助性的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">oneOf</span>(<span class=\"params\">value, validList</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; validList.length; i++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (value === validList[i]) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这两个地方都是之后会使用到的，如果你需要其他的辅助内容，也可以在这两个文件所在的目录下去建立。</p>\n<h3 id=\"第二步，-完善打包流程\"><a href=\"#第二步，-完善打包流程\" class=\"headerlink\" title=\"第二步， 完善打包流程\"></a>第二步， 完善打包流程</h3><p>目录建好了，那就该填充血肉了，要打包一个组件库项目，肯定是要先配置好我们的webpack，不然写了源码也没法跑起来。所以我们先定位到 build目录下，在build目录下先建立三个文件</p>\n<ul>\n<li><p>webpack.base.js 。存放基本的一些rules配置</p>\n</li>\n<li><p>webpack.prod.js 。整个组件库的打包配置</p>\n</li>\n<li><p>gen-style.js 。单独对样式进行打包</p>\n</li>\n</ul>\n<p>以下是具体的配置内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* webpack.base.js */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">'../package.json'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">dir</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> path.join(__dirname, <span class=\"string\">'..'</span>, dir);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rules: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">          loaders: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">            css: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"string\">'vue-style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">                loader: <span class=\"string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">                options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">            ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">            less: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"string\">'vue-style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">                loader: <span class=\"string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">                options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">                loader: <span class=\"string\">'less-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">                options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">            ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">          postLoaders: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">            html: <span class=\"string\">'babel-loader?sourceMap'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">          sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">          sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loaders: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"string\">'style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"regexp\">/\\.less$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loaders: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"string\">'style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">91</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"string\">'less-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">92</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">93</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">94</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">95</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">96</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">97</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">98</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">99</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">100</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loaders: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">101</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">102</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"string\">'style-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">103</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">104</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">105</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">106</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">107</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">108</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">109</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">110</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">111</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">112</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">113</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">114</span></pre></td><td class=\"code\"><pre><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">115</span></pre></td><td class=\"code\"><pre><span class=\"line\">            options: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">116</span></pre></td><td class=\"code\"><pre><span class=\"line\">              sourceMap: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">117</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">118</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">119</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">120</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">121</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">122</span></pre></td><td class=\"code\"><pre><span class=\"line\">        test: <span class=\"regexp\">/\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">123</span></pre></td><td class=\"code\"><pre><span class=\"line\">        loader: <span class=\"string\">'url-loader?limit=8192'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">124</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">125</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">126</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">127</span></pre></td><td class=\"code\"><pre><span class=\"line\">  resolve: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">128</span></pre></td><td class=\"code\"><pre><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">129</span></pre></td><td class=\"code\"><pre><span class=\"line\">    alias: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">130</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">'vue'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">131</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">'@'</span>: resolve(<span class=\"string\">'src'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">132</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">133</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">134</span></pre></td><td class=\"code\"><pre><span class=\"line\">  plugins: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">135</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">136</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">137</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">'process.env.VERSION'</span>: <span class=\"string\">`'<span class=\"subst\">$&#123;pkg.version&#125;</span>'`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">138</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">139</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">new</span> VueLoaderPlugin()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">140</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">141</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  webpack.prod.js */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpackBaseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.js'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">process.env.NODE_ENV = <span class=\"string\">'production'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(webpackBaseConfig, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  mode: <span class=\"string\">\"production\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  entry: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    main: path.resolve(__dirname, <span class=\"string\">'../src/index.js'</span>)  <span class=\"comment\">// 将src下的index.js 作为入口点</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  output: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'../lib'</span>),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    publicPath: <span class=\"string\">'/lib/'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    filename: <span class=\"string\">'lime-ui.min.js'</span>,  <span class=\"comment\">// 改成自己的类库名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    library: <span class=\"string\">'lime-ui'</span>, <span class=\"comment\">// 类库导出</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    libraryTarget: <span class=\"string\">'umd'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    umdNamedDefine: <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  externals: &#123; <span class=\"comment\">// 外部化对vue的依赖</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    vue: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      root: <span class=\"string\">'Vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs: <span class=\"string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs2: <span class=\"string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      amd: <span class=\"string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  plugins: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"string\">'\"production\"'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* gen-style.js */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cleanCSS = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> components = <span class=\"built_in\">require</span>(<span class=\"string\">'./components.json'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildCss</span>(<span class=\"params\">cb</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  gulp.src(<span class=\"string\">'../src/styles/index.scss'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(sass())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(autoprefixer())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(cleanCSS())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(rename(<span class=\"string\">'lime-ui.css'</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'../lib/styles'</span>));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  cb()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">exports.default = gulp.series(buildCss)</span></pre></td></tr></table></figure>\n\n<p>OK，这里我们的webpack配置基本设置好了，webpack.base.js 中的配置就主要是一些loader和插件的配置，具体的出入口都是在 webpack.prod.js 中配置的。这里webpack.prod.js 合并了 webpack.base.js 中的配置项。关于 output.libary 和 externals ，阅读了之前 “准备” 阶段的内容的应该不会陌生了。</p>\n<p>另外还有 gen-style.js 这个文件是单独使用了 gulp 来对样式文件进行打包操作的，我们这里选用的是 scss的语法，如果你想用less或其他的预处理器，也可以自行修改这里的文件和相关依赖。</p>\n<p>不过这个配置肯定还没有结束，首先我们需要安装好这里的配置里使用到的各种loader和plugin。为了不漏掉安装项和保持一致性，可以直接复制下面的配置内容放到 package.json 下，通过 <code>npm install</code> 来进行安装。需要注意的是，这里的安装完成之后，其实后面的一些内容的依赖也都一并安装好了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"async-validator\": \"^3.0.4\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"core-js\": \"2.6.9\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"webpack\": \"^4.39.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"webpack-cli\": \"^3.3.7\"</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\"devDependencies\": &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"@babel/core\": \"^7.5.5\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"@babel/plugin-transform-runtime\": \"^7.5.5\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"@babel/preset-env\": \"^7.5.5\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"@vue/test-utils\": \"^1.0.0-beta.29\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"babel-loader\": \"^8.0.6\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"chai\": \"^4.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"cross-env\": \"^5.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"css-loader\": \"2.1.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"file-loader\": \"^4.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gh-pages\": \"^2.1.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp\": \"^4.0.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp-autoprefixer\": \"^7.0.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp-clean-css\": \"^4.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp-rename\": \"^1.4.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"gulp-sass\": \"^4.0.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma\": \"^4.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-chai\": \"^0.1.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-chrome-launcher\": \"^3.1.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-coverage\": \"^2.0.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-mocha\": \"^1.3.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-sinon-chai\": \"^2.0.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-sourcemap-loader\": \"^0.3.7\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-spec-reporter\": \"^0.0.32\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"karma-webpack\": \"^4.0.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"less\": \"^3.10.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"less-loader\": \"^5.0.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"mocha\": \"^6.2.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"node-sass\": \"^4.12.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"rimraf\": \"^3.0.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"sass-loader\": \"^7.3.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"sinon\": \"^7.4.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"sinon-chai\": \"^3.3.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"style-loader\": \"^1.0.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"url-loader\": \"^2.1.0\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"vue-loader\": \"^15.7.1\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"vue-style-loader\": \"^4.1.2\",</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \"vuepress\": \"^1.0.3\"</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;,</span></pre></td></tr></table></figure>\n\n<p>另外，由于我们使用了babel，所以需要在项目的根目录下设置一下 <code>.babelrc</code> 文件，内容如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">\"@babel/preset-env\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"loose\"</span>: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"modules\"</span>: <span class=\"string\">\"commonjs\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"spec\"</span>: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"useBuiltIns\"</span>: <span class=\"string\">\"usage\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"corejs\"</span>: <span class=\"string\">\"2.6.9\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"string\">\"@babel/plugin-transform-runtime\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>当然也不要忘记在package.json文件中写上scripts简化手动输入命令的过程</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"build:style\"</span>: <span class=\"string\">\"gulp --gulpfile build/gen-style.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"build:prod\"</span>: <span class=\"string\">\"webpack --config build/webpack.prod.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"第三步，建立文档化工具\"><a href=\"#第三步，建立文档化工具\" class=\"headerlink\" title=\"第三步，建立文档化工具\"></a>第三步，建立文档化工具</h3><p>如果在上一步中未安装了 vuepress ，可以通过 <code>npm install vuepress --save-dev</code> 来安装，</p>\n<p>然后在 package.json 中加入脚本，快速启动</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"docs:dev\"</span>: <span class=\"string\">\"vuepress dev docs\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"docs:build\"</span>: <span class=\"string\">\"vuepress build docs\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这个时候你可以在你的 docs/README.md 文件里写点内容，然后运行 <code>npm run docs:dev</code> 就可以看到本地的文档内容了。需要打包的时候使用 <code>npm run docs:build</code> 就可以了。</p>\n<p>如果我们的项目是要放到github上的，那么其实也可以一并将我们的文档生成之后也放到github上去，利用github的pages功能让这个本地的文档在线运行。（github pages托管我们的静态页面和资源）</p>\n<p>可以运行 <code>npm install gh-pages --save-dev</code> 安装 <code>gh-pages</code> 这个可以帮我们一键部署github pages文档的工具。它的工作原理就是将对应的某个文件夹下的资源迁移到我们的当前项目的gh-pages分支上，然后这个分支在push给了github之后，github就会将该分支内的内容服务起来。为了更好的使用它，我们可以在package.json中添加scripts</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  \t<span class=\"attr\">\"deploy\"</span>: <span class=\"string\">\"gh-pages -d docs/.vuepress/dist\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"deploy:build\"</span>: <span class=\"string\">\"npm run docs:build &amp;&amp; npm run deploy\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这样你就可以使用 <code>npm run deploy</code> 直接部署你的vuepress生成的静态站点，不过务必在部署之前运行一下文档的构建程序。因此我们也添加了一条 <code>npm run deploy:build</code> 命令，使用这条命令就可以直接把文档的构建和部署直接一起解决。是不是很简单呢？</p>\n<p>不过为了我们能够直接使用自己写的组件，还需要对vuepress做一点点配置。在 docs/.vuepress目录下新建一个 enhanceApp.js 文件，写入如下内容，将我们的组件库的入口和样式注入进去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> LimeUI <span class=\"keyword\">from</span> <span class=\"string\">'../../src/index.js'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"../../src/styles/index.scss\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Vue,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  options,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  router</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;) =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Vue.use(LimeUI)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这个时候我们之后写的组件就可以直接在文档中使用了。</p>\n<h3 id=\"第四步，样式构建\"><a href=\"#第四步，样式构建\" class=\"headerlink\" title=\"第四步，样式构建\"></a>第四步，样式构建</h3><p>先需要说明的是这里我们所使用的样式预处理器的语法是scss。那么在“完善打包流程”这一小节中已经将用gulp进行打包的代码给出了，不过有必要说明一下，我们又是如何去整合样式内容的。</p>\n<p>首先，为了之后便于做按需加载，对于每个组件的样式都是一个单独的scss文件，写样式的时候，为了避免太多的层级嵌套，使用了BEM风格的方式去书写。</p>\n<p>我们需要先在 src/styles目录执行如下命令生成一个基本的样式文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> src/styles</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir common</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir mixins</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch common/var.scss  <span class=\"comment\"># 样式变量文件</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch common/mixins.scss</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch index.scss  <span class=\"comment\"># 引入所有样式</span></span></pre></td></tr></table></figure>\n\n<p>然后将对应的 var.scss 和 mixins.scss 文件填充上一些基础内容</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* common/var.scss */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$--color-primary</span>: <span class=\"number\">#ff6b00</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$--color-white</span>: <span class=\"number\">#FFFFFF</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$--color-info</span>: <span class=\"number\">#409EFF</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$--color-success</span>: <span class=\"number\">#67C23A</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$--color-warning</span>: <span class=\"number\">#E6A23C</span> !default;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$--color-danger</span>: <span class=\"number\">#F56C6C</span> !default;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* mixins/mixins.scss */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$namespace</span>: <span class=\"string\">'lime'</span>;  <span class=\"comment\">/* 组件库的样式前缀 */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* BEM</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> -------------------------- */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> b(<span class=\"variable\">$block</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"variable\">$B</span>: <span class=\"variable\">$namespace</span>+<span class=\"string\">'-'</span>+<span class=\"variable\">$block</span> !global;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .#&#123;<span class=\"variable\">$B</span>&#125; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @<span class=\"keyword\">content</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>在mixins文件中我们声明了一个mixin，用于帮助我们更好的去构建样式文件。</p>\n<h2 id=\"组件打造案例\"><a href=\"#组件打造案例\" class=\"headerlink\" title=\"组件打造案例\"></a>组件打造案例</h2><p>上面的内容设置好了， 咱们就可以开始具体去做一个组件试试了</p>\n<h3 id=\"简单的button组件\"><a href=\"#简单的button组件\" class=\"headerlink\" title=\"简单的button组件\"></a>简单的button组件</h3><p>这是做好之后的大致效果</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzc0.png\" alt=\"2.png\"></p>\n<p>OK，那我们建立基本的button组件相关的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> src/packages</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir button &amp;&amp; <span class=\"built_in\">cd</span> button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch index.js</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">touch button.vue</span></pre></td></tr></table></figure>\n\n<p>写入button.vue的内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;button <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"lime-button\"</span> :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;[`lime-button-$&#123;type&#125;`]: true&#125;\"</span> type=<span class=\"string\">\"button\"</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;slot&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;<span class=\"regexp\">/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; oneOf &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../utils/assist'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  name: <span class=\"string\">'Button'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  props: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    type: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      validator (value) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"keyword\">return</span> oneOf(value, [<span class=\"string\">'default'</span>, <span class=\"string\">'primary'</span>, <span class=\"string\">'info'</span>, <span class=\"string\">'success'</span>, <span class=\"string\">'warning'</span>, <span class=\"string\">'error'</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">'default'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span></pre></td></tr></table></figure>\n\n<p>这里我们需要在 index.js 中导出这个组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Button <span class=\"keyword\">from</span> <span class=\"string\">'./button.vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Button</span></pre></td></tr></table></figure>\n\n<p>这样单个的一个组件就完成了，之后你可以再多做几个组件试试，不过有一点就是这些组件需要一个统一的打包入口，我们再webpack中已经配置过了，那就是 src/index.js 这个文件，我们需要在这个文件里面将我们刚才写的button组件以及你自己写的其他组件都引入进来，然后统一导出给webpack打包使用，具体代码见下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Button <span class=\"keyword\">from</span> <span class=\"string\">'./packages/button'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> components = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  lButton: Button,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options = &#123;&#125;</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(components).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Vue.component(key, components[key]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> install</span></pre></td></tr></table></figure>\n\n<p>可以看到的是index.js中我们最终导出的是一个叫install的函数，这个函数其实就是Vue插件的一种写法，便于我们在实际项目中引入的时候可以使用 <code>Vue.use</code> 的方式来自动安装我们的整个组件库。install接受两个参数，一个是Vue，我们把它用来注册一个个的组件。还有一个是options，便于我们可以在注册组件的时候传入一些初始化参数，比如默认的按钮大小、主题等信息，都可以通过参数的方式来设定。</p>\n<p>然后我们可以在 src/styles目录下新建一个button.scss 文件，写入我们button对应的样式</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* button.scss */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">charset</span> <span class=\"string\">\"UTF-8\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"common/var\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"mixins/mixins\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">include</span> b(button) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">60px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">36px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid transparent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;:focus &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">outline</span>: none;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;-default &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#555</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:focus,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:hover &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attribute\">background-color</span>: rgba(<span class=\"variable\">$--color-primary</span>, <span class=\"number\">0.3</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;-primary &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">$--color-primary</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:focus,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:hover &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attribute\">background-color</span>: mix(<span class=\"variable\">$--color-primary</span>, <span class=\"number\">#ccc</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;-info &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">$--color-info</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:focus,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:hover &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attribute\">background-color</span>: mix(<span class=\"variable\">$--color-info</span>, <span class=\"number\">#ccc</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">   &amp;-success &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">$--color-success</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:active,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:focus,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &amp;:hover &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attribute\">background-color</span>: mix(<span class=\"variable\">$--color-success</span>, <span class=\"number\">#ccc</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>最后我们还需要在 src/styles/index.scss 文件中将button的样式引入进去</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"button\"</span>;</span></pre></td></tr></table></figure>\n\n<p>为了简单的实验，你可以直接在 docs/README.md 文件下写两个button组件试试看</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;l-button type=<span class=\"string\">\"primary\"</span>&gt;Click me&lt;<span class=\"regexp\">/l-button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span></pre></td></tr></table></figure>\n\n<p>如果你想要得到和我在 <a href=\"https://arronkler.github.io/lime-ui/\" target=\"_blank\" rel=\"noopener\">https://arronkler.github.io/lime-ui/</a> 上一样的效果，可以参考 <a href=\"https://github.com/arronKler/lime-ui\" target=\"_blank\" rel=\"noopener\">https://github.com/arronKler/lime-ui</a> 项目中的 docs 目录下的配置。如果想要更个性化的配置，可以查阅vuepress的官方文档。</p>\n<h3 id=\"Notice提示组件\"><a href=\"#Notice提示组件\" class=\"headerlink\" title=\"Notice提示组件\"></a>Notice提示组件</h3><p>这个组件就要用到我们的动态渲染的相关的东西了。具体最后的使用方式是这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$notice(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  title: <span class=\"string\">'提示'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  content: <span class=\"keyword\">this</span>.content || <span class=\"string\">'内容'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  duration: <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>效果类似于这样</p>\n<p><img src=\"https://piccdn.luojilab.com/fe-oss/default/MTU2ODI4MDIzMzAx.png\" alt=\"4.png\"></p>\n<p>OK，我们先来写一下这个组件的一个基本源码</p>\n<p>在 src/packages 目录下新建notice文件夹，然后新建一个 notice.vue 文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"lime-notice\"</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"lime-notice__main\"</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">\"item in notices\"</span> :key=<span class=\"string\">\"item.id\"</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"lime-notice__title\"</span>&gt;&#123;&#123;item.title&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;div class=\"lime-notice__content\"&gt;&#123;&#123;item.content&#125;&#125;&lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  data() &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      notices: []</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    add(notice) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      let id = +new Date()</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      notice.id = id</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      this.notices.push(notice)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      const duration = notice.duration</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      setTimeout(() =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">        this.remove(id)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &#125;, duration * 1000)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    remove(id) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      for(let i = 0; i &lt; this.notices.length; i++) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">        if (this.notices[i].id === id) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">          this.notices.splice(i, 1)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">          break;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">        &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>\n\n<p>代码很简单，其实就是声明了一个容器，然后在其中通过控制 notices 的数据来展示和隐藏，接着我们在同一个目录下新建一个notice.js 文件来做动态渲染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Notice <span class=\"keyword\">from</span> <span class=\"string\">'./notice.vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Notice.newInstance = <span class=\"function\">(<span class=\"params\">properties</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> props = properties || &#123;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> Instance = <span class=\"keyword\">new</span> Vue(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    render(h) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> h(Notice, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        props</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> component = Instance.$mount()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(component.$el)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> notice = component.$children[<span class=\"number\">0</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    add(_notice) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      notice.add(_notice)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;, </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    remove(id) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> noticeInstance</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (_notice) =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  noticeInstance = noticeInstance || Notice.newInstance()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  noticeInstance.add(_notice)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这里我们我们通过动态渲染的方式让我们的组件可以直接挂在到body下面，而非归属于根挂载点之下。</p>\n<p>然后在 src/styles 目录下新建 notice.scss 文件，写上我们的样式文件</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* notice.scss */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">charset</span> <span class=\"string\">\"UTF-8\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"common/var\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"mixins/mixins\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">include</span> b(notice) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">60px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1000</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;__main &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">100px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">4px</span> <span class=\"number\">#aaa</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;__title &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &amp;__content &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>最后同样的，也需要在 src/index.js 这个入口文件中对 notice做处理。完整代码是这样的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Button <span class=\"keyword\">from</span> <span class=\"string\">'./packages/button'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Notice <span class=\"keyword\">from</span> <span class=\"string\">'./packages/notice/notice.js'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> components = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  lButton: Button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options = &#123;&#125;</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(components).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Vue.component(key, components[key]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Vue.prototype.$notice = Notice;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> install</span></pre></td></tr></table></figure>\n\n<p>我们可以看到我们再Vue的原型上挂上了我们的 <code>$notice</code> 方法，这个方法调用的时候就会触发我们在 notice.js 文件中动态渲染组件的一套流程。这个时候我们就可以在 docs/README.md 文档中测试着用了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  mounted() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.$notice(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        title: <span class=\"string\">'提示'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        content: <span class=\"keyword\">this</span>.content,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        duration: <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h2 id=\"单独打包样式和组件\"><a href=\"#单独打包样式和组件\" class=\"headerlink\" title=\"单独打包样式和组件\"></a>单独打包样式和组件</h2><p>为了能支持按需加载的功能，我们除了将整个组件库打包之外，还需要对样式和组件单独打包成单个的文件。这里我们需要做两件事儿</p>\n<ol>\n<li>打包单独的css文件</li>\n<li>打包单独的组件内容</li>\n</ol>\n<p>对于第一点，我们需要对 build/gen-style.js 文件做一下改造，加上buildSeperateCss任务，完整代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 其他之前的代码...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildSeperateCss</span>(<span class=\"params\">cb</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(components).forEach(<span class=\"function\"><span class=\"params\">compName</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    gulp.src(<span class=\"string\">`../src/styles/<span class=\"subst\">$&#123;compName&#125;</span>.scss`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(sass())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(autoprefixer())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(cleanCSS())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(rename(<span class=\"string\">`<span class=\"subst\">$&#123;compName&#125;</span>.css`</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'../lib/styles'</span>));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  cb()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">exports.default = gulp.series(buildCss, buildSeperateCss) <span class=\"comment\">// 加上 buildSeperateCss</span></span></pre></td></tr></table></figure>\n\n<p>对于第二点，我们可以用一个新的webpack配置来处理，新建一个 build/webpack.component.js 文件，写入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpackBaseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.js'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> components = <span class=\"built_in\">require</span>(<span class=\"string\">'./components.json'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">process.env.NODE_ENV = <span class=\"string\">'production'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> basePath = path.resolve(__dirname, <span class=\"string\">'../'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> entries = &#123;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(components).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  entries[key] = path.join(basePath, <span class=\"string\">'src'</span>, components[key])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(webpackBaseConfig, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  mode: <span class=\"string\">\"production\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  entry: entries,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  output: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'../lib'</span>),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    publicPath: <span class=\"string\">'/lib/'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    chunkFilename: <span class=\"string\">'[id].js'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// library: 'lime-ui',</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    libraryTarget: <span class=\"string\">'umd'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    umdNamedDefine: <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  externals: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    vue: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      root: <span class=\"string\">'Vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs: <span class=\"string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      commonjs2: <span class=\"string\">'vue'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      amd: <span class=\"string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  plugins: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"string\">'\"production\"'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>这里我们引用了build文件夹下的一个叫做 component.json 的文件，该文件是我自定义用来标识我们的组件和组件路径的，实际上你也可以通过脚本直接遍历 src/packages目录自动获得这样一些信息。这里只是简单演示， build/component.json 的代码如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"button\"</span>: <span class=\"string\">\"packages/button/index.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"notice\"</span>: <span class=\"string\">\"packages/notice/notice.js\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>所有的单独打包流程配置好以后，我们就可以在 package.json 文件中再加上 scripts 命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">\"build:components\"</span>: <span class=\"string\">\"webpack --config build/webpack.component.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"dist\"</span>: <span class=\"string\">\"npm run build:style &amp;&amp; npm run build:prod &amp;&amp; npm run build:components\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>OK，现在只需要运行 <code>npm run dist</code> 命令，它就会自动去构建完整的样式内容和各个组件单独的样式内容，然后会打包一个完整的组件包和各个组件的单独的包。</p>\n<p>这里需要注意的一点就是你的package.json 文件中的这几个字段需要做一下调整</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"lime-ui\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"lib/lime-ui.min.js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>其中name表示别人使用了你的包的时候的包名，main字段很重要，表示别人直接引入你包的时候，入口文件是哪一个。这里因为我们webpack打包后的文件是 lib/lime-ui.min.js 所以我们这样去设置。</p>\n<p>一切就绪后，你就可以运行 <code>npm run dist</code> 打包你的组件库，然后 <code>npm publish</code> 去发布你的组件库了（发布前需要 <code>npm login</code> 登陆）</p>\n<h2 id=\"使用自己的组件库\"><a href=\"#使用自己的组件库\" class=\"headerlink\" title=\"使用自己的组件库\"></a>使用自己的组件库</h2><h3 id=\"直接使用\"><a href=\"#直接使用\" class=\"headerlink\" title=\"直接使用\"></a>直接使用</h3><p>我们可以用vue-cli 或其他工具另外生成一个demo项目，用这个项目去引入我们的组件库。如果你的包还没有发布出去，可以在你的组件库项目目录下 用 <code>npm link</code> 或者 <code>yarn link</code>的命令创建一个link（推荐使用yarn）</p>\n<p>然后在你的demo目录下使用 <code>npm link package_name</code> 或者 <code>yarn link package_name</code> 这里的package_name就是你的组件库的包名，然后在你的demo项目的入口文件里</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> vue</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> LimeUI <span class=\"keyword\">from</span> <span class=\"string\">'lime-ui'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'lime-ui/lib/styles/lime-ui.css'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 其他代码 ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(LimeUI)</span></pre></td></tr></table></figure>\n\n<p>这样设置好之后，我们创建的组件就可以在这个项目里使用了</p>\n<h3 id=\"按需加载-1\"><a href=\"#按需加载-1\" class=\"headerlink\" title=\"按需加载\"></a>按需加载</h3><p>上面我们谈的是全局载入的一种使用方法，那如何按需加载呢？其实我们之前也说过那么一点</p>\n<p>先通过npm安装好 <code>babel-plugin-component</code> 包，然后在你的demo项目的 <code>.babelrc</code> 文件中写上这部分内容</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        [<span class=\"string\">\"component\"</span>, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"libraryName\"</span>: <span class=\"string\">\"lime-ui\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"libDir\"</span>: <span class=\"string\">\"lib\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"styleLibrary\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"styles\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"base\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// no base.css file</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"[module].css\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>这里的配置是要符合我们的lime-ui 的一个目录结构的，有了这个配置我们就可以进行按需加载了，你可以像这样做加载一个Button</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">'lime-ui'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'a-button'</span>, Button)</span></pre></td></tr></table></figure>\n\n<p>可以看到的是，我们并没有在这个位置加载任何样式，因为 <code>babel-plugin-component</code> 已经帮我们做了，不过因为我们只在组件库的入口点里面设置了 install 方法用来注册组件，所以这里我们按需引入的时候，就需要自己手动注册了。</p>\n<h3 id=\"主题定制\"><a href=\"#主题定制\" class=\"headerlink\" title=\"主题定制\"></a>主题定制</h3><p>前面的内容做好之后，主题定制就比较简单了，我们先在DEMO项目的入口文件同级目录下创建一个 global.scss 文件，然后在其中写入类似下面这样的代码。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$--color-primary</span>: red;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~lime-ui/src/styles/index.scss\"</span>;</span></pre></td></tr></table></figure>\n\n<p>然后在入口文件中把引入组件库的方式改变一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> vue</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> LimeUI <span class=\"keyword\">from</span> <span class=\"string\">'lime-ui'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./global.scss'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 其他代码 ...</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(LimeUI)</span></pre></td></tr></table></figure>\n\n<p>我们在入口文件中把对组件库的样式引入，改成引入我们自定义的global.scss文件。</p>\n<p>其实这里就是覆盖了我们在组件库项目里 var.scss 里的变量的值，然后其余的组件基础样式还是使用了各自的样式内容，这样就可以达到主题定制了。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>本文通过对组件库的一些特性的介绍和一个实际的操作案例，阐述了打造一套组件库的一些基础的东西。希望能通过这样的一次分享，让我们不只是去使用组件库，而是能知道组件库的诞生过程和了解组件库的一些内部特性，帮助我们在日常使用的过程中能“心中有数”，当出现问题或组件库需求可能不满足的时候有一个新的思考入手点，那就足够了。</p>\n<h1 id=\"引用参考\"><a href=\"#引用参考\" class=\"headerlink\" title=\"引用参考\"></a>引用参考</h1><ol>\n<li>Vue<code>$dispatch</code>和<code>$broadcast</code>详解: <a href=\"https://juejin.im/post/5c7fd345f265da2da771f4cd\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5c7fd345f265da2da771f4cd</a></li>\n<li>Component Tests with Vue.js - Matt O’Connell : <a href=\"https://www.youtube.com/watch?v=OIpfWTThrK8\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=OIpfWTThrK8</a></li>\n<li>掘金小册：Vue.js 组件精讲</li>\n<li>ElementUI ：<a href=\"https://github.com/ElemeFE/element\" target=\"_blank\" rel=\"noopener\">https://github.com/ElemeFE/element</a></li>\n<li>iView ：<a href=\"https://github.com/iview/iview\" target=\"_blank\" rel=\"noopener\">https://github.com/iview/iview</a></li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3so5k8l00004efy97zr1opx","category_id":"ck3so5k8x00024efyh7ss08b4","_id":"ck3so5k99000a4efy4zsr78tq"},{"post_id":"ck3so5k8w00014efy1s4o2h0u","category_id":"ck3so5k9500074efy316c6i1l","_id":"ck3so5k9c000g4efy6l5tfgji"},{"post_id":"ck3so5k9300054efyey23fkiz","category_id":"ck3so5k9b000f4efyad0j2ecz","_id":"ck3so5k9d000m4efygzosa56v"},{"post_id":"ck3so5k9400064efy91q05fx2","category_id":"ck3so5k9b000f4efyad0j2ecz","_id":"ck3so5k9j000q4efyd3p558of"},{"post_id":"ck3so5k9700094efy31b6dlal","category_id":"ck3so5k9b000f4efyad0j2ecz","_id":"ck3so5k9k000u4efy0eyp3mek"},{"post_id":"ck3so5k9100044efygmy34osp","category_id":"ck3so5k9500074efy316c6i1l","_id":"ck3so5k9p000w4efyc61f32z4"},{"post_id":"ck3so5k9100044efygmy34osp","category_id":"ck3so5k9i000p4efy3uzi5dk4","_id":"ck3so5k9p000y4efybl8qfzbz"},{"post_id":"ck3so5k9w00124efyavkph16p","category_id":"ck3so5k9b000f4efyad0j2ecz","_id":"ck3so5k9y00144efyajfs2yec"},{"post_id":"ck3so5ka300194efyeoor1x7w","category_id":"ck3so5k9500074efy316c6i1l","_id":"ck3so5ka4001b4efy4ai64lvd"}],"PostTag":[{"post_id":"ck3so5k8l00004efy97zr1opx","tag_id":"ck3so5k9000034efy0tbn4xpj","_id":"ck3so5k9b000d4efybcjmdq05"},{"post_id":"ck3so5k8l00004efy97zr1opx","tag_id":"ck3so5k9600084efyb04p8fr1","_id":"ck3so5k9b000e4efy4crh7szt"},{"post_id":"ck3so5k8w00014efy1s4o2h0u","tag_id":"ck3so5k99000c4efy5ip9cubn","_id":"ck3so5k9c000i4efyefxe2y28"},{"post_id":"ck3so5k9100044efygmy34osp","tag_id":"ck3so5k9c000h4efye93yguzj","_id":"ck3so5k9h000o4efy6h109sd1"},{"post_id":"ck3so5k9100044efygmy34osp","tag_id":"ck3so5k9d000k4efyegd88pi5","_id":"ck3so5k9j000r4efyg6qq1xo2"},{"post_id":"ck3so5k9300054efyey23fkiz","tag_id":"ck3so5k9e000n4efy89p62foa","_id":"ck3so5k9k000t4efy4m7p2tyr"},{"post_id":"ck3so5k9400064efy91q05fx2","tag_id":"ck3so5k9e000n4efy89p62foa","_id":"ck3so5k9q000z4efy2xzr2nnd"},{"post_id":"ck3so5k9400064efy91q05fx2","tag_id":"ck3so5k9k000v4efyguu1g5t7","_id":"ck3so5k9q00104efyeiwj7rhe"},{"post_id":"ck3so5k9700094efy31b6dlal","tag_id":"ck3so5k9e000n4efy89p62foa","_id":"ck3so5k9r00114efyd39ubkg7"},{"post_id":"ck3so5k9w00124efyavkph16p","tag_id":"ck3so5k9e000n4efy89p62foa","_id":"ck3so5k9y00164efy1gy24jq7"},{"post_id":"ck3so5k9w00124efyavkph16p","tag_id":"ck3so5k9y00134efy3kfy43fm","_id":"ck3so5k9y00174efy769q6cxz"},{"post_id":"ck3so5k9w00124efyavkph16p","tag_id":"ck3so5k9y00154efy0arygonl","_id":"ck3so5k9z00184efy628e4mop"},{"post_id":"ck3so5ka300194efyeoor1x7w","tag_id":"ck3so5k99000c4efy5ip9cubn","_id":"ck3so5ka4001a4efyd5dod2y5"}],"Tag":[{"name":"Elasticsearch","_id":"ck3so5k9000034efy0tbn4xpj"},{"name":"大数据","_id":"ck3so5k9600084efyb04p8fr1"},{"name":"前端","_id":"ck3so5k99000c4efy5ip9cubn"},{"name":"性能优化","_id":"ck3so5k9c000h4efye93yguzj"},{"name":"NodeJs","_id":"ck3so5k9d000k4efyegd88pi5"},{"name":"八里庄技术沙龙","_id":"ck3so5k9e000n4efy89p62foa"},{"name":"Android","_id":"ck3so5k9k000v4efyguu1g5t7"},{"name":"Kubernetes","_id":"ck3so5k9y00134efy3kfy43fm"},{"name":"Docker","_id":"ck3so5k9y00154efy0arygonl"}]}}